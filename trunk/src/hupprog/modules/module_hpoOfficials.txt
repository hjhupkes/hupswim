Option Explicit
Option Compare Database






Private Function offBuildList_createTable(tbName As String) As Boolean
On Error GoTo fout
offBuildList_createTable = False


DoCmd.DeleteObject acTable, tbName
DoCmd.DeleteObject acTable, tbName & "_stats"


Dim db As Database, tb As TableDef

Set db = CurrentDb()
Set tb = db.CreateTableDef(tbName)

tb.Fields.Append tb.CreateField("OFL_Index", dbLong)
tb.Fields.Append tb.CreateField("OFL_Naam", dbText, 255)
tb.Fields.Append tb.CreateField("OFL_Achternaam", dbText, 255)
tb.Fields.Append tb.CreateField("OFL_GRP_BevCode", dbLong)
tb.Fields.Append tb.CreateField("OFL_GRP_BevDescription", dbText, 255)
tb.Fields.Append tb.CreateField("OFL_GRP_Vereniging", dbText, 255)

db.TableDefs.Append tb

Set tb = Nothing


Set tb = db.CreateTableDef(tbName & "_stats")

tb.Fields.Append tb.CreateField("OFL_GrpPerVer", dbBoolean)
tb.Fields.Append tb.CreateField("OFL_GrpPerBev", dbBoolean)
tb.Fields.Append tb.CreateField("OFL_RestrictVer", dbBoolean)
tb.Fields.Append tb.CreateField("OFL_RestrictBev", dbBoolean)
tb.Fields.Append tb.CreateField("OFL_RestrictBevCode", dbLong)
tb.Fields.Append tb.CreateField("OFL_IncludeEmail", dbBoolean)
tb.Fields.Append tb.CreateField("OFL_IncludeVerName", dbBoolean)

db.TableDefs.Append tb
Set tb = Nothing





Set db = Nothing


offBuildList_createTable = True
Exit Function
fout:
If (Err = 3011) Or (Err = 7874) Then
  Resume Next
End If
MsgBox Err & " offBuildList_createTable" & vbCrLf & Error$, 16
Exit Function
End Function

Private Sub offBuildList_appendClause(ByRef sqlWhereClause As String, newCondition As String)
If (Len(sqlWhereClause) > 0) Then
  sqlWhereClause = sqlWhereClause & " and "
Else
  sqlWhereClause = sqlWhereClause & "WHERE "
End If
sqlWhereClause = sqlWhereClause & newCondition
End Sub



Private Function offBuildList_outputStats(ByVal tbNameStats As String, ByVal blListPerBev As Boolean, ByVal blRestrictBev As Long, ByVal bvMask As Long, _
  ByVal blListPerVer As Boolean, ByVal blRestrictVer As Boolean) As Boolean

On Error GoTo fout
offBuildList_outputStats = False


Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset(tbNameStats)
rs.AddNew
  rs("OFL_GrpPerBev") = blListPerBev
  rs("OFL_GrpPerVer") = blListPerVer
  rs("OFL_RestrictBev") = blRestrictBev
  rs("OFL_RestrictBevCode") = bvMask
  
  rs("OFL_RestrictVer") = blRestrictVer
  
  
rs.Update

offBuildList_outputStats = True
Exit Function

fout:
MsgBox Err & " offBuildList_outputStats" & vbCrLf & Error$, 16
Exit Function

'debug
On Error GoTo 0
Resume

End Function



Public Function offBuildList(ByVal blListPerBev As Boolean, ByVal blRestrictBev As Long, ByVal bvMask As Long, _
  ByVal blListPerVer As Boolean, ByVal blRestrictVer As Boolean, ByVal nVers As Integer, ByRef verNames() As String) As Boolean
On Error GoTo fout
  
If Not offBuildList_createTable("~OffList") Then
  Exit Function
End If

Dim bevValidCodes(0 To 1000) As Long
Dim bevValidDes(0 To 1000) As String
Dim nBevValidCodes As Integer
nBevValidCodes = 0

If (blListPerBev) Then
  Dim rsBv As Recordset
  Set rsBv = CurrentDb().OpenRecordset("dtBevoegdheden")
  rsBv.MoveFirst
  Do Until rsBv.EOF
    Dim tpCode As Long
    tpCode = Nz(rsBv("BV_nr"))
    Dim blUseCode As Boolean
    blUseCode = False
    If (blRestrictBev) Then
      If (lsIsMatchSingle(bvMask, tpCode)) Then
        blUseCode = True
      End If
    Else
      blUseCode = True
    End If
    If (blUseCode) Then
      Dim tpDes As String
      tpDes = Nz(rsBv("BV_Omschrijving"))
      bevValidCodes(nBevValidCodes) = tpCode
      bevValidDes(nBevValidCodes) = tpDes
      nBevValidCodes = nBevValidCodes + 1
    End If
    rsBv.MoveNext
  Loop
  
  appCleanRS rsBv
  
End If


Dim sqlWhereClause As String
sqlWhereClause = ""


'If (blRestrictVer) Then
'  offBuildList_appendClause sqlWhereClause, "[ju_vereniging]=""" & sVer & """"
'End If


Dim outp As Recordset
Set outp = CurrentDb().OpenRecordset("~OffList")

Dim rsOff As Recordset
Set rsOff = CurrentDb().OpenRecordset("select * from [dtOfficials] " & sqlWhereClause)

rsOff.MoveFirst
Do Until rsOff.EOF

  Dim tpJIdx As Long, tpOpm As Long, tpVer As String, tpAchternaam As String
  tpJIdx = Nz(rsOff("JU_Index"))
  
  tpAchternaam = Nz(rsOff("ju_achternaam"))
  'If (tpAchternaam = "") Then
  '  tpAchternaam = nmExtractAchternaam(tpName)
  'End If
  
  tpOpm = Nz(rsOff("ju_bevnr"))
  tpVer = Nz(rsOff("ju_vereniging"))
  
  Dim tpBvString As String
  tpBvString = Nz(rsOff("Ju_bevoegdheid"))
  
  Dim tpValid As Boolean
  tpValid = True
  
  
  If (tpValid) Then
    If (blRestrictVer) Then
      If bSearchString(tpVer, nVers, verNames) < 0 Then
        tpValid = False
      End If
    End If
  End If
  
 
  If (tpValid) Then
    If (blRestrictBev) Then
      'Explicitly ban zero bevoegdheden.
      If (tpBvString = "") Then
        tpValid = False
      End If
      If Not lsIsMatch(tpOpm, bvMask) Then
        tpValid = False
      End If
    End If
  End If
  
  If (tpValid) Then
    If (blListPerBev) Then
      'Explicitbly ban zero bevoegdheden.
      If (tpBvString = "") Then
        tpValid = False
      End If
    End If
  End If
  
  
  Dim tpName As String, tpHrMw As String, tpVL As String, tpVG As String, tpAN As String
  
  
  tpName = ""
  
  If (tpValid) Then
    tpHrMw = Nz(rsOff("ju_hr/mw"))
    tpVL = Nz(rsOff("ju_voorletters"))
    tpVG = Nz(rsOff("ju_voorvoegsel"))
    tpAN = Nz(rsOff("ju_achternaam"))
    
    tpName = tpHrMw & " " & fmtName(tpVL, tpVG, tpAN)
  
  End If
  
  If (tpValid) Then
    If (blListPerBev) Then
      Dim i As Integer
      For i = 0 To nBevValidCodes - 1
        If (lsIsMatchSingle(tpOpm, bevValidCodes(i))) Then
          outp.AddNew
            outp("OFL_index") = tpJIdx
            outp("OFL_Naam") = tpName
            outp("OFL_Achternaam") = hzn(tpAchternaam)
            If (blListPerVer) Then
              outp("OFL_GRP_Vereniging") = hzn(tpVer)
            End If
            outp("OFL_GRP_BevCode") = bevValidCodes(i)
            outp("OFL_GRP_BevDescription") = bevValidDes(i)
          outp.Update
        End If
      Next i
    Else
      outp.AddNew
        outp("OFL_Index") = tpJIdx
        outp("OFL_Naam") = tpName
        outp("OFL_Achternaam") = hzn(tpAchternaam)
        If (blListPerVer) Then
          outp("OFL_GRP_Vereniging") = hzn(tpVer)
        End If
      outp.Update
    End If
  End If 'if tpValid
  
  rsOff.MoveNext
Loop

appCleanRS rsOff
appCleanRS outp

If Not offBuildList_outputStats("~OffList_Stats", blListPerBev, blRestrictBev, bvMask, blListPerVer, blRestrictVer) Then
  Exit Function
End If




offBuildList = True
Exit Function

fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " offBuildList" & vbCrLf & Error$, 16
Exit Function


'debug
On Error GoTo 0
Resume
  
  
End Function

Public Function offListToMailMerge() As Boolean
On Error GoTo fout
offListToMailMerge = False

Dim skOff As Recordset
Set skOff = CurrentDb().OpenRecordset("dtOfficials")
skOff.Index = "PrimaryKey"



Dim sql As String
sql = "Delete * from gMailMerge"

DoCmd.SetWarnings False
DoCmd.RunSQL sql
DoCmd.SetWarnings True


Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset("select ofl_index, ofl_naam from [~offList] group by ofl_index, ofl_naam")

Dim outp As Recordset
Set outp = CurrentDb().OpenRecordset("gMailMerge")

Dim curIdx As Long
curIdx = 0

rs.MoveFirst
Do Until rs.EOF

  Dim tpJIdx As Long
  tpJIdx = Nz(rs("OFL_Index"))
  
  Dim tpName As String
  tpName = Nz(rs("OFL_Naam"))
  
  
  skOff.Seek "=", tpJIdx
  If (skOff.NoMatch) Then
    Err.Raise 1, , "Internal error"
  End If
  
  
  
  
  outp.AddNew
    outp("MM_Name") = hzn(tpName)
    outp("MM_Adres1") = skOff("ju_adres")
    outp("MM_Postcode") = skOff("ju_postcode")
    outp("MM_City") = skOff("ju_plaats")
    outp("MM_Nation") = Null
    outp("MM_Email") = skOff("ju_email")
    outp("MM_Sort_KEY") = skOff("ju_achternaam")
    outp("MM_Find_Key") = skOff("ju_achternaam")
    outp("MM_IsSelected") = True
    
    outp("MM_Idx") = curIdx
    curIdx = curIdx + 1
    
  outp.Update

  rs.MoveNext
Loop


appCleanRS rs
appCleanRS outp
appCleanRS skOff

offListToMailMerge = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " offListToMailMerge" & vbCrLf & Error$, 16
Exit Function

'debug
On Error GoTo 0
Resume
End Function




Public Function offBuildListForWed(ByVal wednr As Long, ByVal blEntireMeet As Boolean) As Boolean
On Error GoTo fout
  
If Not offBuildList_createTable("~OffList") Then
  Exit Function
End If


Dim lMainWedNr As Long
lMainWedNr = wednr

If (blEntireMeet) Then
  Dim tpWedInf As WED_BASIC_INFO
  Dim isFnd As Boolean
  If Not wedLookup(wednr, isFnd, tpWedInf) Then
    Exit Function
  End If
  If Not isFnd Then
    Err.Raise 1, , "Could not find wedstrijd: " & wednr
  End If
  
  lMainWedNr = tpWedInf.meetMainNr
End If


Dim outp As Recordset
Set outp = CurrentDb().OpenRecordset("~OffList")


Dim offSQL As String

If (blEntireMeet) Then
  offSQL = "SELECT JD_Index FROM dtWedstrijdGegevens INNER JOIN dtWedstrijdJury " & _
  "ON dtWedstrijdGegevens.WE_Wedstrijdnummer = dtWedstrijdJury.jd_Wedstrijdnummer " & _
  "WHERE  (((dtWedstrijdJury.jd_Wedstrijdnummer) = " & lMainWedNr & ")) Or (((dtWedstrijdGegevens.WE_MainWedstrijdnummer) = " & lMainWedNr & ")) " & _
  "GROUP BY dtWedstrijdJury.jd_index;"
Else
  offSQL = "select jd_index from dtWedstrijdJury where jd_wedstrijdnummer = " & wednr & ";"
End If

Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset(offSQL)



Dim rsOff As Recordset
Set rsOff = CurrentDb().OpenRecordset("dtOfficials")
rsOff.Index = "PrimaryKey"

rs.MoveFirst
Do Until rs.EOF

  Dim tpJIdx As Long, tpAchternaam As String
  tpJIdx = Nz(rs("JD_Index"))
  
  rsOff.Seek "=", tpJIdx
  
  If (rsOff.NoMatch) Then
    Err.Raise 1, , "Internal error"
  End If
  
  Dim tpName As String, tpHrMw As String, tpVL As String, tpVG As String, tpAN As String
  
  tpName = ""
  
  
  tpHrMw = Nz(rsOff("ju_hr/mw"))
  tpVL = Nz(rsOff("ju_voorletters"))
  tpVG = Nz(rsOff("ju_voorvoegsel"))
  tpAN = Nz(rsOff("ju_achternaam"))
  
  tpName = tpHrMw & " " & fmtName(tpVL, tpVG, tpAN)
  
  outp.AddNew
    outp("OFL_Index") = tpJIdx
    outp("OFL_Naam") = tpName
    outp("OFL_Achternaam") = hzn(tpAN)
  outp.Update
  
  rs.MoveNext
Loop


appCleanRS rs
appCleanRS rsOff
appCleanRS outp


If Not offBuildList_outputStats("~OffList_Stats", False, False, False, False, False) Then
  Exit Function
End If




offBuildListForWed = True
Exit Function

fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " offBuildListForWed" & vbCrLf & Error$, 16
Exit Function


'debug
On Error GoTo 0
Resume
  
  
End Function





Public Function offPromptUser(ByRef isOK As Boolean, ByRef lkpOffIdx As Long) As Boolean
On Error GoTo fout
offPromptUser = False


Dim sql As String
sql = "Delete * from hpoOffOpzoek;"
DoCmd.SetWarnings False
DoCmd.RunSQL sql
DoCmd.SetWarnings True

Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset("hpoOffOpzoek")

rs.AddNew
  rs("OO_OK") = False
rs.Update

rs.Close

DoCmd.OpenForm "hpoOffOpzoek", , , , , acDialog

Set rs = CurrentDb().OpenRecordset("hpoOffOpzoek")

rs.MoveFirst
If rs.EOF Then
  Err.Raise 1, , "Intern probleem. Tabel hpoOffOpzoek is leeg."
End If

isOK = Nz(rs("OO_OK"))

lkpOffIdx = Nz(rs("OO_Index"))

rs.Close

offPromptUser = True
Exit Function
fout:
If (Err = 3021) Then Resume Next ' no current record
MsgBox Err & " offPromptUser" & vbCrLf & Error$, 16
DoCmd.SetWarnings True
Exit Function
End Function


Private Function bevGetCodes(ByRef nCodes As Integer, codes() As String, nrs() As Long) As Boolean
On Error GoTo fout
bevGetCodes = False

Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset("dtBevoegdheden")

rs.MoveFirst
Do Until rs.EOF
  Dim tpCode As String, tpNr As Long
  tpCode = Nz(rs("BV_Code"))
  tpNr = Nz(rs("BV_NR"))
  
  If (tpCode <> "") And (tpNr >= 1) And (tpNr <= 31) Then
    Dim insPos As Integer
    insPos = insString(tpCode, nCodes, codes)
    shiftRightLong insPos, 1, (nCodes - 1), nrs
    nrs(insPos) = tpNr

  End If
  
  rs.MoveNext
Loop

appCleanRS rs



bevGetCodes = True
Exit Function

fout:
If (Err = 3021) Then Resume Next

MsgBox Err & " bevGetCodes" & vbCrLf & Error$, 16
Exit Function

End Function


Public Function bevFromString(ByVal s As String) As Long
On Error GoTo fout
bevFromString = 0

Dim nrs(0 To 31) As Long
Dim codes(0 To 31) As String
Dim nCodes As Integer

If Not bevGetCodes(nCodes, codes, nrs) Then
  Exit Function
End If

bevFromString = bevFromString_bare(s, nCodes, codes, nrs)

Exit Function

fout:
MsgBox Err & " bevFromString" & vbCrLf & Error$, 16
Exit Function

'debug
On Error GoTo 0
Resume

End Function

Private Function bevFromString_bare(ByVal s As String, ByVal nCodes As Integer, ByRef codes() As String, ByRef nrs() As Long) As Long
On Error GoTo fout

bevFromString_bare = 0


If (s = "") Then
  Exit Function
End If

'Need to deal with codes that can be more than one character. If single character-code can
'not be found, we just keep adding extra characters until the code can be resolved.

Dim tpToParse As String
tpToParse = ""

While s <> ""
  tpToParse = tpToParse & Left(s, 1)
  s = Right(s, Len(s) - 1)
  
  Dim pos As Integer
  pos = bSearchString(tpToParse, nCodes, codes)
  If (pos >= 0) Then
    'we have found the code
    bevFromString_bare = bevFromString_bare + 2 ^ (nrs(pos) - 1)
    'reset the code to parse
    tpToParse = ""
  End If
Wend
  

Exit Function


fout:
MsgBox Err & " bevFromString_bare" & vbCrLf & Error$, 16
Exit Function


'debug
'On Error GoTo 0
'Resume

   
End Function


Public Function bevToString(ByVal bv As Long) As String
On Error GoTo fout
bevToString = ""

Dim nrs(0 To 31) As Long
Dim codes(0 To 31) As String
Dim nCodes As Integer

If Not bevGetCodes(nCodes, codes, nrs) Then
  Exit Function
End If

bevToString = bevToString_bare(bv, nCodes, codes, nrs)

Exit Function

fout:
MsgBox Err & " bevToString" & vbCrLf & Error$, 16
Exit Function

'debug
On Error GoTo 0
Resume

End Function

Private Function bevToString_bare(ByVal bv As Long, ByVal nCodes As Integer, ByRef codes() As String, ByRef nrs() As Long) As String
On Error GoTo fout

bevToString_bare = ""

If (bv = 0) Then
  Exit Function
End If

Dim i As Integer
For i = 0 To nCodes - 1
  If (bv And (2 ^ (nrs(i) - 1))) > 0 Then
    bevToString_bare = bevToString_bare & codes(i)
  End If
Next i

Exit Function


fout:
MsgBox Err & " bevToString_bare" & vbCrLf & Error$, 16
Exit Function


'debug
'On Error GoTo 0
'Resume

   
End Function


Public Function offUpdateBVNrs() As Boolean
On Error GoTo fout
offUpdateBVNrs = False

Dim nCodes As Integer
Dim codes(0 To 31) As String
Dim nrs(0 To 31) As Long

If Not bevGetCodes(nCodes, codes, nrs) Then
  Exit Function
End If

Dim off As Recordset
Set off = CurrentDb().OpenRecordset("dtOfficials", dbOpenDynaset)

off.MoveFirst
Do Until off.EOF
  Dim tpBevS As String
  tpBevS = Nz(off("JU_Bevoegdheid"))
  Dim tpBevNr As Long
  tpBevNr = bevFromString_bare(tpBevS, nCodes, codes, nrs)
  If (tpBevNr <> Nz(off("JU_BevNr"))) Then
    off.Edit
    off("JU_BevNr") = tpBevNr
    off.Update
  End If
  
  off.MoveNext
Loop


appCleanRS off

offUpdateBVNrs = True

Exit Function


fout:
If (Err = 3021) Then Resume Next ' no current record
MsgBox Err & " offUpdateBVNrs" & vbCrLf & Error$, 16
Exit Function


'debug
'On Error GoTo 0
'Resume

End Function