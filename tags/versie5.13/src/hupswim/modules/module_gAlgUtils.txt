Option Compare Database
Option Explicit

Private Declare Function URLDownloadToCacheFile Lib "urlmon" Alias "URLDownloadToCacheFileA" (ByVal lpUnkcaller As Long, ByVal szURL As String, ByVal szFileName As String, ByVal dwBufLength As Long, ByVal dwReserved As Long, ByVal IBindStatusCallback As Long) As Long
Private Declare Function DeleteUrlCacheEntry Lib "wininet.dll" Alias "DeleteUrlCacheEntryA" (ByVal lpszUrlName As String) As Long



Private Const HASH_MD5_BLK_LEN As Long = 64

Private Const HASH_MD5_S11 As Long = 7
Private Const HASH_MD5_S12 As Long = 12
Private Const HASH_MD5_S13 As Long = 17
Private Const HASH_MD5_S14 As Long = 22
Private Const HASH_MD5_S21 As Long = 5
Private Const HASH_MD5_S22 As Long = 9
Private Const HASH_MD5_S23 As Long = 14
Private Const HASH_MD5_S24 As Long = 20
Private Const HASH_MD5_S31 As Long = 4
Private Const HASH_MD5_S32 As Long = 11
Private Const HASH_MD5_S33 As Long = 16
Private Const HASH_MD5_S34 As Long = 23
Private Const HASH_MD5_S41 As Long = 6
Private Const HASH_MD5_S42 As Long = 10
Private Const HASH_MD5_S43 As Long = 15
Private Const HASH_MD5_S44 As Long = 21

Private Const HASH_MD5_OFFSET_4 = 4294967296#
Private Const HASH_MD5_MAXINT_4 = 2147483647


Public Function bSearchInt(ByVal i As Integer, ByVal cnt As Integer, ByRef intArray() As Integer) As Integer
On Error GoTo fout
bSearchInt = -1

Dim l As Integer, r As Integer, m As Integer
l = 0
r = cnt
While (r > l)
 m = (l + r) \ 2
 If (i < intArray(m)) Then
   r = m
 ElseIf (i > intArray(m)) Then
   l = m + 1
 Else
   bSearchInt = m
   Exit Function
 End If
Wend


Exit Function
fout:
MsgBox Err & " " & Error$, 16
Exit Function
End Function

Public Function bSearchLong(ByVal lToFind As Long, ByVal cnt As Integer, ByRef lngArray() As Long) As Integer
On Error GoTo fout
bSearchLong = -1

Dim l As Integer, r As Integer, m As Integer
l = 0
r = cnt
While (r > l)
 m = (l + r) \ 2
 If (lToFind < lngArray(m)) Then
   r = m
 ElseIf (lToFind > lngArray(m)) Then
   l = m + 1
 Else
   bSearchLong = m
   Exit Function
 End If
Wend


Exit Function
fout:
MsgBox Err & " " & Error$, 16
Exit Function
End Function

Public Function bSearchString(ByVal sToFind As String, ByVal cnt As Integer, ByRef sArray() As String) As Integer
On Error GoTo fout
bSearchString = -1

Dim l As Integer, r As Integer, m As Integer
l = 0
r = cnt
While (r > l)
 m = (l + r) \ 2
 Dim cmp As Integer
 cmp = StrComp(sToFind, sArray(m))
 
 
 If (cmp < 0) Then
   r = m
 ElseIf (cmp > 0) Then
   l = m + 1
 Else
   bSearchString = m
   Exit Function
 End If
Wend


Exit Function
fout:
MsgBox Err & " " & Error$, 16
Exit Function
End Function


'return the insertion position
Public Function insInt(ByVal i As Integer, ByRef cnt As Integer, ByRef intArray() As Integer) As Integer
On Error GoTo fout
insInt = -1
Dim insPos As Integer
insPos = cnt
Dim done As Boolean
done = (insPos = 0)
While (Not done)
  If (intArray(insPos - 1) > i) Then
    intArray(insPos) = intArray(insPos - 1)
    insPos = insPos - 1
  Else
    done = True
  End If
  If (insPos = 0) Then
    done = True
  End If
Wend
intArray(insPos) = i
insInt = insPos
cnt = cnt + 1
Exit Function
fout:
MsgBox Err & " " & Error$, 16

End Function

'return the insertion position
Public Function insInt2d(ByVal firstIdx As Integer, ByVal i As Integer, ByRef cnt() As Integer, ByRef intArray() As Integer) As Integer
On Error GoTo fout
insInt2d = -1
Dim insPos As Integer
insPos = cnt(firstIdx)
Dim done As Boolean
done = (insPos = 0)
While (Not done)
  If (intArray(firstIdx, insPos - 1) > i) Then
    intArray(firstIdx, insPos) = intArray(firstIdx, insPos - 1)
    insPos = insPos - 1
  Else
    done = True
  End If
  If (insPos = 0) Then
    done = True
  End If
Wend
intArray(firstIdx, insPos) = i
insInt2d = insPos
cnt(firstIdx) = cnt(firstIdx) + 1
Exit Function
fout:
MsgBox Err & " " & Error$, 16

End Function


'return the insertion position
Public Function insString(ByVal s As String, ByRef cnt As Integer, ByRef sArray() As String) As Integer
On Error GoTo fout
insString = -1
Dim insPos As Integer
insPos = cnt
Dim done As Boolean
done = (insPos = 0)
While (Not done)
  If (sArray(insPos - 1) > s) Then
    sArray(insPos) = sArray(insPos - 1)
    insPos = insPos - 1
  Else
    done = True
  End If
  If (insPos = 0) Then
    done = True
  End If
Wend
sArray(insPos) = s
insString = insPos
cnt = cnt + 1
Exit Function
fout:
MsgBox Err & " " & Error$, 16

End Function

'return the insertion position
Public Function insString2d(ByVal firstIdx As Integer, ByVal s As String, ByRef cnt() As Integer, ByRef sArray() As String) As Integer
On Error GoTo fout
insString2d = -1
Dim insPos As Integer
insPos = cnt(firstIdx)
Dim done As Boolean
done = (insPos = 0)
While (Not done)
  If (sArray(firstIdx, insPos - 1) > s) Then
    sArray(firstIdx, insPos) = sArray(firstIdx, insPos - 1)
    insPos = insPos - 1
  Else
    done = True
  End If
  If (insPos = 0) Then
    done = True
  End If
Wend
sArray(firstIdx, insPos) = s
insString2d = insPos
cnt(firstIdx) = cnt(firstIdx) + 1
Exit Function
fout:
MsgBox Err & " " & Error$, 16

End Function


'return the insertion position
Public Function insLong(ByVal lngIns As Long, ByRef cnt As Integer, ByRef lngArray() As Long) As Integer
On Error GoTo fout
insLong = -1
Dim insPos As Integer
insPos = cnt
Dim done As Boolean
done = (insPos = 0)
While (Not done)
  If (lngArray(insPos - 1) > lngIns) Then
    lngArray(insPos) = lngArray(insPos - 1)
    insPos = insPos - 1
  Else
    done = True
  End If
  If (insPos = 0) Then
    done = True
  End If
Wend
lngArray(insPos) = lngIns
insLong = insPos
cnt = cnt + 1
Exit Function
fout:
MsgBox Err & " " & Error$, 16

End Function

'return the insertion position
Public Function insLong2d(ByVal firstIdx As Integer, ByVal lngIns As Long, ByRef cnt() As Integer, ByRef lngArray() As Long) As Integer
On Error GoTo fout
insLong2d = -1
Dim insPos As Integer
insPos = cnt(firstIdx)
Dim done As Boolean
done = (insPos = 0)
While (Not done)
  If (lngArray(firstIdx, insPos - 1) > lngIns) Then
    lngArray(firstIdx, insPos) = lngArray(firstIdx, insPos - 1)
    insPos = insPos - 1
  Else
    done = True
  End If
  If (insPos = 0) Then
    done = True
  End If
Wend
lngArray(firstIdx, insPos) = lngIns
insLong2d = insPos
cnt(firstIdx) = cnt(firstIdx) + 1
Exit Function
fout:
MsgBox Err & " " & Error$, 16

End Function

'return the insertion position
Public Function insDouble(ByVal dbIns As Double, ByRef cnt As Integer, ByRef dbArray() As Double) As Integer
On Error GoTo fout
insDouble = -1
Dim insPos As Integer
insPos = cnt
Dim done As Boolean
done = (insPos = 0)
While (Not done)
  If (dbArray(insPos - 1) > dbIns) Then
    dbArray(insPos) = dbArray(insPos - 1)
    insPos = insPos - 1
  Else
    done = True
  End If
  If (insPos = 0) Then
    done = True
  End If
Wend
dbArray(insPos) = dbIns
insDouble = insPos
cnt = cnt + 1
Exit Function
fout:
MsgBox Err & " " & Error$, 16

End Function



Public Sub shiftRightDouble(ByVal pos As Integer, ByVal Shift As Integer, ByVal oldCnt As Integer, ByRef dblArray() As Double)
On Error GoTo fout
If (Shift = 0) Then
  Exit Sub
End If
Dim insPos As Integer
Dim done As Boolean
insPos = oldCnt - 1 + Shift
done = (insPos - Shift < pos)
While Not done
  dblArray(insPos) = dblArray(insPos - Shift)
  insPos = insPos - 1
  done = (insPos - Shift < pos)
Wend

Exit Sub
fout:
MsgBox Err & " " & Error$, 16
Exit Sub
End Sub

Public Sub shiftRightDouble2d(ByVal firstIdx As Integer, ByVal pos As Integer, ByVal Shift As Integer, ByVal oldCnt As Integer, ByRef dblArray() As Double)
On Error GoTo fout
If (Shift = 0) Then
  Exit Sub
End If
Dim insPos As Integer
Dim done As Boolean
insPos = oldCnt - 1 + Shift
done = (insPos - Shift < pos)
While Not done
  dblArray(firstIdx, insPos) = dblArray(firstIdx, insPos - Shift)
  insPos = insPos - 1
  done = (insPos - Shift < pos)
Wend

Exit Sub
fout:
MsgBox Err & " " & Error$, 16
Exit Sub
End Sub

Public Sub shiftRightLong(ByVal pos As Integer, ByVal Shift As Integer, ByVal oldCnt As Integer, ByRef lngArray() As Long)
On Error GoTo fout
If (Shift = 0) Then
  Exit Sub
End If
Dim insPos As Integer
Dim done As Boolean
insPos = oldCnt - 1 + Shift
done = (insPos - Shift < pos)
While Not done
  lngArray(insPos) = lngArray(insPos - Shift)
  insPos = insPos - 1
  done = (insPos - Shift < pos)
Wend

Exit Sub
fout:
MsgBox Err & " " & Error$, 16
Exit Sub
End Sub

Public Sub shiftRightLong2d(ByVal firstIdx, ByVal pos As Integer, ByVal Shift As Integer, ByVal oldCnt As Integer, ByRef lngArray() As Long)
On Error GoTo fout
If (Shift = 0) Then
  Exit Sub
End If
Dim insPos As Integer
Dim done As Boolean
insPos = oldCnt - 1 + Shift
done = (insPos - Shift < pos)
While Not done
  lngArray(firstIdx, insPos) = lngArray(firstIdx, insPos - Shift)
  insPos = insPos - 1
  done = (insPos - Shift < pos)
Wend

Exit Sub
fout:
MsgBox Err & " " & Error$, 16
Exit Sub
End Sub

Public Sub shiftRightBoolean(ByVal pos As Integer, ByVal Shift As Integer, ByVal oldCnt As Integer, ByRef blArray() As Boolean)
On Error GoTo fout
If (Shift = 0) Then
  Exit Sub
End If
Dim insPos As Integer
Dim done As Boolean
insPos = oldCnt - 1 + Shift
done = (insPos - Shift < pos)
While Not done
  blArray(insPos) = blArray(insPos - Shift)
  insPos = insPos - 1
  done = (insPos - Shift < pos)
Wend

Exit Sub
fout:
MsgBox Err & " " & Error$, 16
Exit Sub
End Sub

Public Sub shiftRightBoolean2d(ByVal firstIdx, ByVal pos As Integer, ByVal Shift As Integer, ByVal oldCnt As Integer, ByRef blArray() As Boolean)
On Error GoTo fout
If (Shift = 0) Then
  Exit Sub
End If
Dim insPos As Integer
Dim done As Boolean
insPos = oldCnt - 1 + Shift
done = (insPos - Shift < pos)
While Not done
  blArray(firstIdx, insPos) = blArray(firstIdx, insPos - Shift)
  insPos = insPos - 1
  done = (insPos - Shift < pos)
Wend

Exit Sub
fout:
MsgBox Err & " " & Error$, 16
Exit Sub
End Sub


Public Sub shiftRightString(ByVal pos As Integer, ByVal Shift As Integer, ByVal oldCnt As Integer, ByRef sArray() As String)
On Error GoTo fout
If (Shift = 0) Then
  Exit Sub
End If
Dim insPos As Integer
Dim done As Boolean
insPos = oldCnt - 1 + Shift
done = (insPos - Shift < pos)
While Not done
  sArray(insPos) = sArray(insPos - Shift)
  insPos = insPos - 1
  done = (insPos - Shift < pos)
Wend

Exit Sub
fout:
MsgBox Err & " " & Error$, 16
Exit Sub
End Sub

Public Sub shiftRightString2d(ByVal firstIdx As Integer, ByVal pos As Integer, ByVal Shift As Integer, ByVal oldCnt As Integer, ByRef sArray() As String)
On Error GoTo fout
If (Shift = 0) Then
  Exit Sub
End If
Dim insPos As Integer
Dim done As Boolean
insPos = oldCnt - 1 + Shift
done = (insPos - Shift < pos)
While Not done
  sArray(firstIdx, insPos) = sArray(firstIdx, insPos - Shift)
  insPos = insPos - 1
  done = (insPos - Shift < pos)
Wend

Exit Sub
fout:
MsgBox Err & " " & Error$, 16
Exit Sub
End Sub

Public Sub shiftRightInt(ByVal pos As Integer, ByVal Shift As Integer, ByVal oldCnt As Integer, ByRef intArray() As Integer)
On Error GoTo fout
If (Shift = 0) Then
  Exit Sub
End If
Dim insPos As Integer
Dim done As Boolean
insPos = oldCnt - 1 + Shift
done = (insPos - Shift < pos)
While Not done
  intArray(insPos) = intArray(insPos - Shift)
  insPos = insPos - 1
  done = (insPos - Shift < pos)
Wend

Exit Sub
fout:
MsgBox Err & " " & Error$, 16
Exit Sub
End Sub

Public Sub shiftRightInt2d(ByVal firstIdx As Integer, ByVal pos As Integer, ByVal Shift As Integer, ByVal oldCnt As Integer, ByRef intArray() As Integer)
On Error GoTo fout
If (Shift = 0) Then
  Exit Sub
End If
Dim insPos As Integer
Dim done As Boolean
insPos = oldCnt - 1 + Shift
done = (insPos - Shift < pos)
While Not done
  intArray(firstIdx, insPos) = intArray(firstIdx, insPos - Shift)
  insPos = insPos - 1
  done = (insPos - Shift < pos)
Wend

Exit Sub
fout:
MsgBox Err & " " & Error$, 16
Exit Sub
End Sub



Public Sub shiftRightDate(ByVal pos As Integer, ByVal Shift As Integer, ByVal oldCnt As Integer, ByRef dArray() As Date)
On Error GoTo fout
If (Shift = 0) Then
  Exit Sub
End If
Dim insPos As Integer
Dim done As Boolean
insPos = oldCnt - 1 + Shift
done = (insPos - Shift < pos)
While Not done
  dArray(insPos) = dArray(insPos - Shift)
  insPos = insPos - 1
  done = (insPos - Shift < pos)
Wend

Exit Sub
fout:
MsgBox Err & " " & Error$, 16
Exit Sub
End Sub







'return the insertion position
Public Function insIntPair(ByVal iInsA As Long, ByVal iInsB As Integer, ByRef cnt As Integer, ByRef intArrayA() As Integer, ByRef intArrayB() As Integer) As Integer
On Error GoTo fout
insIntPair = -1
Dim insPos As Integer
insPos = cnt
Dim done As Boolean
done = (insPos = 0)
While (Not done)
  If (intArrayA(insPos - 1) > iInsA) Then
    done = False
  ElseIf (intArrayA(insPos - 1) = iInsA) And (intArrayB(insPos - 1) > iInsB) Then
    done = False
  Else
    done = True
  End If
  
  If (Not done) Then
    intArrayA(insPos) = intArrayA(insPos - 1)
    intArrayB(insPos) = intArrayB(insPos - 1)
    insPos = insPos - 1
  End If
    
  If (insPos = 0) Then
    done = True
  End If
Wend

intArrayA(insPos) = iInsA
intArrayB(insPos) = iInsB
cnt = cnt + 1

insIntPair = insPos

Exit Function
fout:
MsgBox Err & " " & Error$, 16

End Function

Public Function bSearchIntPair(ByVal iToFindA As Integer, ByVal iToFindB As Integer, ByRef intArrayA() As Integer, ByRef intArrayB() As Integer, ByRef nIntPairs As Integer) As Integer
On Error GoTo fout
bSearchIntPair = -1

'need to perform binary search on (wednrToFind, progToFind) pair.
Dim l As Integer, r As Integer, m As Integer
l = 0
r = nIntPairs
While (r > l)
 m = (l + r) \ 2
 
 Dim comp As Integer
 If (iToFindA < intArrayA(m)) Then
   comp = -1
 ElseIf (iToFindA = intArrayA(m)) Then
   If (iToFindB < intArrayB(m)) Then
     comp = -1
   ElseIf (iToFindB > intArrayB(m)) Then
     comp = 1
   Else 'equal
     comp = 0
   End If
 Else
   comp = 1
 End If
 
 If (comp < 0) Then
   r = m
 ElseIf (comp > 0) Then
   l = m + 1
 Else
   bSearchIntPair = m
   Exit Function
 End If
Wend





Exit Function
fout:
MsgBox Err & " bSearchIntPair" & vbCrLf & Error$, 16
End Function









Public Function extractToken(ByRef s As String, ByVal sep As String) As String
On Error Resume Next
Dim PS  As Integer
PS = InStr(1, s, sep)
If PS = 0 Then
  extractToken = s
  s = ""
  Exit Function
End If
extractToken = Left(s, PS - 1)
s = Right(s, Len(s) - PS + 1 - Len(sep))
End Function

'find the next token in a sequence split by the string sep, where each token is started and finished by dlmChar.
'The string sep may appear in the token; it is only treated as an actual separator if it is outside a dlmChar pair.
'For example: the string     "abcd;efgh";"bla";"bla" will be tokenized as  abcd;efgh / bla / bla,
'if sep = ; and dlmChar = "
Public Function extractTokenDelimited(ByRef s As String, ByVal sep As String, ByVal dlmChar As String) As String
On Error Resume Next


Dim lenS As Long
lenS = Len(s)

Dim posSep  As Long
posSep = InStr(1, s, sep)

If (posSep = 0) Then
  posSep = lenS + 1
End If

Dim posDlm As Long
posDlm = InStr(1, s, dlmChar)
If (posDlm = 0) Then
  posDlm = lenS + 1
End If

If (posDlm >= posSep) Then
  'the current token is unaffected by the deliminator.
  'just return the entire token
  If (posSep > lenS) Then
    extractTokenDelimited = s
    s = ""
  Else
    extractTokenDelimited = Left(s, posSep - 1)
    s = Right(s, Len(s) - posSep + 1 - Len(sep))
  End If
Else
  'find the next delimiter
  Dim posNextDlm As Integer
  posNextDlm = InStr(posDlm + 1, s, dlmChar)
  If (posNextDlm = 0) Then
    'ill formatted string
    extractTokenDelimited = Mid(s, posDlm + 1, lenS)
    s = ""
  Else
    extractTokenDelimited = Mid(s, posDlm + 1, posNextDlm - posDlm - 1)
    
    'Need to calculate  a new position for the separator token,
    'since it may have been inside the delimiters.
    
    posSep = InStr(posNextDlm + 1, s, sep)
    If (posSep = 0) Then
      s = ""
    Else
      s = Right(s, Len(s) - posSep + 1 - Len(sep))
    End If
    
  End If
End If

End Function




Public Function boolToString(b As Boolean) As String
On Error Resume Next
boolToString = "FALSE"
If (b) Then
  boolToString = "TRUE"
End If

End Function

Public Sub setBackground(frm As Form)
On Error Resume Next

Dim blClear As Boolean
blClear = db_grijs()


If (blClear) Then
  Dim clGray As Long
  clGray = -2147483633
  frm.Section(acHeader).BackColor = clGray
  frm.Section(acDetail).BackColor = clGray
  frm.Section(acFooter).BackColor = clGray
End If


Exit Sub
fout:
MsgBox Err & " " & Error$, 16
Exit Sub
End Sub


Public Function downloadFile(URL As String) As String
On Error GoTo fout

On Error Resume Next
  Dim lRetVal As Long
  lRetVal = DeleteUrlCacheEntry(URL)
  
On Error GoTo fout


  downloadFile = ""
  Dim szFileName As String
  szFileName = Space$(300)
  If URLDownloadToCacheFile(0, URL, szFileName, Len(szFileName), 0, 0) = 0 Then
    downloadFile = Trim(szFileName)
    If (Asc(Right(downloadFile, 1)) = 0) Then
      downloadFile = Left(downloadFile, Len(downloadFile) - 1)
    End If
  End If
Exit Function
fout:
MsgBox Err & " downloadFile()" & vbCrLf & Error$, 16
Exit Function
End Function



Public Sub queueInit(ByRef q() As Long, ByRef qHead As Integer, ByRef qTail As Integer, ByVal qCapacity As Integer)
On Error GoTo fout

qHead = 0
qTail = 0

Exit Sub
fout:
MsgBox Err & " queueInit" & vbCrLf & Error$, 16
Exit Sub
End Sub
Public Sub queueEnqueue(ByVal l As Long, ByRef q() As Long, ByRef qHead As Integer, ByRef qTail As Integer, ByVal qCapacity As Integer)
On Error GoTo fout

q(qTail) = l

qTail = qTail + 1
If (qTail = qCapacity) Then
  qTail = 0
End If

Exit Sub
fout:
MsgBox Err & " queueEnqueue" & vbCrLf & Error$, 16
Exit Sub
End Sub
Public Function queueDequeue(ByRef q() As Long, ByRef qHead As Integer, ByRef qTail As Integer, ByVal qCapacity As Integer) As Long
On Error GoTo fout

queueDequeue = q(qHead)

qHead = qHead + 1
If (qHead = qCapacity) Then
  qHead = 0
End If

Exit Function
fout:
MsgBox Err & " queueDequeue" & vbCrLf & Error$, 16
Exit Function
End Function
Public Function queueEmpty(ByRef q() As Long, ByRef qHead As Integer, ByRef qTail As Integer, ByVal qCapacity As Integer) As Boolean
On Error GoTo fout

queueEmpty = (qHead = qTail)

Exit Function
fout:
MsgBox Err & " queueEmpty" & vbCrLf & Error$, 16
Exit Function
End Function





Public Function calcMD5Hash_string(strMessage As String) As String

Dim abMessage() As Byte
Dim mLen As Long

mLen = 0
If Len(strMessage) > 0 Then
  abMessage = StrConv(strMessage, vbFromUnicode)
  mLen = UBound(abMessage) - LBound(abMessage) + 1
End If
calcMD5Hash_string = calcMD5Hash_perform(abMessage, mLen)

End Function

Public Function calcMD5Hash_byte(abMessage() As Byte, mLen As Long) As String
calcMD5Hash_byte = calcMD5Hash_perform(abMessage, mLen)
End Function

Private Function calcMD5Hash_perform(abMessage() As Byte, mLen As Long) As String

Dim nBlks As Long
Dim nBits As Long
Dim block(HASH_MD5_BLK_LEN - 1) As Byte
Dim state(3) As Long
Dim wb(3) As Byte
Dim sHex As String
Dim idx As Long
Dim partLen As Long
Dim i As Long
Dim j As Long

' Catch length too big for VB arithmetic (268 million!)
If mLen >= &HFFFFFFF Then Error 6     ' overflow

' Initialise
' Number of complete 512-bit/64-byte blocks to process
nBlks = mLen \ HASH_MD5_BLK_LEN

' Load magic initialization constants
state(0) = &H67452301
state(1) = &HEFCDAB89
state(2) = &H98BADCFE
state(3) = &H10325476

' Main loop for each complete input block of 64 bytes
idx = 0
For i = 0 To nBlks - 1
  calcMD5Hash_perform_transform state, abMessage, idx
  idx = idx + HASH_MD5_BLK_LEN
Next

' Construct final block(s) with padding
partLen = mLen Mod HASH_MD5_BLK_LEN
idx = nBlks * HASH_MD5_BLK_LEN
For i = 0 To partLen - 1
  block(i) = abMessage(idx + i)
Next
block(partLen) = &H80
' Make sure padding (and bit-length) set to zero
For i = partLen + 1 To HASH_MD5_BLK_LEN - 1
  block(i) = 0
Next
' Two cases: partLen is < or >= 56
If partLen >= HASH_MD5_BLK_LEN - 8 Then
    ' Need two blocks
  calcMD5Hash_perform_transform state, block, 0
  For i = 0 To HASH_MD5_BLK_LEN - 1
    block(i) = 0
  Next
End If
' Append number of bits in little-endian order
nBits = mLen * 8
block(HASH_MD5_BLK_LEN - 8) = nBits And &HFF
block(HASH_MD5_BLK_LEN - 7) = nBits \ &H100 And &HFF
block(HASH_MD5_BLK_LEN - 6) = nBits \ &H10000 And &HFF
block(HASH_MD5_BLK_LEN - 5) = nBits \ &H1000000 And &HFF
' (NB we don't try to cope with number greater than 2^31)

' Final padded block with bit length
calcMD5Hash_perform_transform state, block, 0

' Decode 4 x 32-bit words into 16 bytes with LSB first each time
' and return result as a hex string
calcMD5Hash_perform = ""
For i = 0 To 3
  calcMD5Hash_perform_uwSplit state(i), wb(3), wb(2), wb(1), wb(0)
  For j = 0 To 3
    If wb(j) < 16 Then
      sHex = "0" & Hex(wb(j))
    Else
      sHex = Hex(wb(j))
    End If
    calcMD5Hash_perform = calcMD5Hash_perform & sHex
  Next j
Next i
    
End Function

Private Sub calcMD5Hash_perform_transform(state() As Long, buf() As Byte, ByVal idx As Long)
' Updates 4 x 32-bit values in state
' Input: the next 64 bytes in buf starting at offset index
' Assumes at least 64 bytes are present after offset index
    
Dim a As Long
Dim b As Long
Dim c As Long
Dim d As Long
Dim j As Integer
Dim x(15) As Long

a = state(0)
b = state(1)
c = state(2)
d = state(3)
' Decode the next 64 bytes into 16 words with LSB first
For j = 0 To 15
  x(j) = calcMD5Hash_perform_uwJoin(buf(idx + 3), buf(idx + 2), buf(idx + 1), buf(idx))
  idx = idx + 4
Next

' Round 1
a = calcMD5Hash_perform_FF(a, b, c, d, x(0), HASH_MD5_S11, &HD76AA478)   ' 1
d = calcMD5Hash_perform_FF(d, a, b, c, x(1), HASH_MD5_S12, &HE8C7B756)   ' 2
c = calcMD5Hash_perform_FF(c, d, a, b, x(2), HASH_MD5_S13, &H242070DB)   ' 3
b = calcMD5Hash_perform_FF(b, c, d, a, x(3), HASH_MD5_S14, &HC1BDCEEE)   ' 4
a = calcMD5Hash_perform_FF(a, b, c, d, x(4), HASH_MD5_S11, &HF57C0FAF)   ' 5
d = calcMD5Hash_perform_FF(d, a, b, c, x(5), HASH_MD5_S12, &H4787C62A)   ' 6
c = calcMD5Hash_perform_FF(c, d, a, b, x(6), HASH_MD5_S13, &HA8304613)   ' 7
b = calcMD5Hash_perform_FF(b, c, d, a, x(7), HASH_MD5_S14, &HFD469501)   ' 8
a = calcMD5Hash_perform_FF(a, b, c, d, x(8), HASH_MD5_S11, &H698098D8)   ' 9
d = calcMD5Hash_perform_FF(d, a, b, c, x(9), HASH_MD5_S12, &H8B44F7AF)   ' 10
c = calcMD5Hash_perform_FF(c, d, a, b, x(10), HASH_MD5_S13, &HFFFF5BB1)  ' 11
b = calcMD5Hash_perform_FF(b, c, d, a, x(11), HASH_MD5_S14, &H895CD7BE)  ' 12
a = calcMD5Hash_perform_FF(a, b, c, d, x(12), HASH_MD5_S11, &H6B901122)  ' 13
d = calcMD5Hash_perform_FF(d, a, b, c, x(13), HASH_MD5_S12, &HFD987193)  ' 14
c = calcMD5Hash_perform_FF(c, d, a, b, x(14), HASH_MD5_S13, &HA679438E)  ' 15
b = calcMD5Hash_perform_FF(b, c, d, a, x(15), HASH_MD5_S14, &H49B40821)  ' 16

' Round 2
a = calcMD5Hash_perform_GG(a, b, c, d, x(1), HASH_MD5_S21, &HF61E2562)   ' 17
d = calcMD5Hash_perform_GG(d, a, b, c, x(6), HASH_MD5_S22, &HC040B340)   ' 18
c = calcMD5Hash_perform_GG(c, d, a, b, x(11), HASH_MD5_S23, &H265E5A51)  ' 19
b = calcMD5Hash_perform_GG(b, c, d, a, x(0), HASH_MD5_S24, &HE9B6C7AA)   ' 20
a = calcMD5Hash_perform_GG(a, b, c, d, x(5), HASH_MD5_S21, &HD62F105D)   ' 21
d = calcMD5Hash_perform_GG(d, a, b, c, x(10), HASH_MD5_S22, &H2441453)   ' 22
c = calcMD5Hash_perform_GG(c, d, a, b, x(15), HASH_MD5_S23, &HD8A1E681)  ' 23
b = calcMD5Hash_perform_GG(b, c, d, a, x(4), HASH_MD5_S24, &HE7D3FBC8)   ' 24
a = calcMD5Hash_perform_GG(a, b, c, d, x(9), HASH_MD5_S21, &H21E1CDE6)   ' 25
d = calcMD5Hash_perform_GG(d, a, b, c, x(14), HASH_MD5_S22, &HC33707D6)  ' 26
c = calcMD5Hash_perform_GG(c, d, a, b, x(3), HASH_MD5_S23, &HF4D50D87)   ' 27
b = calcMD5Hash_perform_GG(b, c, d, a, x(8), HASH_MD5_S24, &H455A14ED)   ' 28
a = calcMD5Hash_perform_GG(a, b, c, d, x(13), HASH_MD5_S21, &HA9E3E905)  ' 29
d = calcMD5Hash_perform_GG(d, a, b, c, x(2), HASH_MD5_S22, &HFCEFA3F8)   ' 30
c = calcMD5Hash_perform_GG(c, d, a, b, x(7), HASH_MD5_S23, &H676F02D9)   ' 31
b = calcMD5Hash_perform_GG(b, c, d, a, x(12), HASH_MD5_S24, &H8D2A4C8A)  ' 32

' Round 3
a = calcMD5Hash_perform_HH(a, b, c, d, x(5), HASH_MD5_S31, &HFFFA3942)   ' 33
d = calcMD5Hash_perform_HH(d, a, b, c, x(8), HASH_MD5_S32, &H8771F681)   ' 34
c = calcMD5Hash_perform_HH(c, d, a, b, x(11), HASH_MD5_S33, &H6D9D6122)  ' 35
b = calcMD5Hash_perform_HH(b, c, d, a, x(14), HASH_MD5_S34, &HFDE5380C)  ' 36
a = calcMD5Hash_perform_HH(a, b, c, d, x(1), HASH_MD5_S31, &HA4BEEA44)   ' 37
d = calcMD5Hash_perform_HH(d, a, b, c, x(4), HASH_MD5_S32, &H4BDECFA9)   ' 38
c = calcMD5Hash_perform_HH(c, d, a, b, x(7), HASH_MD5_S33, &HF6BB4B60)   ' 39
b = calcMD5Hash_perform_HH(b, c, d, a, x(10), HASH_MD5_S34, &HBEBFBC70)  ' 40
a = calcMD5Hash_perform_HH(a, b, c, d, x(13), HASH_MD5_S31, &H289B7EC6)  ' 41
d = calcMD5Hash_perform_HH(d, a, b, c, x(0), HASH_MD5_S32, &HEAA127FA)   ' 42
c = calcMD5Hash_perform_HH(c, d, a, b, x(3), HASH_MD5_S33, &HD4EF3085)   ' 43
b = calcMD5Hash_perform_HH(b, c, d, a, x(6), HASH_MD5_S34, &H4881D05)    ' 44
a = calcMD5Hash_perform_HH(a, b, c, d, x(9), HASH_MD5_S31, &HD9D4D039)   ' 45
d = calcMD5Hash_perform_HH(d, a, b, c, x(12), HASH_MD5_S32, &HE6DB99E5)  ' 46
c = calcMD5Hash_perform_HH(c, d, a, b, x(15), HASH_MD5_S33, &H1FA27CF8)  ' 47
b = calcMD5Hash_perform_HH(b, c, d, a, x(2), HASH_MD5_S34, &HC4AC5665)   ' 48

' Round 4
a = calcMD5Hash_perform_II(a, b, c, d, x(0), HASH_MD5_S41, &HF4292244)   ' 49
d = calcMD5Hash_perform_II(d, a, b, c, x(7), HASH_MD5_S42, &H432AFF97)   ' 50
c = calcMD5Hash_perform_II(c, d, a, b, x(14), HASH_MD5_S43, &HAB9423A7)  ' 51
b = calcMD5Hash_perform_II(b, c, d, a, x(5), HASH_MD5_S44, &HFC93A039)   ' 52
a = calcMD5Hash_perform_II(a, b, c, d, x(12), HASH_MD5_S41, &H655B59C3)  ' 53
d = calcMD5Hash_perform_II(d, a, b, c, x(3), HASH_MD5_S42, &H8F0CCC92)   ' 54
c = calcMD5Hash_perform_II(c, d, a, b, x(10), HASH_MD5_S43, &HFFEFF47D)  ' 55
b = calcMD5Hash_perform_II(b, c, d, a, x(1), HASH_MD5_S44, &H85845DD1)   ' 56
a = calcMD5Hash_perform_II(a, b, c, d, x(8), HASH_MD5_S41, &H6FA87E4F)   ' 57
d = calcMD5Hash_perform_II(d, a, b, c, x(15), HASH_MD5_S42, &HFE2CE6E0)  ' 58
c = calcMD5Hash_perform_II(c, d, a, b, x(6), HASH_MD5_S43, &HA3014314)   ' 59
b = calcMD5Hash_perform_II(b, c, d, a, x(13), HASH_MD5_S44, &H4E0811A1)  ' 60
a = calcMD5Hash_perform_II(a, b, c, d, x(4), HASH_MD5_S41, &HF7537E82)   ' 61
d = calcMD5Hash_perform_II(d, a, b, c, x(11), HASH_MD5_S42, &HBD3AF235)  ' 62
c = calcMD5Hash_perform_II(c, d, a, b, x(2), HASH_MD5_S43, &H2AD7D2BB)   ' 63
b = calcMD5Hash_perform_II(b, c, d, a, x(9), HASH_MD5_S44, &HEB86D391)   ' 64

state(0) = calcMD5Hash_perform_uwAdd(state(0), a)
state(1) = calcMD5Hash_perform_uwAdd(state(1), b)
state(2) = calcMD5Hash_perform_uwAdd(state(2), c)
state(3) = calcMD5Hash_perform_uwAdd(state(3), d)

End Sub

' FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4

Private Function calcMD5Hash_perform_addRotAdd(f As Long, a As Long, b As Long, x As Long, s As Integer, ac As Long) As Long
Dim temp As Long
temp = calcMD5Hash_perform_uwAdd(a, f)
temp = calcMD5Hash_perform_uwAdd(temp, x)
temp = calcMD5Hash_perform_uwAdd(temp, ac)
temp = calcMD5Hash_perform_uwRol(temp, s)
calcMD5Hash_perform_addRotAdd = calcMD5Hash_perform_uwAdd(temp, b)
End Function

Private Function calcMD5Hash_perform_FF(a As Long, b As Long, c As Long, d As Long, x As Long, s As Integer, ac As Long) As Long
Dim t As Long
Dim t2 As Long

t = b And c
t2 = (Not b) And d
t = t Or t2
calcMD5Hash_perform_FF = calcMD5Hash_perform_addRotAdd(t, a, b, x, s, ac)
End Function

Private Function calcMD5Hash_perform_GG(a As Long, b As Long, c As Long, d As Long, x As Long, s As Integer, ac As Long) As Long
Dim t As Long
Dim t2 As Long
t = b And d
t2 = c And (Not d)
t = t Or t2
calcMD5Hash_perform_GG = calcMD5Hash_perform_addRotAdd(t, a, b, x, s, ac)
End Function

Private Function calcMD5Hash_perform_HH(a As Long, b As Long, c As Long, d As Long, x As Long, s As Integer, ac As Long) As Long
Dim t As Long
t = b Xor c Xor d
calcMD5Hash_perform_HH = calcMD5Hash_perform_addRotAdd(t, a, b, x, s, ac)
End Function

Private Function calcMD5Hash_perform_II(a As Long, b As Long, c As Long, d As Long, x As Long, s As Integer, ac As Long) As Long
Dim t As Long
t = b Or (Not d)
t = c Xor t
calcMD5Hash_perform_II = calcMD5Hash_perform_addRotAdd(t, a, b, x, s, ac)
End Function

Private Function calcMD5Hash_perform_uwRol(w As Long, s As Integer) As Long
' Return 32-bit word w rotated left by s bits
' avoiding problem with VB sign bit
Dim i As Integer
Dim t As Long

calcMD5Hash_perform_uwRol = w
For i = 1 To s
  t = calcMD5Hash_perform_uwRol And &H3FFFFFFF
  t = t * 2
  If (calcMD5Hash_perform_uwRol And &H40000000) <> 0 Then
      t = t Or &H80000000
  End If
  If (calcMD5Hash_perform_uwRol And &H80000000) <> 0 Then
      t = t Or &H1
  End If
  calcMD5Hash_perform_uwRol = t
Next
End Function

Private Function calcMD5Hash_perform_uwJoin(a As Byte, b As Byte, c As Byte, d As Byte) As Long
' Join 4 x 8-bit bytes into one 32-bit word a.b.c.d
    calcMD5Hash_perform_uwJoin = ((a And &H7F) * &H1000000) Or (b * &H10000) Or (CLng(c) * &H100) Or d
    If a And &H80 Then
        calcMD5Hash_perform_uwJoin = calcMD5Hash_perform_uwJoin Or &H80000000
    End If
End Function

Private Sub calcMD5Hash_perform_uwSplit(ByVal w As Long, a As Byte, b As Byte, c As Byte, d As Byte)
' Split 32-bit word w into 4 x 8-bit bytes
a = CByte(((w And &HFF000000) \ &H1000000) And &HFF)
b = CByte(((w And &HFF0000) \ &H10000) And &HFF)
c = CByte(((w And &HFF00) \ &H100) And &HFF)
d = CByte((w And &HFF) And &HFF)
End Sub

Private Function calcMD5Hash_perform_uwAdd(wordA As Long, wordB As Long) As Long
' Adds words A and B avoiding overflow
Dim myUnsigned As Double

myUnsigned = calcMD5Hash_perform_longToUnsigned(wordA) + calcMD5Hash_perform_longToUnsigned(wordB)
' Cope with overflow
If myUnsigned > HASH_MD5_OFFSET_4 Then
    myUnsigned = myUnsigned - HASH_MD5_OFFSET_4
End If
calcMD5Hash_perform_uwAdd = calcMD5Hash_perform_unsignedToLong(myUnsigned)
    
End Function


Private Function calcMD5Hash_perform_unsignedToLong(value As Double) As Long
If value < 0 Or value >= HASH_MD5_OFFSET_4 Then
  Err.Raise 6, , "Overflow"
End If
If value <= HASH_MD5_MAXINT_4 Then
  calcMD5Hash_perform_unsignedToLong = value
Else
  calcMD5Hash_perform_unsignedToLong = value - HASH_MD5_OFFSET_4
End If
End Function

Private Function calcMD5Hash_perform_longToUnsigned(value As Long) As Double
If value < 0 Then
  calcMD5Hash_perform_longToUnsigned = value + HASH_MD5_OFFSET_4
Else
  calcMD5Hash_perform_longToUnsigned = value
End If
End Function