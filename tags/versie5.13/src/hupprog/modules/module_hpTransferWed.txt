Option Compare Database
Option Explicit

Type LNH_TRANSFER_DATA
  blDummy As Boolean
End Type


'to become obsolete
Private Function lnhExportDetWedSettings(ByVal singleWedOnly As Boolean, ByRef actSingleWedOnly As Boolean, wednr As Long, ByRef actWedNr As Long) As Boolean
On Error GoTo fout
lnhExportDetWedSettings = False

actSingleWedOnly = True
actWedNr = wednr

If Not singleWedOnly Then
  Dim wed As Recordset
  Set wed = CurrentDb().OpenRecordset("dtWedstrijdGegevens")
  wed.Index = "PrimaryKey"
  wed.Seek "=", wednr
  
  Dim mainWednr As Long
  mainWednr = Nz(wed("WE_MainWedstrijdNummer"))
  Dim isMeet As Boolean
  isMeet = Nz(wed("WE_IsPartOfMeet"))
  If (mainWednr > 0 And isMeet) Then
    actSingleWedOnly = False
    actWedNr = mainWednr
  End If
  
  appCleanRS wed
  
End If

lnhExportDetWedSettings = True
Exit Function
fout:
MsgBox Err & " " & Error$, 16

Exit Function

'debug
On Error GoTo 0
Resume
Exit Function

End Function



Private Function lnhExportWedContact(ByVal lCntID As Long) As Boolean
On Error GoTo fout
lnhExportWedContact = False

Dim outp As Recordset
Set outp = CurrentDb().OpenRecordset("gIMP_LEN_contact")

outp.AddNew
  outp("CT_ID") = lCntID
  outp("CT_Adres") = hzn(cont_adres())
  outp("CT_Email") = hzn(cont_email())
  outp("CT_Naam") = hzn(contpersoon())
  outp("CT_Plaats") = hzn(cont_plaats())
  outp("CT_Postcode") = hzn(cont_postcode_sep())
  outp("CT_Telefoonnummer") = hzn(cont_tel())
outp.Update

appCleanRS outp


lnhExportWedContact = True
Exit Function
fout:
MsgBox Err & " lnhExportWedContact" & vbCrLf & Error$, 16
Exit Function
End Function



Private Function lnhExportWedstrijdGegevens(ByVal singleWedOnly As Boolean, ByRef wedInf As WED_BASIC_INFO, ByRef muCntID As Long) As Boolean
On Error GoTo fout
lnhExportWedstrijdGegevens = False

Dim inp As Recordset
Dim sql As String

If (singleWedOnly) Then
  sql = "SELECT * from dtWedstrijdGegevens where [WE_wedstrijdnummer] = " & wedInf.wednr & ";"
Else
  sql = "SELECT * from dtWedstrijdGegevens where [WE_wedstrijdnummer] = " & wedInf.meetMainNr & " or [we_MainWedstrijdNummer] = " & wedInf.meetMainNr & ";"
End If


Set inp = CurrentDb().OpenRecordset(sql)

Dim outp As Recordset
Set outp = CurrentDb().OpenRecordset("gIMP_LEN_Wedstrijden")

inp.MoveFirst
Do Until inp.EOF
  outp.AddNew
    outp("WE_ID") = inp("WE_Wedstrijdnummer")
    outp("WE_Datum") = inp("WE_Datum")
    outp("WE_Plaats") = inp("WE_Plaats")
    
    
    If (Not singleWedOnly) And (wedInf.isMeet) Then
      outp("WE_Beschrijving") = hzn(wedInf.meetDes)
    Else
      outp("WE_Beschrijving") = inp("WE_Beschrijving")
    End If
    
    outp("WE_Beschrijving_Extra") = inp("WE_Beschrijving")
    
    
    outp("WE_Baanlengte") = inp("WE_Baanlengte")
    
    
    outp("WE_Zwembad") = inp("WE_Zwembad")
    outp("WE_Adres") = inp("WE_Adres")
    outp("WE_Aanvang") = inp("WE_Aanvang")
    outp("WE_Inzwemmen") = inp("WE_Inzwemmen")
    outp("WE_AanvangJuryVergadering") = inp("WE_AanvangJuryVergadering")
    outp("WE_BulkKostenVer") = inp("WE_BulkKostenVer")
    outp("WE_BulkKostenZwemmer") = inp("WE_BulkKostenZwemmer")
    
       
    If Not Nz(inp("WE_ApartKosten"), False) Then
      If (Nz(inp("WE_kosten1_spec")) = 2) Then
        outp("WE_KostenRelay") = inp("WE_Kosten_Estaf")
      End If
    End If
   
    outp("WE_Kosten_Currency") = inp("WE_Kosten_Currency")
    outp("WE_Organiserende_Vereniging") = inp("WE_Organ ver")
    
    
    
    'These settings are controlled at a meet-level
    outp("WE_Leeftijdsbepaling") = hzn(wedInf.lftBep)
    outp("WE_Leeftijdsdatum") = wedInf.ageDate
    
    outp("WE_QLF_CONVERSION") = hzn(wedInf.qlfConvMode)
       
    outp("WE_QLF_FROM") = Null
    outp("WE_QLF_UNTIL") = Null
    
    If lenDateIsValid(wedInf.qlfMinDate) Then
      outp("WE_QLF_From") = wedInf.qlfMinDate
    End If
    
    If (lenDateIsValid(wedInf.qlfMaxDate)) Then
       outp("WE_QLF_UNTIL") = wedInf.qlfMaxDate
    End If
    
    outp("WE_QLF_RelayMode") = hzn(wedInf.qlfRelayMode)
    
    'end meet-level settings
    
    outp("WE_ElektronischeTijd") = inp("WE_elektronisch")
    outp("WE_AantalBanen") = inp("WE_Aantal_Banen")
    outp("WE_EersteBaan") = inp("WE_Eerste_Baan")
    outp("WE_Nation") = "NED"
    
    outp("WE_Contact_ID") = Null
    
    If (contpersoon() <> "") Then
      muCntID = muCntID + 1
      If Not lnhExportWedContact(muCntID) Then
        Exit Function
      End If
      outp("WE_Contact_ID") = muCntID
    End If
    
    outp("WE_PartOfTimeArchive") = False
    
  outp.Update


  inp.MoveNext
Loop


appCleanRS inp
appCleanRS outp


lnhExportWedstrijdGegevens = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " " & Error$, 16
Exit Function
End Function

Private Function lnhExportProgramma(wedBn As Integer, wedQlfConvMode As String, ByRef lastUsedLimID As Long, ByRef lastUsedRecID As Long, ByRef outpLims As Recordset, ByRef outpRecs As Recordset, ByVal expLims As Boolean, ByVal expRecs As Boolean) As Boolean
On Error GoTo fout
lnhExportProgramma = False



Dim inp As Recordset
Dim sql As String
sql = "SELECT dtProgramma.* " & _
  "FROM gIMP_LEN_Wedstrijden INNER JOIN [dtProgramma] ON gIMP_LEN_Wedstrijden.WE_ID = [dtProgramma].PR_Wedstrijdnummer; "
Set inp = CurrentDb().OpenRecordset(sql)

Dim outp As Recordset
Set outp = CurrentDb().OpenRecordset("gIMP_LEN_Programma")

Dim prID As Long
prID = 1

inp.MoveFirst
Do Until inp.EOF
  'Do not export rankings.
  If (Nz(inp("PR_TYPE")) <> PROG_TYPE_RANKING) And (Nz(inp("PR_TYPE")) <> PROG_TYPE_PUNT) Then

    outp.AddNew
    
    outp("PR_ID") = prID
    outp("PR_WED_ID") = inp("PR_wedstrijdnummer")
    outp("PR_Programmanummer") = inp("PR_programmanummer")
    outp("PR_Programmanummer_Fixed") = True
    outp("PR_Afstand") = inp("PR_Afstand")
    outp("PR_Slag") = inp("PR_Slag")
    outp("PR_Opmerking") = inp("PR_OPmerking")
    
    'febr 2007.
    Dim prAfstand As String
    Dim prSlag As String
    prAfstand = Nz(inp("PR_Afstand"))
    prSlag = Nz(inp("PR_Slag"))
    
    
    
    
    Dim catInf As CAT_INFO
    If Not lenReadCatInfo(inp, "PR_", False, catInf, "Beschrijving categorie", "Res_Marge", "Vervangende TIJD") Then Exit Function
    If Not lenWriteCatInfo(outp, "PR_", False, catInf) Then Exit Function
    
    'feb 2007
    If Not lenExtractLimsRecsFromCatInfo(wedBn, wedQlfConvMode, prAfstand, prSlag, catInf, lastUsedRecID, lastUsedLimID, outpRecs, outpLims, expLims, expRecs) Then
      Exit Function
    End If
    
    outp("PR_KOsten") = inp("PR_KOsten")
    outp("PR_TYPE") = inp("PR_TYPE")
    outp("AUX_Vorig_Prog") = inp("PR_Vorig_programmanummer")
    outp("PR_VORIG_PROG_ID") = Null
    
    outp("INT_Vorig_Prog_LEN_ID") = Null
    
    outp("PR_BeschrijvingAfwijkend") = inp("PR_Beschrijving_afwijkend")
    outp("PR_aanvang") = inp("PR_Aanvangstijd")
    
    outp("EXP_LEN_ID") = inp("INT_LEN_ID")
    outp("EXP_LEN_NR_ID") = inp("INT_LEN_NR_ID")
    
    'toegevoegd febr 2007
    outp("PR_AantMeetel") = inp("PR_AantMeetel")
    outp("PR_BM") = inp("PR_BM")
    
    
    
    
    
    outp.Update
    
    prID = prID + 1
  End If
  
  inp.MoveNext
Loop

'still have to update PR_VORIG_PROG_ID
'This is moved to lenexTransfer.lenApplyAuxCorrections


appCleanRS inp
appCleanRS outp



lnhExportProgramma = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " " & Error$, 16
Exit Function
End Function

Private Function lnhExportLeeftijdsGroepen(wedBn As Integer, wedQlfConvMode As String, ByRef lastUsedLimID As Long, ByRef lastUsedRecID As Long, ByRef outpLims As Recordset, ByRef outpRecs As Recordset, ByVal expLims As Boolean, ByVal expRecs As Boolean) As Boolean
On Error GoTo fout
lnhExportLeeftijdsGroepen = False

Dim inp As Recordset
Dim sql As String

sql = "SELECT gIMP_LEN_Programma.PR_ID, gIMP_LEN_Programma.PR_Afstand, gIMP_LEN_Programma.PR_Slag,dtProgrammaLeeftijdsgroepen.* " & _
   "FROM dtProgrammaLeeftijdsgroepen INNER JOIN gIMP_LEN_Programma ON (dtProgrammaLeeftijdsgroepen.PRL_Programmanummer = gIMP_LEN_Programma.PR_Programmanummer) AND (dtProgrammaLeeftijdsgroepen.PRL_Wedstrijdnummer = gIMP_LEN_Programma.PR_WED_ID); "
   



Set inp = CurrentDb().OpenRecordset(sql)

Dim outp As Recordset
Set outp = CurrentDb().OpenRecordset("gIMP_LEN_Leeftijdsgroepen")

Dim lfID As Long
lfID = 1

inp.MoveFirst
Do Until inp.EOF
  outp.AddNew
  outp("LF_ID") = lfID
  outp("LF_PR_ID") = inp("PR_ID")
  
  'febr 2007.
    Dim prAfstand As String
    Dim prSlag As String
    prAfstand = Nz(inp("PR_Afstand"))
    prSlag = Nz(inp("PR_Slag"))
  
  
  Dim catInf As CAT_INFO
  If Not lenReadCatInfo(inp, "PRL_", True, catInf, "Beschrijving categorie", "RES_Marge", "Vervangende_tijd") Then Exit Function
  
  If Not lenWriteCatInfo(outp, "LF_", True, catInf) Then Exit Function
  
      'feb 2007
    If Not lenExtractLimsRecsFromCatInfo(wedBn, wedQlfConvMode, prAfstand, prSlag, catInf, lastUsedRecID, lastUsedLimID, outpRecs, outpLims, expLims, expRecs) Then
      Exit Function
    End If
  
  
  outp.Update

  lfID = lfID + 1
  inp.MoveNext
Loop


appCleanRS outp
appCleanRS inp


lnhExportLeeftijdsGroepen = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " " & Error$, 16
Exit Function
End Function

Private Function lnhExportVer() As Boolean
On Error GoTo fout
lnhExportVer = False

Dim outp As Recordset
Set outp = CurrentDb().OpenRecordset("gIMP_LEN_VER")

Dim inp As Recordset
Dim sql As String
sql = "SELECT [gFaktuurVer].*, [dtVerenigingen].* " & _
   "FROM [gFaktuurVer] LEFT JOIN [dtVerenigingen] ON [gFaktuurVer].AV_Naam = [dtVerenigingen].V_NAAM; "

Set inp = CurrentDb().OpenRecordset(sql)


Dim verID As Long
verID = 1

inp.MoveFirst
Do Until inp.EOF

outp.AddNew
outp("V_ID") = verID
outp("V_Naam") = inp("AV_Naam")
outp("V_LangNaam") = inp("AV_Naam")

Dim tpDepot As String
tpDepot = Nz(inp("AV_Depot"))

outp("V_Depot") = hzn(tpDepot)

Dim blDepotGenerated As Boolean
blDepotGenerated = Nz(inp("V_DepotGenerated"), False)

If Not blDepotGenerated Then
  outp("V_Region") = hzn(verGetRegion(tpDepot))
End If

outp("V_Depot_Fixed") = Not blDepotGenerated


outp("V_Plaats") = inp("V_Plaats")

outp("V_Extern_Code") = inp("V_ExternalCode")

Dim nation As String
nation = Nz(inp("V_Nation"))

If nation = "" Then nation = "NED"

outp("V_Land") = hzn(nation)
outp("V_LEN_TYPE") = Null
outp("V_Contact_ID") = Null
outp("V_PartOfRecord") = False
outp("V_PartOfTimeArchive") = False

outp.Update

  verID = verID + 1

  inp.MoveNext
Loop

appCleanRS outp
appCleanRS inp


lnhExportVer = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " " & Error$, 16
Exit Function
End Function


Private Function lnhExportZwemmers() As Boolean
On Error GoTo fout
lnhExportZwemmers = False

'dit zijn alle zwemmers, inclusief estafette zwemmers...

Dim sql As String
sql = "SELECT AS_DEPOT, [gFaktuurHoofd].AS_Vereniging, [gFaktuurHoofd].AS_Startnummer, dtNamen.* " & _
      "FROM [gFaktuurHoofd] LEFT JOIN dtNamen ON ([gFaktuurHoofd].AS_Startnummer = dtNamen.NA_Startnummer) AND ([gFaktuurHoofd].AS_Vereniging = dtNamen.NA_Vereniging); "


Dim inp As Recordset
Set inp = CurrentDb().OpenRecordset(sql)

Dim outp As Recordset
Set outp = CurrentDb().OpenRecordset("gIMP_LEN_Zwemmers")


Dim zwID As Long
zwID = 1

inp.MoveFirst
Do Until inp.EOF
  outp.AddNew
  
    outp("ZW_ID") = zwID
    outp("ZW_Ver_ID") = Null
    
    Dim nm As String
    nm = inp("NA_Naam")
    Dim vn As String, vg As String, an As String
    vn = Nz(inp("NA_Voornaam"))
    vg = Trim(Nz(inp("NA_Voegsel")))
    an = Nz(inp("NA_Achternaam"))
    
    
    
    outp("ZW_Voornaam") = hzn(IIf(an = "", nmExtractVoornaam(nm), vn))
    outp("ZW_Voegsel") = hzn(IIf(an = "", Trim(nmExtractVoegsel(nm)), vg))
    outp("ZW_Achternaam") = hzn(IIf(an = "", nmExtractAchternaam(nm), an))
    
    Dim ges As String
    ges = Nz(inp("NA_Geslacht"))
    If (ges = "*" Or ges = "") Then ges = "M"
    
    outp("ZW_Geslacht") = hzn(ges)
    outp("ZW_Jaartal") = CLng(val(Left(stnrExpand(Nz(inp("NA_Startnummer"))), 4)))
    outp("ZW_Geboortedatum") = inp("NA_Geboortedatum")
    outp("ZW_Startnummer") = inp("AS_Startnummer")
    
    outp("ZW_ExternalLicenseCode") = inp("NA_ExternalCode")
    
    
    outp("ZW_Startnummer_Fixed") = Not Nz(inp("NA_StartnummerGenerated"))
    
    Dim nation As String
    nation = Nz(inp("NA_NATION"))
    If nation = "" Then nation = "NED"
    outp("ZW_Nation") = hzn(nation)
    outp("ZW_PartOfRecord") = False
    outp("ZW_PartOfTimeArchive") = False
    
    outp("AUX_Depotnummer") = inp("AS_Depot")
    
    
  outp.Update
  
  zwID = zwID + 1
  inp.MoveNext
Loop


appCleanRS outp
appCleanRS inp


lnhExportZwemmers = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " " & Error$, 16

Exit Function

'debug
On Error GoTo 0
Resume

Exit Function
End Function





Private Function lnhAddPloegLid(ByRef pll As Recordset, ByVal verID As Long, ByVal pllID As Long, ByVal plID As Long, ByVal stnr As String, ByVal depNr As String, ByVal volg As Integer, ByVal isRes As Boolean, ByVal tdID As Long, ByVal dlnID As Long, ByVal recID As Long, ByVal qlfTime As Double, ByVal qlfDate As Date, ByVal qlfPlaats As String, ByVal qlfBaan As Integer, ByVal qlfWedDes As String, ByVal pllDis As String) As Boolean
On Error GoTo fout
lnhAddPloegLid = False



pll.AddNew
    pll("PLL_ID") = pllID
    pll("PLL_Deelnemer_ID") = Null
    pll("PLL_Record_ID") = Null
    pll("PLL_Tijd_ID") = Null
    pll("PLL_TMA_TIJD_ID") = Null
    
    If (dlnID <> -1) Then
      pll("PLL_Deelnemer_ID") = dlnID
    End If
    If (tdID <> -1) Then
      pll("PLL_TIJD_ID") = tdID
    End If
    
    If recID <> -1 Then
      pll("PLL_Record_ID") = recID
    End If
    
    
    pll("PLL_Ploeg_ID") = plID
    pll("AUX_Startnummer") = stnr
    pll("AUX_INT_VER_ID") = verID
    pll("AUX_Depotnummer") = depNr
    pll("PLL_Volgorde") = IIf(isRes, -1, volg)
    pll("PLL_Reserve") = isRes
    
    
    If (swtIsValid(qlfTime)) Then
      pll("PLL_QLF_Tijd") = qlfTime
      If (lenDateIsValid(qlfDate)) Then
        pll("PLL_QLF_Datum") = qlfDate
        pll("PLL_QLF_Plaats") = hzn(qlfPlaats)
        If (qlfBaan = 25) Or (qlfBaan = 50) Then
          pll("PLL_QLF_Baan") = qlfBaan
        End If
        pll("PLL_QLF_WedDescription") = hzn(qlfWedDes)
      End If
    End If
    
    pll("PLL_Dis") = hzn(pllDis)
    
    
pll.Update

lnhAddPloegLid = True
Exit Function
fout:
MsgBox Err & " " & Error$, 16
Exit Function

End Function




Private Function lnhAppendTijd(ByRef inp As Recordset, ByRef outpTd As Recordset, ByVal tdID As Long, ByVal isEstaf As Boolean, ByVal prID As Long, ByVal plID As Long, ByVal zwID As Long, ByVal verID As Long, ByVal depNr As String) As Boolean
On Error GoTo fout
lnhAppendTijd = False

outpTd.AddNew

outpTd("TY_ID") = tdID

If (prID >= 0) Then
  outpTd("TY_Prog_ID") = prID
Else
  outpTd("AUX_Programmanummer") = inp("TY_Programmanummer")
  outpTd("AUX_Wedstrijdnummer") = inp("TY_Wedstrijdnummer")
End If

If (verID >= 0) Then
  outpTd("TY_Ver_ID") = verID
Else
  outpTd("AUX_Depotnummer") = depNr
End If
      outpTd("TY_IsEstaf") = isEstaf
      
      If (isEstaf) Then
        outpTd("TY_Zwemmer_ID") = Null
        If (plID >= 0) Then
          outpTd("TY_Ploeg_ID") = plID
        Else
          outpTd("AUX_Depotnummer") = hzn(depNr)
          outpTd("AUX_Estafettenummer") = inp("TY_Estafettenummer")
        End If
        
                
      Else
        outpTd("TY_Ploeg_ID") = Null
        If (zwID >= 0) Then
          outpTd("TY_Zwemmer_ID") = zwID
        Else
          outpTd("AUX_Depotnummer") = hzn(depNr)
          outpTd("AUX_Startnummer") = inp("TY_Startnummer")
        End If
      End If
      
      outpTd("TY_Eindtijd") = inp("TY_Eindtijd")
      outpTd("TY_ExtraTussentijden") = inp("TY_ExtraTussentijden")
      outpTd("TY_DIS") = inp("TY_DIS")
      outpTd("TY_AB") = inp("TY_AB")
      
      outpTd("TY_BM") = Nz(inp("TY_BM")) = "J"
      
      
      outpTd("TY_eindplaats") = inp("TY_echteplaats")
      'outpTd("TY_Opm") = inp("TY_Opm")
      outpTd("TY_afstand1") = inp("TY_Afstand1")
      outpTd("TY_afstand2") = inp("TY_Afstand2")
      outpTd("TY_Afstand3") = inp("TY_Afstand3")
      outpTd("TY_Afstand4") = inp("TY_Afstand4")
      outpTd("TY_Tijd1") = inp("TY_Tijd1")
      outpTd("TY_Tijd2") = inp("TY_Tijd2")
      outpTd("TY_Tijd3") = inp("TY_Tijd3")
      outpTd("TY_Tijd4") = inp("TY_Tijd4")
      outpTd("TY_Eindafstand") = inp("TY_Eindafstand")
      
      'toevoeging nov 2006
      outpTd("TY_Agegroup_ID") = Null
      outpTd("INT_AGEGROUP_LEN_ID") = Null
      
      'toevoeging jan 2009
      outpTd("AUX_Categorie") = inp("TY_Categorie")
      
      outpTd("TY_Serienummer") = inp("DE_Serienummer")
      outpTd("TY_Baan") = inp("DE_Baan")
      
      
outpTd.Update
      

lnhAppendTijd = True
Exit Function
fout:
'debug
MsgBox Err & " " & Error$, 16

Exit Function

On Error GoTo 0
Resume

Exit Function
End Function



Private Function lnhExportPloegen(ByRef maxUsedDlnID As Long, ByRef maxUsedTijdID As Long, expDlns As Boolean, expTd As Boolean) As Boolean
On Error GoTo fout
lnhExportPloegen = False

Dim sql As String
     
'sql = "SELECT [dtVerenigingen].V_DEPOT, Ploegen.*, Deelnemers.*, Tijden.*, PR_ID, pr_categorie as PROGCAT " & _
'      "FROM (((Deelnemers INNER JOIN gIMP_LEN_Programma ON (Deelnemers.DE_Programmanummer = gIMP_LEN_Programma.PR_Programmanummer) AND (Deelnemers.DE_Wedstrijdnummer = gIMP_LEN_Programma.PR_WED_ID)) INNER JOIN [dtVerenigingen] ON Deelnemers.DE_Vereniging = [dtVerenigingen].V_NAAM) LEFT JOIN Ploegen ON (Deelnemers.DE_Estafettenummer = Ploegen.PL_Estafettenummer) AND (Deelnemers.DE_Vereniging = Ploegen.PL_Vereniging) AND (Deelnemers.DE_Programmanummer = Ploegen.PL_Programmanummer) AND (Deelnemers.DE_Wedstrijdnummer = Ploegen.PL_Wedstrijdnummer)) LEFT JOIN Tijden ON (Deelnemers.DE_Vereniging = Tijden.TY_Vereniging) AND (Deelnemers.DE_Estafettenummer = Tijden.TY_Estafettenummer) AND (Deelnemers.DE_Programmanummer = Tijden.TY_Programmanummer) AND (Deelnemers.DE_Wedstrijdnummer = Tijden.TY_Wedstrijdnummer) " & _
'      "WHERE (((gIMP_LEN_Programma.PR_Afstand) Like ""*x*""));"

sql = "SELECT [dtVerenigingen].V_DEPOT, dtPloegen.*, dtDeelnemers.*, dtTijden.*, gIMP_LEN_Programma.PR_ID, " & _
"gIMP_LEN_Programma.PR_Categorie AS PROGCAT, [~AN_Estafs].EST_ProgCategorie " & _
"FROM ((((dtDeelnemers INNER JOIN gIMP_LEN_Programma ON (dtDeelnemers.DE_Wedstrijdnummer = " & _
"gIMP_LEN_Programma.PR_WED_ID) AND (dtDeelnemers.DE_Programmanummer = gIMP_LEN_Programma.PR_Programmanummer)) " & _
"INNER JOIN [dtVerenigingen] ON dtDeelnemers.DE_Vereniging = [dtVerenigingen].V_NAAM) " & _
"LEFT JOIN dtTijden ON (dtDeelnemers.DE_Estafettenummer = dtTijden.TY_Estafettenummer) " & _
"AND (dtDeelnemers.DE_Programmanummer = dtTijden.TY_Programmanummer) AND (dtDeelnemers.DE_Wedstrijdnummer = " & _
"dtTijden.TY_Wedstrijdnummer) AND (dtDeelnemers.DE_Vereniging = dtTijden.TY_Vereniging)) LEFT JOIN dtPloegen " & _
"ON (dtDeelnemers.DE_Estafettenummer = dtPloegen.PL_Estafettenummer) AND (dtDeelnemers.DE_Vereniging = " & _
"dtPloegen.PL_Vereniging) AND (dtDeelnemers.DE_Programmanummer = dtPloegen.PL_Programmanummer) AND " & _
"(dtDeelnemers.DE_Wedstrijdnummer = dtPloegen.PL_Wedstrijdnummer)) INNER JOIN [~AN_Estafs] ON (dtDeelnemers.DE_Estafettenummer = " & _
"[~AN_Estafs].EST_Estafettenummer) AND (dtDeelnemers.DE_Vereniging = [~AN_Estafs].EST_Vereniging) AND " & _
"(dtDeelnemers.DE_Programmanummer = [~AN_Estafs].EST_Programmanummer) AND (dtDeelnemers.DE_Wedstrijdnummer = " & _
"[~AN_Estafs].EST_Wedstrijdnummer) WHERE (((gIMP_LEN_Programma.PR_Afstand) Like ""*x*""));"


     

Dim inp As Recordset
Set inp = CurrentDb().OpenRecordset(sql)

Dim outp As Recordset
Set outp = CurrentDb().OpenRecordset("gIMP_LEN_Ploeg")

Dim outpPloegLeden As Recordset
Set outpPloegLeden = CurrentDb().OpenRecordset("gIMP_LEN_Ploegleden")

Dim outpDln As Recordset
Set outpDln = CurrentDb().OpenRecordset("gIMP_LEN_Deelnemers")

Dim outpTd As Recordset
Set outpTd = CurrentDb().OpenRecordset("gIMP_LEN_TIJDEN")


Dim plID As Long
plID = 1

Dim muPLLID As Long
muPLLID = 0

Dim dlnID As Long
Dim tijdID As Long


Dim curWedNr As Long
Dim curProg As String
Dim curEst As Long
Dim curVer As String
Dim curPloegID As Long
Dim curDlnID As Long
Dim curTdID As Long

Dim tpWedNr As Long
Dim tpProg As String
Dim tpEst As Long
Dim tpVer As String

curWedNr = -1
curProg = ""
curEst = -1
curVer = ""


inp.MoveFirst
Do Until inp.EOF

  tpWedNr = Nz(inp("DE_Wedstrijdnummer"))
  tpProg = Nz(inp("DE_Programmanummer"))
  tpEst = Nz(inp("DE_Estafettenummer"))
  tpVer = Nz(inp("DE_Vereniging"))
  
  If (tpWedNr <> curWedNr Or tpProg <> curProg Or tpEst <> curEst Or tpVer <> curVer) Then
    'write new ploeg
    curPloegID = plID
    curDlnID = -1
    curTdID = -1
    
        outp.AddNew
            outp("PL_ID") = plID
            outp("PL_VER_ID") = Null
            outp("PL_Geslacht") = m_of_v(Nz(inp("PROGCAT")))
            outp("PL_Naam") = tpVer & " " & tpEst
            outp("PL_Nummer") = tpEst
            outp("PL_PartOfRecord") = False
            outp("PL_PartOfTimeArchive") = False
            'feb 2007 modification.
            Dim estProgCat As String
            estProgCat = Nz(inp("EST_ProgCategorie"))
            If (estProgCat <> "") Then
              outp("PL_SatisfiedCategorie") = hzn(estProgCat)
            Else
              outp("PL_SatisfiedCategorie") = inp("PROGCAT")
            End If
            outp("Aux_Depotnummer") = Nz(inp("V_Depot"))
        outp.Update
    plID = plID + 1
    
    maxUsedDlnID = maxUsedDlnID + 1
    dlnID = maxUsedDlnID
    curDlnID = dlnID
  
  
    If (expDlns) Then
        outpDln.AddNew
          outpDln("DE_ID") = dlnID
          outpDln("DE_PROG_ID") = inp("PR_ID")
          outpDln("DE_Ver_ID") = Null
          outpDln("DE_IsEstaf") = True
          outpDln("DE_Zwemmer_ID") = Null
          outpDln("DE_Ploeg_ID") = curPloegID
          outpDln("DE_Inschrijftijd") = inp("DE_Inschrijftijd")
          
          outpDln("DE_QLF_Tijd") = inp("DE_QLF_Tijd")
          outpDln("DE_QLF_Baan") = inp("DE_QLF_Baan")
          outpDln("DE_QLF_Datum") = inp("DE_QLF_Datum")
          outpDln("DE_QLF_Plaats") = inp("DE_QLF_Plaats")
          outpDln("DE_QLF_WedDescription") = inp("DE_QLF_WedDescription")
          
          
          outpDln("DE_Reserve") = Nz(inp("DE_Reserve")) = "J"
          outpDln("DE_BM") = False
          outpDln("AUX_Wedstrijdnummer") = tpWedNr
          outpDln("AUX_Programmanummer") = tpProg
          outpDln("AUX_Estafettenummer") = tpEst
          outpDln("AUX_Depotnummer") = inp("V_Depot")
          
          'november 2006 addition.
          outpDln("DE_Agegroup_ID") = Null
          outpDln("INT_AGEGROUP_LEN_ID") = Null
          
          'Wijziging dd februari 2007
          'Output serie & baan for estafettes
          outpDln("DE_Baan") = inp("DE_Baan")
          outpDln("DE_Serienummer") = inp("DE_Serienummer")
          
          
        outpDln.Update
    End If
    
    Dim tdIsValid As Boolean
    tdIsValid = Nz(inp("TY_eindtijd")) > 0.01 Or Nz(inp("TY_Dis")) <> ""
  
    If (tdIsValid And expTd) Then
      Dim tdID As Long
      maxUsedTijdID = maxUsedTijdID + 1
      tdID = maxUsedTijdID
      curTdID = tdID
    
      If Not lnhAppendTijd(inp, outpTd, tdID, True, Nz(inp("PR_ID")), curPloegID, -1, -1, Nz(inp("V_Depot"))) Then Exit Function
    
    End If
  
  
  
  
    curWedNr = tpWedNr
    curProg = tpProg
    curEst = tpEst
    curVer = tpVer
  End If
  
  Dim startnr As String
  startnr = Nz(inp("PL_Startnummer"))
  
  Dim depNr As String
  depNr = Nz(inp("V_Depot"))
  
  Dim volg As Integer
  volg = Nz(inp("PL_Volgorde"))
  
  Dim res As Boolean
  res = (Nz(inp("PL_Reserve")) = "J")
  
  
  
  
  If (startnr <> "") Then
    If (expDlns And curDlnID <> -1) Then
       'immediately add the ploeg as a deelnemer.
       
       Dim pllQlfTime As Double
       Dim pllQlfDate As Date
       Dim pllQlfPlaats As String
       Dim pllQlfBaan As Integer
       Dim pllQlfWedDes As String
       
       pllQlfTime = Nz(inp("PL_QLF_Tijd"))
       pllQlfDate = Nz(inp("PL_QLF_Datum"), #1/1/1900#)
       pllQlfPlaats = Nz(inp("PL_QLF_Plaats"))
       pllQlfBaan = Nz(inp("PL_QLF_Baan"))
       pllQlfWedDes = Nz(inp("PL_QLF_WedDescription"))
       
       
       muPLLID = muPLLID + 1
       If Not lnhAddPloegLid(outpPloegLeden, -1, muPLLID, curPloegID, startnr, depNr, volg, res, -1, curDlnID, -1, pllQlfTime, pllQlfDate, pllQlfPlaats, pllQlfBaan, pllQlfWedDes, "") Then Exit Function
    End If



    'immediately add the ploeg as a deelnemer.
    If (expTd And curTdID <> -1) Then
      muPLLID = muPLLID + 1
      
      Dim plDis As String
      plDis = Nz(inp("TY_Dis"))
      
      Dim pllDis As String
      pllDis = ""
      
      
      If (plDis <> "") Then
        Dim pllOpm As String
        pllOpm = Nz(inp("PL_Opm"))
        Dim tpPllOpmAsTime As Double
        tpPllOpmAsTime = parseTijd(pllOpm)
        If (Not swtIsValid(tpPllOpmAsTime)) Then
          'interpret the opmerking as a disqualification code
          pllDis = pllOpm
        End If
      End If
      
      If Not lnhAddPloegLid(outpPloegLeden, -1, muPLLID, curPloegID, startnr, depNr, volg, res, curTdID, -1, -1, 0, #1/1/1900#, "", 0, "", pllDis) Then Exit Function
    End If
  End If
  
  
  
  
  
  
  
  
  
  
  
  
  inp.MoveNext
Loop





appCleanRS inp
appCleanRS outp
appCleanRS outpPloegLeden
appCleanRS outpDln
appCleanRS outpTd




lnhExportPloegen = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " " & Error$, 16

Exit Function

'debug
On Error GoTo 0
Resume

Exit Function
End Function

Private Function lnhExportPersoonlijk(ByRef maxUsedDlnID As Long, maxUsedTdID As Long, expDlns As Boolean, expTd As Boolean) As Boolean
On Error GoTo fout
lnhExportPersoonlijk = False

Dim sql As String
sql = "SELECT gIMP_LEN_Programma.PR_ID, [dtVerenigingen].V_DEPOT, dtDeelnemers.*, dtTijden.* " & _
  "FROM ((dtDeelnemers INNER JOIN gIMP_LEN_Programma ON (dtDeelnemers.DE_Programmanummer = gIMP_LEN_Programma.PR_Programmanummer) AND (dtDeelnemers.DE_Wedstrijdnummer = gIMP_LEN_Programma.PR_WED_ID)) INNER JOIN [dtVerenigingen] ON dtDeelnemers.DE_Vereniging = [dtVerenigingen].V_NAAM) LEFT JOIN dtTijden ON (dtDeelnemers.DE_Vereniging = dtTijden.TY_Vereniging) AND (dtDeelnemers.DE_Startnummer = dtTijden.TY_Startnummer) AND (dtDeelnemers.DE_Programmanummer = dtTijden.TY_Programmanummer) AND (dtDeelnemers.DE_Wedstrijdnummer = dtTijden.TY_Wedstrijdnummer) " & _
  "WHERE (((gIMP_LEN_Programma.PR_Afstand) Not Like ""*x*""));"




Dim inp As Recordset
Set inp = CurrentDb().OpenRecordset(sql)

Dim outpDln As Recordset
Set outpDln = CurrentDb().OpenRecordset("gIMP_LEN_Deelnemers")

Dim outpTd As Recordset
Set outpTd = CurrentDb().OpenRecordset("gIMP_LEN_TIJDEN")

Dim verID As Long
verID = 1

Dim depNr As String



inp.MoveFirst
Do Until inp.EOF
  Dim dlnID As Long
  maxUsedDlnID = maxUsedDlnID + 1
  dlnID = maxUsedDlnID
  
  depNr = Nz(inp("V_DEPOT"))

  If (expDlns) Then
  
    outpDln.AddNew
      outpDln("DE_ID") = dlnID
      outpDln("DE_PROG_ID") = inp("PR_ID")
      outpDln("DE_Ver_ID") = Null
      outpDln("DE_IsEstaf") = False
      outpDln("DE_Zwemmer_ID") = Null
      outpDln("DE_Ploeg_ID") = Null
      outpDln("DE_Inschrijftijd") = inp("DE_Inschrijftijd")
      outpDln("DE_QLF_Tijd") = inp("DE_QLF_Tijd")
      outpDln("DE_QLF_Plaats") = inp("DE_QLF_Plaats")
      outpDln("DE_QLF_Datum") = inp("DE_QLF_Datum")
      outpDln("DE_QLF_Baan") = inp("DE_QLF_Baan")
      outpDln("DE_QLF_WedDescription") = inp("DE_QLF_WedDescription")
      outpDln("DE_Reserve") = Nz(inp("DE_Reserve")) = "J"
      outpDln("DE_BM") = Nz(inp("DE_BuitenMededinging")) = "J"
      outpDln("DE_ABC") = hzn(Nz(inp("DE_A/B/C")))
      outpDln("DE_Baan") = inp("DE_Baan")
      
      outpDln("DE_Serienummer") = inp("DE_Serienummer")
      
      'toevoeging nov 2006
      outpDln("DE_AGEGROUP_ID") = Null
      outpDln("INT_AGEGROUP_LEN_ID") = Null
      
      'toevoeging mrt 2009
      outpDln("AUX_Categorie") = inp("DE_Categorie")
      
      'toevoeging jan 2009
      
      Dim tpCapkleur As String, tpCapNr As Long
      tpCapkleur = Nz(inp("DE_OW_Capkleur"))
      tpCapNr = Nz(inp("DE_OW_Capnummer"), 0)
      If (tpCapkleur <> "") And (tpCapNr > 0) Then
        outpDln("DE_OW_Capkleur") = inp("DE_OW_Capkleur")
        outpDln("DE_OW_Capnummer") = inp("DE_OW_Capnummer")
        outpDln("DE_OW_EigenCap") = inp("DE_OW_Eigencap")
      End If
      
      'outpDln("AUX_Wedstrijdnummer") = inp("Wedstrijdnr")
      'outpDln("AUX_Programmanummer") = inp("Programmanr")
      'outpDln("AUX_Estafettenummer") = Null
      outpDln("AUX_Depotnummer") = depNr
      outpDln("AUX_Startnummer") = inp("DE_Startnummer")
      
    outpDln.Update
  End If
  
  
    
  Dim tdIsValid As Boolean
  tdIsValid = Nz(inp("TY_eindtijd")) > 0.01 Or Nz(inp("TY_Dis")) <> ""
  
  If (expTd And tdIsValid) Then
    Dim tdID As Long
    maxUsedTdID = maxUsedTdID + 1
    tdID = maxUsedTdID
    
    If Not lnhAppendTijd(inp, outpTd, tdID, False, Nz(inp("PR_ID")), -1, -1, -1, depNr) Then Exit Function
    
    
  End If
  
    
  inp.MoveNext
Loop



appCleanRS inp
appCleanRS outpDln
appCleanRS outpTd


lnhExportPersoonlijk = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " " & Error$, 16

Exit Function

'debug
On Error GoTo 0
Resume

Exit Function
End Function


Private Function lnhExportWedstrijd_prepareUitslag() As Boolean
On Error GoTo fout
lnhExportWedstrijd_prepareUitslag = False


Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset("gIMP_LEN_Wedstrijden")

rs.MoveFirst
Do Until rs.EOF
  Dim tpWedNr As Long
  tpWedNr = Nz(rs("WE_ID"))
  
  If Not uitslagPrepareExport(tpWedNr) Then
    Exit Function
  End If
    
  rs.MoveNext
Loop

appCleanRS rs


lnhExportWedstrijd_prepareUitslag = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " lnhExportWedstrijd_prepareUitslag" & vbCrLf & Error$, 16
Exit Function
End Function



Public Function lnhExportWedstrijd(wednr As Long, singleWedOnly As Boolean, expDeelnemers As Boolean, expTijden As Boolean, ByVal expLims As Boolean, ByVal expRecs As Boolean, ByVal cleanImpTables As Boolean) As Boolean
On Error GoTo fout
lnhExportWedstrijd = False


'febr 2007
Dim lastUsedLimID As Long
Dim lastUsedRecID As Long
lastUsedLimID = 0
lastUsedRecID = 0

Dim outpLims As Recordset
Dim outpRecs As Recordset

Set outpLims = CurrentDb().OpenRecordset("gIMP_LEN_Limieten")
Set outpRecs = CurrentDb().OpenRecordset("gIMP_LEN_Records")


If (cleanImpTables) Then
  If Not lenCleanTransferTables() Then Exit Function
End If


Dim wedInf As WED_BASIC_INFO

Dim blFnd As Boolean
If Not wedLookup(wednr, blFnd, wedInf) Then
  Exit Function
End If
If Not blFnd Then
  Err.Raise 1, , "Kon wedstrijd: " & wednr & " niet vinden."
End If

Dim muCntID As Long
muCntID = 0

If Not lnhExportWedstrijdGegevens(singleWedOnly, wedInf, muCntID) Then
  Exit Function
End If




If Not lnhExportProgramma(wedInf.baan, wedInf.qlfConvMode, lastUsedLimID, lastUsedRecID, outpLims, outpRecs, expLims, expRecs) Then Exit Function

If Not lnhExportLeeftijdsGroepen(wedInf.baan, wedInf.qlfConvMode, lastUsedLimID, lastUsedRecID, outpLims, outpRecs, expLims, expRecs) Then Exit Function


appCleanRS outpLims
appCleanRS outpRecs

If (expLims) Then
  If Not lenCleanupDuplicateLimits() Then
    Exit Function
  End If
End If

If (expRecs) Then
  If Not lenCleanupDuplicateRecords() Then
    Exit Function
  End If
End If

If (expDeelnemers Or expTijden) Then

    If Not facCalcFees(IIf(singleWedOnly, wedInf.wednr, wedInf.meetMainNr), wedInf.isMeet And (Not singleWedOnly)) Then
      Exit Function
    End If
    
    'feb 2007 addition.
    If Not analyzeEstafs(singleWedOnly Or (Not wedInf.isMeet), wedInf.wednr, wedInf.meetMainNr, "~AN_Estafs", False) Then Exit Function
    
    'mar 2009 addition:
    'Need to apply ranking for all wedstrijden in the gIMP_LEN_Wedstrijden table
    
    If expTijden Then
      
      If Not lnhExportWedstrijd_prepareUitslag() Then
        Exit Function
      End If
      
    End If


    If Not lnhExportVer() Then Exit Function
    
    If Not lnhExportZwemmers() Then Exit Function
    
    Dim maxUsedDlnID As Long, maxUsedTijdID As Long
    maxUsedDlnID = 0
    maxUsedTijdID = 0
    
    
    If Not lnhExportPloegen(maxUsedDlnID, maxUsedTijdID, expDeelnemers, expTijden) Then Exit Function
    
    If Not lnhExportPersoonlijk(maxUsedDlnID, maxUsedTijdID, expDeelnemers, expTijden) Then Exit Function
End If

'If Not lnhExportTijden() Then Exit Function
'To Move.



lnhExportWedstrijd = True
Exit Function
fout:
MsgBox Err & " " & Error$, 16
Exit Function
End Function

Private Function lnhWriteWedstrijd(ByRef wed As Recordset, wedInp As Recordset, ByVal wednr As Long, ByVal isMeet As Boolean, ByVal meetMainWedNr As Long, ByVal meetFirstWedDate As Date) As Boolean
On Error GoTo fout
lnhWriteWedstrijd = False

'both recordsets must have been initialized to the actual wedstrijd nr
wed("WE_Wedstrijdnummer") = wednr
wed("WE_Datum") = wedInp("WE_Datum")

Dim curWedLftDat As Date
Dim curWedDat As Date
curWedLftDat = Nz(wedInp("WE_Leeftijdsdatum"))
If (lenDateIsValid(curWedLftDat)) Then
  If (isMeet) Then
    If (curWedLftDat <> meetFirstWedDate) Then
      'set ageDate to differing value
      wed("WE_AgeDate") = wedInp("WE_Leeftijdsdatum")
    End If
  Else
    curWedDat = Nz(wedInp("WE_Datum"))
    If (curWedDat <> curWedLftDat) Then
      'set ageDate to differing value
      wed("WE_AgeDate") = wedInp("WE_Leeftijdsdatum")
    End If
  End If
End If

'wijziging nov 2006
'wed("WE_Beschrijving") = left(Trim(Nz(wedInp("WE_Beschrijving")) & " " & Nz(wedInp("WE_Beschrijving_Extra"))), 255)
If (Nz(wedInp("WE_Beschrijving_Extra")) = "") Then
  wed("WE_Beschrijving") = wedInp("WE_Beschrijving")
Else
  wed("WE_Beschrijving") = wedInp("WE_Beschrijving_Extra")
End If

If (isMeet) And (meetMainWedNr = wednr) Then
  If Nz(wedInp("WE_Beschrijving")) <> Nz(wedInp("WE_Beschrijving_Extra")) Then
    wed("WE_MainBeschrijving") = wedInp("WE_Beschrijving")
  End If
End If



wed("WE_Plaats") = wedInp("WE_Plaats")
wed("WE_Baanlengte") = wedInp("WE_Baanlengte")

wed("WE_Aanvang") = wedInp("WE_Aanvang")
wed("WE_Inzwemmen") = wedInp("WE_Inzwemmen")
wed("WE_AanvangJuryVergadering") = wedInp("WE_AanvangJuryVergadering")
wed("WE_Zwembad") = wedInp("WE_Zwembad")
wed("WE_Adres") = wedInp("WE_Adres")
wed("WE_Leeftijdsbepaling") = wedInp("WE_LeeftijdsBepaling")
wed("WE_BulkKostenVer") = wedInp("WE_BulkKostenVer")
wed("WE_BulkKostenZwemmer") = wedInp("WE_BulkKostenZwemmer")
wed("WE_Kosten_Estaf") = wedInp("WE_KostenRelay")
If (Nz(wed("WE_Kosten_Estaf")) > 0.01) Then
  wed("WE_Kosten1_spec") = 2
End If
wed("WE_Kosten_Currency") = wedInp("WE_Kosten_Currency")



wed("WE_Organ ver") = wedInp("WE_Organiserende_Vereniging")
wed("WE_Aantal_banen") = wedInp("WE_aantalBanen")
wed("WE_Eerste_baan") = wedInp("WE_EersteBaan")
wed("WE_Elektronisch") = wedInp("WE_ElektronischeTijd")

wed("WE_ISPartOfMeet") = isMeet
If (isMeet) Then
  wed("WE_MainWedstrijdNummer") = meetMainWedNr
Else
  wed("WE_MainWedstrijdNummer") = Null
End If


lnhWriteWedstrijd = True
Exit Function
fout:

If (Err = 3163) Then Resume Next 'field too small.

MsgBox Err & " " & Error$, 16

Exit Function

'debug
On Error GoTo 0
Resume

Exit Function
End Function


Private Function lnhWriteWedstrijden(owWed As Boolean, clearAllDlns As Boolean, clearAllTd As Boolean, ByRef nNewWeds As Integer, ByRef newWedMinNr As Long) As Boolean
On Error GoTo fout
lnhWriteWedstrijden = False

Dim wed As Recordset, wedGeg As Recordset

Set wed = CurrentDb().OpenRecordset("dtWedstrijdGegevens")

wed.Index = "PrimaryKey"


nNewWeds = 0
newWedMinNr = 0



Dim inp As Recordset
Set inp = CurrentDb().OpenRecordset("select * from gIMP_LEN_wedstrijden where corr_wedstrijdnummer > 0 order by corr_wedstrijdnummer;")


inp.MoveLast

Dim wedCnt As Long
wedCnt = 0
If Not inp.EOF Then
  wedCnt = inp.RecordCount
End If

Dim isMeet As Boolean
isMeet = wedCnt > 1
Dim meetMainWedNr As Long
meetMainWedNr = -1

Dim meetFirstWedDate As Date
meetFirstWedDate = #1/1/1900#

Dim isFirst As Boolean
isFirst = True


Dim sql As String

inp.MoveFirst
Do Until inp.EOF
  Dim wednr  As Long
  wednr = Nz(inp("corr_wedstrijdnummer"))
  
  If (isFirst) Then
    If (isMeet) Then
      meetMainWedNr = wednr
      meetFirstWedDate = Nz(inp("WE_datum"), #1/1/1900#)
    End If
    isFirst = False
  End If
  
  
  
  If (clearAllDlns) Then
  
    sql = "delete * from deelnemers where de_wedstrijdnummer = " & wednr & ";"
    DoCmd.SetWarnings False
    DoCmd.RunSQL sql
    DoCmd.SetWarnings True
  End If
  
  If (clearAllTd) Then
    DoCmd.SetWarnings False
    sql = "delete * from dtTijden where ty_wedstrijdnummer=" & wednr & ";"
    DoCmd.RunSQL sql
    DoCmd.SetWarnings True
  End If
    

  
  
  
  wed.Seek "=", wednr
  
  If wed.NoMatch Then
    'need to append the wedstrijd.
    wed.AddNew
    
    If Not lnhWriteWedstrijd(wed, inp, wednr, isMeet, meetMainWedNr, meetFirstWedDate) Then Exit Function
    
    
    
    wed.Update
    
    nNewWeds = nNewWeds + 1
    If (nNewWeds = 1) Or (wednr < newWedMinNr) Then
      newWedMinNr = wednr
    End If
    
  ElseIf (owWed) Then
    'need to overwrite the wedstrijd.
    wed.Edit
    If Not lnhWriteWedstrijd(wed, inp, wednr, isMeet, meetMainWedNr, meetFirstWedDate) Then Exit Function
    wed.Update
    
  End If
  
  
  inp.MoveNext
Loop



appCleanRS wed
appCleanRS inp




lnhWriteWedstrijden = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " " & Error$, 16

Exit Function


'debug
On Error GoTo 0
Resume

Exit Function
End Function


Private Function lnhWriteProgrammaNummer(ByRef progs As Recordset, ByRef progInp As Recordset, wednr As Long, prognr As String, progID As Long) As Boolean
On Error GoTo fout
lnhWriteProgrammaNummer = False

progs("PR_WedstrijdNummer") = wednr
progs("PR_Programmanummer") = prognr
progs("PR_Afstand") = progInp("PR_Afstand")
progs("PR_Slag") = progInp("PR_Slag")

Dim catInf As CAT_INFO
If Not lenReadCatInfo(progInp, "PR_", False, catInf) Then Exit Function

If Not lenWriteCatInfo(progs, "PR_", False, catInf, "Beschrijving Categorie", "RES_Marge", "Vervangende tijd") Then Exit Function


progs("PR_Opmerking") = progInp("PR_Opmerking")

progs("PR_TYPE") = progInp("PR_Type")
progs("PR_Beschrijving_afwijkend") = progInp("PR_BeschrijvingAfwijkend")
progs("PR_Kosten") = progInp("PR_Kosten")
progs("PR_Vorig_Programmanummer") = progInp("AUX_Vorig_Prog")
progs("PR_Aanvangstijd") = progInp("PR_Aanvang")

progs("INT_LEN_ID") = progInp("INT_LEN_ID")
progs("INT_LEN_NR_ID") = progInp("INT_LEN_NR_ID")


'toegevoegd febr 2007
'Progs("PR_AantMeetel") = 0
progs("PR_AantMeetel") = Nz(progInp("PR_AantMeetel"), 0)
progs("PR_BM") = Nz(progInp("PR_BM"), "N")




lnhWriteProgrammaNummer = True
Exit Function
fout:
DoCmd.SetWarnings True
MsgBox Err & " " & Error$, 16

Exit Function

'debug
On Error GoTo 0
Resume

Exit Function
End Function

Private Function lnhWriteProgramma(owProgs As Boolean, impDln As Boolean, impTd As Boolean, clnDlnPerVer As Boolean, clnTdPerVer As Boolean, ByRef nNewProgs As Integer) As Boolean
On Error GoTo fout
lnhWriteProgramma = False

Dim progs As Recordset
Set progs = CurrentDb().OpenRecordset("dtProgramma")

progs.Index = "PrimaryKey"

Dim inp As Recordset
Set inp = CurrentDb().OpenRecordset("select * from gIMP_LEN_Programma where nz([aux_wedstrijdnummer]) > 0 and nz([corr_programmanummer]) <> """";")


nNewProgs = 0


inp.MoveFirst
Do Until inp.EOF
  Dim wednr As Long
  Dim prognr As String
  wednr = Nz(inp("AUX_Wedstrijdnummer"))
  prognr = Nz(inp("CORR_Programmanummer"))
  Dim progID As Long
  progID = Nz(inp("PR_ID"))
  
  
  Dim isEstaf As Boolean
  isEstaf = Nz(inp("PR_AFstand")) Like "*x*"
  
  
  Dim blEdited As Boolean
  blEdited = False
  
  progs.Seek "=", wednr, prognr
  
  If progs.NoMatch Then
    'have to append
    progs.AddNew
    
    If Not lnhWriteProgrammaNummer(progs, inp, wednr, prognr, progID) Then Exit Function
    
    blEdited = True
    progs.Update
    
    nNewProgs = nNewProgs + 1
    
  ElseIf (owProgs) Then
    'have to overwrite
    progs.Edit
    
    If Not lnhWriteProgrammaNummer(progs, inp, wednr, prognr, progID) Then Exit Function
    
    blEdited = True
    
    progs.Update
  End If
  
  
  
  'now have to handle agegroups.
  If (blEdited) Then
    Dim delSQL As String
    delSQL = "Delete * from [dtProgrammaLeeftijdsgroepen] where [prL_wedstrijdnummer]= " & wednr & " and [prl_programmanummer]=""" & prognr & """;"
    DoCmd.SetWarnings False
    
    
    DoCmd.RunSQL delSQL
    
    Dim insSQL As String
    insSQL = "INSERT INTO dtProgrammaLeeftijdsgroepen ( prl_Categorie, [prl_Beschrijving categorie], prl_Limiet, prl_Res_Marge, prl_code, prl_Vervangende_Tijd, " & _
    "PRL_Record_Omschrijving, PRL_Record_Naam, PRL_Record_Tijd, PRL_Record_Plaats, PRL_Record_Datum, PRL_Record_Tussentijden, PRL_Programmanummer, PRL_Wedstrijdnummer ) " & _
    "SELECT gIMP_LEN_Leeftijdsgroepen.LF_Categorie, gIMP_LEN_Leeftijdsgroepen.LF_BeschrijvingCategorie, gIMP_LEN_Leeftijdsgroepen.LF_Limiet, " & _
    "gIMP_LEN_Leeftijdsgroepen.LF_ResMarge, gIMP_LEN_Leeftijdsgroepen.LF_Code, gIMP_LEN_Leeftijdsgroepen.LF_VervangendeTijd, gIMP_LEN_Leeftijdsgroepen.LF_Record_Omschrijving, " & _
    "gIMP_LEN_Leeftijdsgroepen.LF_Record_Naam, gIMP_LEN_Leeftijdsgroepen.LF_Record_Tijd, gIMP_LEN_Leeftijdsgroepen.LF_Record_Plaats, " & _
    "gIMP_LEN_Leeftijdsgroepen.LF_Record_Datum, gIMP_LEN_Leeftijdsgroepen.LF_Record_Tussentijden, gIMP_LEN_Leeftijdsgroepen.AUX_Programmanummer, " & _
    "gIMP_LEN_Leeftijdsgroepen.AUX_Wedstrijdnummer FROM gIMP_LEN_Leeftijdsgroepen " & _
    "WHERE (((gIMP_LEN_Leeftijdsgroepen.LF_PR_ID)=" & progID & "));"
    
    DoCmd.RunSQL insSQL
    
    
    DoCmd.SetWarnings True
  End If
  
  
  If (isEstaf) Then
    If Not lnhPrepareProgForEstafs(wednr, prognr, impDln, impTd, clnDlnPerVer, clnTdPerVer) Then Exit Function
  End If
  
  
  
  inp.MoveNext
Loop



appCleanRS progs
appCleanRS inp



lnhWriteProgramma = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " " & Error$, 16
Exit Function
'debug
On Error GoTo 0
Resume

Exit Function
End Function





Private Function lnhWriteVers(owVers As Boolean, impClnAllDlns As Boolean, impClnAllTd As Boolean, impClnTdPerVer As Boolean, impClnDlnPerVer As Boolean) As Boolean
On Error GoTo fout
lnhWriteVers = False

Dim ver As Recordset
Set ver = CurrentDb().OpenRecordset("dtVerenigingen")
ver.Index = "PrimaryKey"

Dim inp As Recordset

Dim sql As String
'modification 26 september: exclude verenigingen with zero-length names.
sql = "SELECT * from gIMP_LEN_Ver where nz([corr_depot]) <> """" and nz([V_Naam]) <> """";"

Set inp = CurrentDb().OpenRecordset(sql)

Dim wed As Recordset
Set wed = CurrentDb().OpenRecordset("select * from gIMP_LEN_wedstrijden where nz([corr_wedstrijdnummer]) > 0")


Dim dlnVer As Recordset
Set dlnVer = CurrentDb().OpenRecordset("dtDeelnemendeVerenigingen")
dlnVer.Index = "PrimaryKey"

Dim cnt As Recordset
Set cnt = CurrentDb().OpenRecordset("dtContactpersonen")
cnt.Index = "PrimaryKey"

Dim cntInp As Recordset
Set cntInp = CurrentDb().OpenRecordset("gIMP_LEN_Contact")
cntInp.Index = "PrimaryKey"


inp.MoveFirst
Do Until inp.EOF
  Dim depNr As String
  Dim naam As String
  
  depNr = Nz(inp("CORR_DEPOT"))
  naam = Nz(inp("V_NAAM"))
  Dim Plaats As String
  Plaats = Nz(inp("V_Plaats"))
  
  If (impClnDlnPerVer And Not impClnAllDlns) Then
    DoCmd.SetWarnings False
    wed.MoveFirst
    Do Until wed.EOF
      sql = "Delete * from dtDeelnemers where de_wedstrijdnummer=" & Nz(wed("Corr_Wedstrijdnummer")) & " and de_vereniging = """ & naam & """;"
      DoCmd.RunSQL sql
      wed.MoveNext
    Loop
    
    DoCmd.SetWarnings True
  ElseIf (impClnTdPerVer And Not impClnAllTd) Then
    DoCmd.SetWarnings False
    wed.MoveFirst
    Do Until wed.EOF
      sql = "Delete * from dtTijden where ty_wedstrijdnummer=" & Nz(wed("Corr_Wedstrijdnummer")) & " and ty_vereniging = """ & naam & """;"
      DoCmd.RunSQL sql
      wed.MoveNext
    Loop
    
    DoCmd.SetWarnings True
  End If
  
    
  
  
  
  
  ver.Seek "=", naam
  
  If (ver.NoMatch) Then
    'need to append.
    ver.AddNew
    If Not lnhWriteVer(ver, inp, depNr, naam) Then Exit Function
    ver.Update
  ElseIf (owVers) Then
    'need to overwrite
    ver.Edit
    If Not lnhWriteVer(ver, inp, depNr, naam) Then Exit Function
    Plaats = Nz(ver("V_Plaats"))
    ver.Update
  Else
    Plaats = Nz(ver("V_Plaats"))
  End If
  
  
  Dim cntID As Long
  cntID = Nz(inp("V_Contact_ID"), -1)
  
  Dim cntName As String
  cntName = ""
  
  If (cntID > 0) Then
    cntInp.Seek "=", cntID
    If Not cntInp.NoMatch Then
      cntName = Nz(cntInp("CT_Naam"))
      
      If (cntName <> "") Then
        cnt.Seek "=", naam, cntName
        If cnt.NoMatch Then
          cnt.AddNew
            If Not lnhWriteVerCnt(cnt, cntInp, naam) Then Exit Function
          cnt.Update
        ElseIf (owVers) Then
          cnt.Edit
            If Not lnhWriteVerCnt(cnt, cntInp, naam) Then Exit Function
          cnt.Update
        End If
      End If
    End If
  End If
    
  
  
  'now have to make sure it is a deelnemende vereniging.
  wed.MoveFirst
  Do Until wed.EOF
    Dim wednr As Long
    wednr = Nz(wed("CORR_WEdstrijdnummer"))
    dlnVer.Seek "=", naam, wednr
    
    If dlnVer.NoMatch Then
      dlnVer.AddNew
        dlnVer("DV_Naam") = hzn(naam)
        dlnVer("DV_Wedstrijdnummer") = wednr
        dlnVer("DV_Plaats") = hzn(Plaats)
        dlnVer("DV_Cont_Naam") = hzn(cntName)
      dlnVer.Update
    ElseIf (owVers) Then
      If (cntName <> "") Then
        dlnVer.Edit
          dlnVer("DV_Cont_Naam") = hzn(cntName)
        dlnVer.Update
      End If
    End If
    
    wed.MoveNext
  Loop
  
  
  
  
  inp.MoveNext

Loop





appCleanRS ver
appCleanRS inp
appCleanRS wed
appCleanRS dlnVer
appCleanRS cnt
appCleanRS cntInp



lnhWriteVers = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " " & Error$, 16

Exit Function

'debug
On Error GoTo 0
Resume

Exit Function
End Function



Private Function lnhWriteVerCnt(ByRef verCnt As Recordset, ByRef inpCnt As Recordset, ByVal verNaam As String) As Boolean
On Error GoTo fout
lnhWriteVerCnt = False



verCnt("V_Naam") = verNaam
verCnt("cont_naam") = inpCnt("CT_Naam")
verCnt("cont_adres") = inpCnt("CT_Adres")
verCnt("cont_postcode") = inpCnt("CT_Postcode")
verCnt("cont_plaats") = inpCnt("CT_Plaats")
verCnt("cont_telefoon") = inpCnt("CT_Telefoonnummer")
verCnt("cont_email") = inpCnt("CT_Email")
verCnt("cont_nation_code") = inpCnt("CT_Land")


lnhWriteVerCnt = True
Exit Function
fout:
MsgBox Err & " lnhWriteVerCnt" & vbCrLf & Error$, 16
Exit Function
End Function









Private Function lnhWriteZwemmers(owZws As Boolean, ByRef nNewSwimmer As Long) As Boolean
On Error GoTo fout
lnhWriteZwemmers = False

Dim sql As String
sql = "SELECT gIMP_LEN_Ver.V_Naam, gIMP_LEN_Zwemmers.* " & _
      "FROM gIMP_LEN_Zwemmers INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_Zwemmers.ZW_VER_ID = gIMP_LEN_Ver.V_ID where (nz([corr_startnummer]) <> """") and nz([aux_depotnummer]) <> """";"

nNewSwimmer = 0
If Not lnhWriteZwemmersFromSQL(sql, owZws, True, nNewSwimmer) Then
  Exit Function
End If




lnhWriteZwemmers = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " " & Error$, 16

Exit Function

'debug
On Error GoTo 0
Resume

Exit Function
End Function




Private Function lnhWritePersoonlijk(clearAllDlns As Boolean, impDlns As Boolean, impTd As Boolean, clearAllTd As Boolean, findInsWedNrs As Boolean) As Boolean
On Error GoTo fout
lnhWritePersoonlijk = False

Dim sql As String

DoCmd.SetWarnings False


If (impDlns) Then
  'write the deelnemers.
  
  Dim inp As Recordset
  
  sql = "SELECT gIMP_LEN_deelnemers.*, gIMP_LEN_Ver.V_Naam, * " & _
         "FROM gIMP_LEN_deelnemers INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_deelnemers.DE_Ver_ID = gIMP_LEN_Ver.V_ID " & _
          "WHERE (nz([aux_startnummer]) <> """") and  (((nz([aux_wedstrijdnummer]))>0) AND ((nz([aux_Programmanummer]))<>"""") and ((nz([aux_depotnummer])) <> """") AND ((nz([de_isEstaf]))=False)); "

  
  Set inp = CurrentDb().OpenRecordset(sql)
  
  'Dim wed As Recordset
  'Set wed = CurrentDb().OpenRecordset("Wedstrijden tbl", dbOpenDynaset)
  
  Dim outp As Recordset
  Set outp = CurrentDb().OpenRecordset("dtDeelnemers")
  
  outp.Index = "startnummer"
  
  
  
  inp.MoveFirst
  Do Until inp.EOF
  
    Dim wednr As Long
    Dim prognr As String
    Dim Vereniging As String
    Dim startnr As String
    wednr = Nz(inp("AUX_Wedstrijdnummer"))
    prognr = Nz(inp("AUX_Programmanummer"))
    startnr = Nz(inp("AUX_Startnummer"))
    Vereniging = Nz(inp("V_Naam"))
    
    
    If (Not clearAllDlns) Then
      outp.Seek "=", wednr, prognr, startnr, Vereniging, 0
      If (Not outp.NoMatch) Then
        outp.Delete
      End If
    End If
      
    
    
    outp.AddNew
      outp("DE_Wedstrijdnummer") = wednr
      outp("DE_Programmanummer") = hzn(prognr)
      outp("DE_Vereniging") = hzn(Vereniging)
      outp("DE_Startnummer") = hzn(startnr)
      outp("DE_Estafettenummer") = 0
      outp("DE_Reserve") = IIf(Nz(inp("DE_Reserve")), "J", "N")
      outp("DE_Buitenmededinging") = IIf(Nz(inp("DE_BM")), "J", "N")
      outp("DE_A/B/C") = inp("DE_ABC")
      outp("DE_Inschrijftijd") = Nz(inp("DE_Inschrijftijd"))
      
      outp("DE_QLF_Tijd") = inp("DE_QLF_Tijd")
      outp("DE_QLF_Datum") = inp("DE_QLF_Datum")
      outp("DE_QLF_Plaats") = inp("DE_QLF_Plaats")
      outp("DE_QLF_Baan") = inp("DE_QLF_Baan")
      outp("DE_QLF_WedDescription") = inp("DE_QLF_WedDescription")
      
      
      outp("DE_Serienummer") = Nz(inp("DE_Serienummer"), 0)
      outp("DE_Baan") = Nz(inp("DE_Baan"), 0)
      
      'copy over open water settings
      Dim tpCapkleur As String, tpCapNr As Long
      tpCapkleur = Nz(inp("DE_OW_Capkleur"))
      tpCapNr = Nz(inp("DE_OW_Capnummer"), 0)
      If (tpCapkleur <> "") And (tpCapNr > 0) Then
        outp("DE_OW_Capkleur") = inp("DE_OW_Capkleur")
        outp("DE_OW_Capnummer") = inp("DE_OW_Capnummer")
        outp("DE_OW_EigenCap") = inp("DE_OW_Eigencap")
      End If
      
      
      
    outp.Update
      
    
    
  
  
    inp.MoveNext
  Loop
  
  
  appCleanRS inp
  appCleanRS outp
    
    
End If


If (impTd) Then
  'Need to make sure there are deelnemer entries for all tijden which we will import.
  'sql = "INSERT INTO [deelnemers] ( DE_Wedstrijdnummer, DE_Programmanummer, DE_Startnummer, DE_Reserve, DE_Buitenmededinging, DE_Estafettenummer ) " & _
  '      "SELECT gIMP_LEN_Tijden.AUX_Wedstrijdnummer, gIMP_LEN_Tijden.AUX_Programmanummer, gIMP_LEN_Tijden.AUX_Startnummer,  ""N"" AS Expr4, ""N"" AS Expr5, 0 AS Expr6 " & _
  '      "FROM gIMP_LEN_Tijden LEFT JOIN [Deelnemers] ON (gIMP_LEN_Tijden.AUX_Startnummer = [deelnemers].DE_Startnummer) AND (gIMP_LEN_Tijden.AUX_Programmanummer = [Inschrijvingen verder tbl].Programmanr) AND (gIMP_LEN_Tijden.AUX_Wedstrijdnummer = [Inschrijvingen verder tbl].Wedstrijdnr) " & _
  '      "WHERE ((([Inschrijvingen verder tbl].Wedstrijdnr) Is Null) AND ((nz([AUX_Wedstrijdnummer]))>0) AND ((nz([AUX_Programmanummer]))<>"""") AND ((gIMP_LEN_Tijden.TY_IsEstaf)=False)); "

  'DoCmd.RunSQL sql
    
    'have to loop through tijden individually in order to check if one already exists and if not, append a deelnemer.
    
    
  sql = "SELECT gIMP_LEN_Ver.V_Naam, gIMP_LEN_Tijden.*, * " & _
        "FROM gIMP_LEN_Tijden INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_Tijden.TY_Ver_ID = gIMP_LEN_Ver.V_ID " & _
         "WHERE (nz([aux_startnummer]) <> """") and (((nz([aux_wedstrijdnummer]))>0) AND ((nz([aux_Programmanummer]))<>"""") and ((nz([aux_depotnummer])) <> """") AND ((nz([ty_isEstaf]))=False)); "


  
    
  Dim td As Recordset
  Set td = CurrentDb().OpenRecordset(sql)
  Dim outpTd As Recordset
  Set outpTd = CurrentDb().OpenRecordset("dtTijden")
  
  Dim dln As Recordset
  Set dln = CurrentDb().OpenRecordset("dtDeelnemers")
  
  dln.Index = "startnummer"
  
  outpTd.Index = "TY_Index"
  
  td.MoveFirst
  Do Until td.EOF
    wednr = Nz(td("AUX_Wedstrijdnummer"))
    prognr = Nz(td("AUX_Programmanummer"))
    startnr = Nz(td("AUX_Startnummer"))
    Vereniging = Nz(td("V_Naam"))
    
    
    'have to find if a deelnemer exists.
    dln.Seek "=", wednr, prognr, startnr, Vereniging, 0
    
    Dim deIndex As Long
    Dim deBBM As String
    
    If (dln.NoMatch) Then
      'we have to append a deelnemer.
      dln.AddNew
        dln("DE_Wedstrijdnummer") = wednr
        dln("DE_Programmanummer") = prognr
        dln("DE_Startnummer") = hzn(startnr)
        dln("DE_Vereniging") = hzn(Vereniging)
        dln("DE_Reserve") = "N"
        dln("DE_Estafettenummer") = 0
        
        If Nz(td("TY_BM"), False) Then
          deBBM = "J"
        Else
          deBBM = "N"
        End If
        dln("DE_Buitenmededinging") = hzn(deBBM)
        
        
        
        dln("DE_Inschrijftijd") = td("TY_Inschrijftijd")
        
        'also attempt to copy over serie & baan
        dln("DE_Serienummer") = Nz(td("TY_Serienummer"), 0)
        dln("DE_Baan") = Nz(td("TY_Baan"), 0)
        
        'also copy over ow capkleur and capnr
        
        tpCapkleur = Nz(td("TY_OW_Capkleur"))
        tpCapNr = Nz(td("TY_OW_Capnummer"), 0)
        If (tpCapkleur <> "") And (tpCapNr > 0) Then
          outp("DE_OW_Capkleur") = td("TY_OW_Capkleur")
          outp("DE_OW_Capnummer") = td("TY_OW_Capnummer")
          outp("DE_OW_EigenCap") = td("TY_OW_Eigencap")
        End If
        
        
        
        deIndex = Nz(dln("DE_Index"))


      dln.Update
    Else
      'we need the index & we need to check if TY contains that index.
      deIndex = dln("DE_Index")
      deBBM = Nz(dln("DE_Buitenmededinging"))
      
      Dim intijd As Double
      Dim curInTijd As Double
      curInTijd = Nz(dln("DE_Inschrijftijd"))
      
      
            
      'only update dlnBM if tyBM is set to true and dlnBM is set to fals
      If (Nz(td("TY_BM"), False)) Then
        If (deBBM = "N") Then
          deBBM = "J"
          dln.Edit
            dln("DE_Buitenmededinging") = hzn(deBBM)
          dln.Update
        End If
      End If
      
      
      If Not swtIsValid(curInTijd) Then
        intijd = Nz(td("TY_Inschrijftijd"))
        If swtIsValid(intijd) Then
          dln.Edit
          dln("DE_Inschrijftijd") = intijd
          dln.Update
        End If
      End If
      
      Dim tpCurBn, tpCurSer As Integer
      tpCurBn = Nz(dln("DE_Baan"), 0)
      tpCurSer = Nz(dln("DE_Serienummer"), 0)
      If (tpCurBn = 0) And (tpCurSer = 0) Then
        dln.Edit
        dln("DE_Serienummer") = Nz(td("TY_Serienummer"), 0)
        dln("DE_Baan") = Nz(td("TY_Baan"), 0)
        dln.Update
      End If
      
      If Not clearAllTd Then
        outpTd.Seek "=", deIndex
        If Not outpTd.NoMatch Then
           outpTd.Delete
        End If
      End If
      
    End If
    
    
        
    outpTd.AddNew
      
      outpTd("TY_Wedstrijdnummer") = wednr
      outpTd("TY_Programmanummer") = prognr
      outpTd("TY_Startnummer") = hzn(startnr)
      outpTd("TY_Vereniging") = hzn(Vereniging)
      outpTd("TY_Estafettenummer") = 0
      outpTd("TY_Index") = deIndex
      
      outpTd("TY_BM") = hzn(deBBM)
      
      outpTd("TY_Eindtijd") = td("TY_Eindtijd")
      outpTd("TY_ExtraTussentijden") = td("TY_ExtraTussentijden")
      outpTd("TY_DIS") = td("TY_DIS")
      outpTd("TY_AB") = td("TY_AB")
      outpTd("TY_Echteplaats") = td("TY_Eindplaats")
      'outpTd("TY_Opm") = td("TY_Opm")
      outpTd("TY_afstand1") = td("TY_Afstand1")
      outpTd("TY_afstand2") = td("TY_Afstand2")
      outpTd("TY_Afstand3") = td("TY_Afstand3")
      outpTd("TY_Afstand4") = td("TY_Afstand4")
      outpTd("TY_Tijd1") = td("TY_Tijd1")
      outpTd("TY_Tijd2") = td("TY_Tijd2")
      outpTd("TY_Tijd3") = td("TY_Tijd3")
      outpTd("TY_Tijd4") = td("TY_Tijd4")
      outpTd("TY_Eindafstand") = td("TY_Eindafstand")
    
    outpTd.Update
    
    
    
    
    
  
    td.MoveNext
  Loop
  
  
  appCleanRS td
  appCleanRS outpTd
  appCleanRS dln
  
  
End If




DoCmd.SetWarnings True


lnhWritePersoonlijk = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
DoCmd.SetWarnings True
MsgBox Err & " " & Error$, 16

Exit Function


'debug
On Error GoTo 0
Resume

Exit Function
End Function


Private Function lnhPrepareProgForEstafs(wednr As Long, prognr As String, impDln As Boolean, impTd As Boolean, impClnDlnPerVer As Boolean, impClnTdPerVer) As Boolean
On Error GoTo fout
lnhPrepareProgForEstafs = False

If (Not impDln) And (Not impTd) Then
  lnhPrepareProgForEstafs = True
  Exit Function
End If



'strategy: for every vereniging listed in the set, clear the entire prog of all estafettes for that vereniging.




Dim sql As String

Dim pll As Recordset, pl As Recordset


Dim isLoaded As Boolean
isLoaded = False


If (impTd) Then

    sql = "SELECT gIMP_LEN_ploegleden.*, gIMP_LEN_Ver.V_Naam " & _
      "FROM (gIMP_LEN_ploegleden INNER JOIN gIMP_LEN_Ploeg ON gIMP_LEN_ploegleden.PLL_Ploeg_ID = gIMP_LEN_Ploeg.PL_ID) INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_Ploeg.PL_VER_ID = gIMP_LEN_Ver.V_ID " & _
        "WHERE (nz([aux_startnummer]) <> """") and   (((nz([aux_wedstrijdnummer]))= " & wednr & ") AND ((nz(aux_programmanummer))=""" & prognr & """) AND ((nz([gIMP_LEN_ploegleden].aux_depotnummer)) <> """") AND ((nz([pll_tijd_id],-1))<>-1));"
    Set pll = CurrentDb().OpenRecordset(sql, dbOpenDynaset)
    
    sql = "SELECT gIMP_LEN_Ver.V_Naam, gIMP_LEN_Ploeg.* " & _
    "FROM (gIMP_LEN_Tijden INNER JOIN gIMP_LEN_Ploeg ON gIMP_LEN_Tijden.TY_Ploeg_ID = gIMP_LEN_Ploeg.PL_ID) INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_Ploeg.PL_VER_ID = gIMP_LEN_Ver.V_ID " & _
    "WHERE (((nz([aux_wedstrijdnummer])) = " & wednr & ") AND ((nz([gIMP_LEN_tijden].aux_depotnummer)) <> """") AND ((nz([aux_Programmanummer]))=""" & prognr & """)) order by v_naam;"
    Set pl = CurrentDb().OpenRecordset(sql)
    
    pl.MoveFirst
    If Not pl.EOF Then
      isLoaded = True
    End If
End If

If (Not isLoaded And impDln) Then

      sql = "SELECT gIMP_LEN_ploegleden.*, gIMP_LEN_Ver.V_Naam " & _
          "FROM (gIMP_LEN_ploegleden INNER JOIN gIMP_LEN_Ploeg ON gIMP_LEN_ploegleden.PLL_Ploeg_ID = gIMP_LEN_Ploeg.PL_ID) INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_Ploeg.PL_VER_ID = gIMP_LEN_Ver.V_ID " & _
            "WHERE (nz([aux_startnummer]) <> """") and (((nz([aux_wedstrijdnummer]))= " & wednr & ") and ((nz([gIMP_LEN_ploegleden].aux_depotnummer)) <> """") AND ((nz([aux_programmanummer]))=""" & prognr & """) AND ((nz([pll_deelnemer_id],-1))<>-1)) ;"
      Set pll = CurrentDb().OpenRecordset(sql, dbOpenDynaset)
      
      sql = "SELECT gIMP_LEN_Ver.V_Naam, gIMP_LEN_Ploeg.* " & _
        "FROM (gIMP_LEN_Deelnemers INNER JOIN gIMP_LEN_Ploeg ON gIMP_LEN_Deelnemers.DE_Ploeg_ID = gIMP_LEN_Ploeg.PL_ID) INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_Ploeg.PL_VER_ID = gIMP_LEN_Ver.V_ID " & _
        "WHERE (((nz([aux_wedstrijdnummer])) = " & wednr & ") and ((nz([gIMP_LEN_deelnemers].aux_depotnummer)) <> """") AND ((nz([aux_Programmanummer]))=""" & prognr & """)) order by v_naam;"
    
      Set pl = CurrentDb().OpenRecordset(sql)

End If


'now iterate through pl, keeping track of the verenigingen


Dim curVer As String
curVer = ""

Dim curEstNr As Long

Dim outpDln As Recordset
Set outpDln = CurrentDb().OpenRecordset("dtDeelnemers")
outpDln.Index = "est"


Dim blReadingDeelns As Boolean

blReadingDeelns = True




    pl.MoveFirst
    Do Until pl.EOF
      Dim tpVer As String
      tpVer = pl("V_Naam")
      If (tpVer <> curVer) Then
        'just delete everything for this vereniging in this programmanummer.
        sql = "Delete * from dtDeelnemers where de_wedstrijdnummer = " & wednr & " and de_programmanummer = """ & prognr & """ and de_vereniging = """ & tpVer & """;"
        DoCmd.SetWarnings False
        DoCmd.RunSQL sql
        DoCmd.SetWarnings True
        
        
        
        
      
        curVer = tpVer
      End If
      
      curEstNr = Nz(pl("PL_NUMMER"), 1)
      
      outpDln.AddNew
        outpDln("DE_Wedstrijdnummer") = wednr
        outpDln("DE_Programmanummer") = hzn(prognr)
        outpDln("DE_Vereniging") = curVer
        outpDln("DE_Estafettenummer") = curEstNr
        outpDln("DE_startnummer") = Null
      outpDln.Update
      
      
      
    
      pl.MoveNext
    Loop


Dim outpPl As Recordset
Set outpPl = CurrentDb().OpenRecordset("dtPloegen")



Dim curPlID As Long
curPlID = -1
Dim curDEIndex As Long


blReadingDeelns = False



    pll.MoveFirst
    Do Until pll.EOF
      tpVer = Nz(pll("V_Naam"))
      Dim tpPlID As Long
      tpPlID = Nz(pll("PLL_PLoeg_ID"))
      
      
      
      
      Dim volg As Integer, isRes As Boolean, startnr As String, opm As String
      Dim est As Long
      est = Nz(pll("AUX_Estafettenummer"))
      volg = Nz(pll("PLL_Volgorde"))
      isRes = Nz(pll("PLL_Reserve"))
      startnr = Nz(pll("AUX_Startnummer"))
      opm = Nz(pll("PLL_DIS"))
      
      If (tpPlID <> curPlID) Then
        outpDln.Seek "=", wednr, prognr, tpVer, est
         curDEIndex = -1
         If Not outpDln.NoMatch Then
           curDEIndex = outpDln("DE_Index")
         End If
         curPlID = tpPlID
      End If
      
           
        
      
      
      
      
      If (curDEIndex <> -1) Then
      'ADD
        outpPl.AddNew
          outpPl("PL_Index") = curDEIndex
          outpPl("PL_Wedstrijdnummer") = wednr
          outpPl("PL_Programmanummer") = prognr
          outpPl("PL_Vereniging") = hzn(tpVer)
          outpPl("PL_Estafettenummer") = est
          outpPl("PL_Startnummer") = hzn(startnr)
          outpPl("PL_Volgorde") = volg
          outpPl("PL_Opm") = hzn(opm)
          
          outpPl("PL_Reserve") = IIf(isRes, "J", "N")
          
          outpPl("PL_QLF_Tijd") = pll("PLL_QLF_Tijd")
          outpPl("PL_QLF_Datum") = pll("PLL_QLF_Datum")
          outpPl("PL_QLF_Plaats") = pll("PLL_QLF_Plaats")
          outpPl("PL_QLF_Baan") = pll("PLL_QLF_Baan")
          outpPl("PL_QLF_WedDescription") = pll("PLL_QLF_WedDescription")
        
        outpPl.Update
      End If
      
      
      
      pll.MoveNext
    Loop
    
    
    
appCleanRS pl
appCleanRS pll

appCleanRS outpDln
appCleanRS outpPl
    
    
    


lnhPrepareProgForEstafs = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
If (Err = 3022) Then
  If (blReadingDeelns) Then
    MsgBox "A duplicate ploeg was found in programmanummer: " & prognr & "." & Chr(13) & _
    "Vereniging: " & curVer & ", Ploegnummer: " & curEstNr & Chr(13) & _
    "Deze fout is NIET fataal, importeren zal gewoon verdergaan.", 16
    Resume Next ' don't care about duplicates, simply ignore.
  Else
    MsgBox "A duplicate ploeglid was found in programmanummer: " & prognr & "." & Chr(13) & _
      "Vereniging: " & tpVer & ", Ploegnummer: " & est & ", Volgorde: " & volg & ", " & Chr(13) & _
      "Startnummer: " & startnr & "." & Chr(13) & _
       "Deze fout is NIET fataal, importeren zal gewoon verdergaan.", 16
    Resume Next ' don't care about duplicates, simply ignore.
  End If
End If
MsgBox Err & " lnhPrepareProgForEstafs" & Error$, 16
Exit Function

'debug
On Error GoTo 0
Resume

Exit Function
End Function



Private Function lnhWriteEstafette(clearAllDlns As Boolean, impDlns As Boolean, impTd As Boolean, clearAllTd As Boolean) As Boolean
On Error GoTo fout
lnhWriteEstafette = False

Dim sql As String

DoCmd.SetWarnings False




'Everything has already been prepared for the estafettes, that is, the deelnemers and ploegen have been inserted.
'all tijden have been deleted, since all estafettes were recreated.

If (impTd) Then
  'have to clear all results.
  
   sql = "SELECT gIMP_LEN_Ver.V_Naam, gIMP_LEN_Tijden.*" & _
        "FROM gIMP_LEN_Tijden INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_Tijden.TY_Ver_ID = gIMP_LEN_Ver.V_ID " & _
         "WHERE (((nz([aux_wedstrijdnummer]))>0) AND ((nz([aux_Programmanummer]))<>"""") AND ((nz([aux_depotnummer])) <> """") AND ((nz([ty_isEstaf]))=true)); "

  
  Dim td As Recordset
  Set td = CurrentDb().OpenRecordset(sql)
  Dim outpTd As Recordset
  Set outpTd = CurrentDb().OpenRecordset("dtTijden")
  
  Dim dln As Recordset
  Set dln = CurrentDb().OpenRecordset("dtDeelnemers")
  
  dln.Index = "est"
  
  outpTd.Index = "TY_Index"
  
  td.MoveFirst
  Do Until td.EOF
    Dim wednr As Long
    Dim prognr As String
    Dim Vereniging As String
  
  
    wednr = Nz(td("AUX_Wedstrijdnummer"))
    prognr = Nz(td("AUX_Programmanummer"))
    Dim est As Long
    est = Nz(td("AUX_Estafettenummer"))
    Vereniging = Nz(td("V_Naam"))
    
    
    'have to find if a deelnemer exists.
    dln.Seek "=", wednr, prognr, Vereniging, est
    
    Dim deIndex As Long
    Dim deBM As String
    
    If (dln.NoMatch) Then
      'we have to append a deelnemer.
      dln.AddNew
        dln("DE_Wedstrijdnummer") = wednr
        dln("DE_Programmanummer") = prognr
        dln("DE_Startnummer") = Null
        dln("DE_Vereniging") = hzn(Vereniging)
        dln("DE_Reserve") = "N"
        
        
        If Nz(td("TY_BM"), False) Then
          deBM = "J"
        Else
          deBM = "N"
        End If
        dln("DE_Buitenmededinging") = hzn(deBM)
        
        
        
        
        dln("DE_Estafettenummer") = est
        dln("DE_Inschrijftijd") = td("TY_Inschrijftijd")
        deIndex = Nz(dln("DE_Index"))
        
        
        dln("DE_Serienummer") = Nz(td("TY_Serienummer"), 0)
        dln("DE_Baan") = Nz(td("TY_Baan"), 0)
        
        
        deBM = "N"
      dln.Update
    Else
      'we need the index & we need to check if TY contains that index.
      deIndex = dln("DE_Index")
      deBM = Nz(dln("DE_Buitenmededinging"))
      
      
      'only update dlnBM if tyBM is set to true and dlnBM is set to fals
      If (Nz(td("TY_BM"), False)) Then
        If (deBM = "N") Then
          deBM = "J"
          dln.Edit
            dln("DE_Buitenmededinging") = hzn(deBM)
          dln.Update
        End If
      End If
      
      'possibly update inschrijftijd
      
      Dim intijd As Double
      Dim curInTijd As Double
      curInTijd = Nz(dln("DE_Inschrijftijd"))
      
      If Not swtIsValid(curInTijd) Then
        intijd = Nz(td("TY_Inschrijftijd"))
        If swtIsValid(intijd) Then
          dln.Edit
          dln("DE_Inschrijftijd") = intijd
          dln.Update
        End If
      End If
      
      
      Dim tpCurBn, tpCurSer As Integer
      tpCurBn = Nz(dln("DE_Baan"), 0)
      tpCurSer = Nz(dln("DE_Serienummer"), 0)
      If (tpCurBn = 0) And (tpCurSer = 0) Then
        dln.Edit
        dln("DE_Serienummer") = Nz(td("TY_Serienummer"), 0)
        dln("DE_Baan") = Nz(td("TY_Baan"), 0)
        dln.Update
      End If
      
      
      
      'If Not clearAllTd Then
        'outpTd.Seek "=", deIndex
        'If Not outpTd.NoMatch Then
           'outpTd.Delete
        'End If
      'End If
      
    End If
    
    
        
    outpTd.AddNew
      
      outpTd("TY_Wedstrijdnummer") = wednr
      outpTd("TY_Programmanummer") = prognr
      outpTd("TY_Estafettenummer") = est
      outpTd("TY_Vereniging") = hzn(Vereniging)
      outpTd("TY_Index") = deIndex
      
      
      outpTd("TY_BM") = hzn(deBM)
      
      outpTd("TY_Eindtijd") = td("TY_Eindtijd")
      outpTd("TY_ExtraTussentijden") = td("TY_ExtraTussentijden")
      outpTd("TY_DIS") = td("TY_DIS")
      outpTd("TY_AB") = td("TY_AB")
      outpTd("TY_Echteplaats") = td("TY_Eindplaats")
      'outpTd("TY_Opm") = td("TY_Opm")
      outpTd("TY_afstand1") = td("TY_Afstand1")
      outpTd("TY_afstand2") = td("TY_Afstand2")
      outpTd("TY_Afstand3") = td("TY_Afstand3")
      outpTd("TY_Afstand4") = td("TY_Afstand4")
      outpTd("TY_Tijd1") = td("TY_Tijd1")
      outpTd("TY_Tijd2") = td("TY_Tijd2")
      outpTd("TY_Tijd3") = td("TY_Tijd3")
      outpTd("TY_Tijd4") = td("TY_Tijd4")
      outpTd("TY_Eindafstand") = td("TY_Eindafstand")
    
    outpTd.Update
    
    
    
    
    
  
    td.MoveNext
  Loop
  
  
  appCleanRS outpTd
  appCleanRS td
  appCleanRS dln
  
  
    
  
End If



If (impDlns) Then
   'update the deelnemer info with inschrijftijden,reserve etc...
  
   sql = "SELECT gIMP_LEN_Ver.V_Naam, gIMP_LEN_Deelnemers.* " & _
        "FROM gIMP_LEN_Deelnemers INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_Deelnemers.DE_Ver_ID = gIMP_LEN_Ver.V_ID " & _
         "WHERE (((nz([aux_wedstrijdnummer]))>0) AND ((nz([aux_Programmanummer]))<>"""") AND ((nz([aux_depotnummer])) <> """") AND ((nz([de_isEstaf]))=true)); "

  
  Set dln = CurrentDb().OpenRecordset(sql)
  
  Dim dlnOutp As Recordset
  Set dlnOutp = CurrentDb().OpenRecordset("dtDeelnemers")
  
  dlnOutp.Index = "est"
  
  dln.MoveFirst
  Do Until dln.EOF
    wednr = Nz(dln("AUX_Wedstrijdnummer"))
    prognr = Nz(dln("AUX_Programmanummer"))
    est = Nz(dln("AUX_Estafettenummer"))
    Vereniging = Nz(dln("V_Naam"))
    
    
    'have to find if a deelnemer exists.
    dlnOutp.Seek "=", wednr, prognr, Vereniging, est
    
    If (Not dlnOutp.NoMatch) Then
      dlnOutp.Edit
      dlnOutp("DE_Inschrijftijd") = dln("DE_Inschrijftijd")
      dlnOutp("DE_Reserve") = IIf(Nz(dln("DE_Reserve")), "J", "N")
      dlnOutp("DE_Buitenmededinging") = IIf(Nz(dln("DE_BM")), "J", "N")
      dlnOutp("DE_Baan") = Nz(dln("DE_Baan"), 0)
      dlnOutp("DE_Serienummer") = Nz(dln("DE_Serienummer"), 0)
      
      
      dlnOutp("DE_QLF_Tijd") = dln("DE_QLF_Tijd")
      dlnOutp("DE_QLF_Baan") = dln("DE_QLF_Baan")
      dlnOutp("DE_QLF_Plaats") = dln("DE_QLF_Plaats")
      dlnOutp("DE_QLF_Datum") = dln("DE_QLF_Datum")
      dlnOutp("DE_QLF_WedDescription") = dln("DE_QLF_WedDescription")
      
      
      dlnOutp.Update
    End If
      
    dln.MoveNext
 Loop
 
 
 appCleanRS dln
 appCleanRS dlnOutp
 
 
 'now update inschrijftijden for the individual ploegleden
 
 
 sql = "SELECT gIMP_LEN_ploegleden.*, gIMP_LEN_Ver.V_Naam " & _
      "FROM (gIMP_LEN_ploegleden INNER JOIN gIMP_LEN_Ploeg ON gIMP_LEN_ploegleden.PLL_Ploeg_ID = gIMP_LEN_Ploeg.PL_ID) INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_Ploeg.PL_VER_ID = gIMP_LEN_Ver.V_ID " & _
      "WHERE (nz([aux_startnummer]) <> """") and (((nz([aux_wedstrijdnummer])) > 0 ) and ((nz([gIMP_LEN_ploegleden].aux_depotnummer)) <> """") AND ((nz([aux_programmanummer])) <> """" ) AND ((nz([pll_deelnemer_id],-1))<>-1)) ;"
       
       
 Dim pll As Recordset
 Set pll = CurrentDb().OpenRecordset(sql, dbOpenDynaset)
 
 Dim pllOutp As Recordset
 Set pllOutp = CurrentDb().OpenRecordset("dtPloegen")
 pllOutp.Index = "PrimaryKey"
 
 
 pll.MoveFirst
 Do Until pll.EOF
   
   Vereniging = Nz(pll("V_Naam"))
   wednr = Nz(pll("AUX_Wedstrijdnummer"))
   prognr = Nz(pll("AUX_Programmanummer"))
   
   Dim tpStart As String
   tpStart = Nz(pll("AUX_Startnummer"))
   
   pllOutp.Seek "=", Vereniging, wednr, prognr, tpStart
   
   If Not pllOutp.NoMatch Then
     pllOutp.Edit
       
       pllOutp("PL_QLF_Tijd") = pll("PLL_QLF_Tijd")
       pllOutp("PL_QLF_Baan") = pll("PLL_QLF_Baan")
       pllOutp("PL_QLF_Plaats") = pll("PLL_QLF_Plaats")
       pllOutp("PL_QLF_Datum") = pll("PLL_QLF_Datum")
       pllOutp("PL_QLF_WedDescription") = pll("PLL_QLF_WedDescription")
      
     pllOutp.Update
   End If
   
 
   pll.MoveNext
 Loop
 
 appCleanRS pll
 appCleanRS pllOutp
 
 
 
End If


DoCmd.SetWarnings True


lnhWriteEstafette = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
DoCmd.SetWarnings True
MsgBox Err & " " & Error$, 16

Exit Function

'debug
On Error GoTo 0
Resume

Exit Function
End Function

Private Function lnhCorrectNames() As Boolean
On Error GoTo fout

lnhCorrectNames = False





Dim wed As Recordset
Set wed = CurrentDb().OpenRecordset("select * from gIMP_LEN_wedstrijden where nz([corr_wedstrijdnummer]) > 0")

wed.MoveFirst
Do Until wed.EOF
  Dim wednr As Long
  wednr = Nz(wed("CORR_WEdstrijdnummer"))
  
  Dim sql As String
  DoCmd.SetWarnings False
  
  sql = "UPDATE dtDeelnemers INNER JOIN dtNamen ON (dtDeelnemers.DE_Vereniging = dtNamen.NA_Vereniging) AND (dtDeelnemers.DE_Startnummer = dtNamen.NA_Startnummer) SET dtDeelnemers.DE_Naam = [na_naam] " & _
     "WHERE (((dtDeelnemers.DE_Wedstrijdnummer)=" & wednr & ")); "
  DoCmd.RunSQL sql
  
  sql = "UPDATE dtPloegen INNER JOIN dtNamen ON (dtPloegen.PL_Vereniging = dtNamen.NA_Vereniging) AND (dtPloegen.PL_Startnummer = dtNamen.NA_Startnummer) SET dtPloegen.PL_Naam = [na_naam] " & _
        "WHERE (((dtPloegen.PL_Wedstrijdnummer)=" & wednr & "));"
  
  DoCmd.RunSQL sql
  
  
  
  DoCmd.SetWarnings True

  
  
  
  wed.MoveNext
Loop


appCleanRS wed


lnhCorrectNames = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " " & Error$, 16
Exit Function

End Function


Public Function lnhImportWedstrijd(ByRef nNewWeds As Integer, ByRef newWedMinNr As Long, ByRef nNewProgs As Integer, ByRef nNewSwimmers As Long) As Boolean
On Error GoTo fout
lnhImportWedstrijd = False

'first read options from gIMP_LEN_options table.
Dim owWed As Boolean, owProgs As Boolean, owVer As Boolean
Dim owZws As Boolean, impDlns As Boolean, impTd As Boolean, clearAllDlns As Boolean, clearAllTd As Boolean
Dim cleanDlnsPerVer As Boolean, cleanTdPerVer As Boolean

Dim inp As Recordset
Set inp = CurrentDb().OpenRecordset("gIMP_LEN_options")
inp.MoveFirst
If (inp.EOF) Then
  Err.Raise 1, , "Internal Error loading Lenex import options."
End If

owWed = Nz(inp("IMP_Overwrite_Wedstrijden"))
owProgs = Nz(inp("IMP_Overwrite_Programmanummers"))
owVer = Nz(inp("IMP_Overwrite_Verenigingen"))
owZws = Nz(inp("IMP_Overwrite_Zwemmers"))

impDlns = Nz(inp("IMP_Deelnemers"))
impTd = Nz(inp("IMP_Tijden"))

clearAllDlns = Nz(inp("IMP_CLEAR_ALL_DEELNEMERS"))
clearAllTd = Nz(inp("IMP_CLEAR_ALL_TIJDEN"))

cleanDlnsPerVer = Nz(inp("IMP_CLEAR_ALL_DEELNEMERS_PER_VER"))
cleanTdPerVer = Nz(inp("IMP_Clear_All_TIjden_Per_Ver"))



appCleanRS inp









'First do all the necessary overwriting.
'swimmers, wedstrijden, programmanummers need to be EDITED, the rest
'can simply be deleted.
If Not lnhWriteWedstrijden(owWed, clearAllDlns, clearAllTd, nNewWeds, newWedMinNr) Then Exit Function

If Not lnhWriteVers(owVer, clearAllDlns, clearAllTd, cleanTdPerVer, cleanDlnsPerVer) Then Exit Function

If Not lnhWriteZwemmers(owZws, nNewSwimmers) Then Exit Function



If Not lnhWriteProgramma(owProgs, impDlns, impTd, cleanDlnsPerVer, cleanTdPerVer, nNewProgs) Then Exit Function





If Not lnhWritePersoonlijk(clearAllDlns, impDlns, impTd, clearAllTd, True) Then Exit Function


If Not lnhWriteEstafette(clearAllDlns, impDlns, impTd, clearAllTd) Then Exit Function

If Not lnhCorrectNames() Then Exit Function



lnhImportWedstrijd = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " " & Error$, 16

Exit Function


'debug
On Error GoTo 0
Resume

Exit Function
End Function



Public Function lnhImportGenerateDefaultZwmImportSettings() As Boolean
lnhImportGenerateDefaultZwmImportSettings = trfGenerateDefaultZwmImportSettings()
End Function

Public Function lnhImportGenerateDefaultProgImportSettings(ByVal impWedAgeDate As Date, ByVal impWedLftMode As String) As Boolean
On Error GoTo fout
lnhImportGenerateDefaultProgImportSettings = False

Dim sql As String
sql = "SELECT gIMP_LEN_Wedstrijden.IMP_Wedstrijdnummer, gIMP_LEN_Programma.* " & _
      "FROM gIMP_LEN_Programma INNER JOIN gIMP_LEN_Wedstrijden ON gIMP_LEN_Programma.PR_WED_ID = gIMP_LEN_Wedstrijden.WE_ID " & _
      "WHERE (((gIMP_LEN_Wedstrijden.IMP_Import)=True));"

Dim impProgs As Recordset
Set impProgs = CurrentDb().OpenRecordset(sql)

Dim curProgs As Recordset
Set curProgs = CurrentDb().OpenRecordset("dtProgramma")
'curProgs.index = "PrimaryKey"


Dim curWedInf As WED_BASIC_INFO
curWedInf.wednr = -1

Dim curWedLftMode As String
Dim curWedAgeDate As Date

impProgs.MoveFirst
Do Until impProgs.EOF
  Dim wednr As Long
  wednr = Nz(impProgs("IMP_Wedstrijdnummer"))
  Dim prognr As String
  prognr = Nz(impProgs("PR_ProgrammaNummer"))
  If (wednr = 0) Then
    impProgs.Edit
      'wedstrijd will be appended -> no progs yet.
      impProgs("IMP_IMPORT") = True
      impProgs("IMP_Programmanummer") = prognr
      impProgs("IMP_INT_Wedstrijdnummer") = Null
      impProgs("IMP_blLftProblem") = False
    impProgs.Update
  Else
  
    If (wednr <> curWedInf.wednr) Then
      Dim tpFnd As Boolean
      If Not wedLookup(wednr, tpFnd, curWedInf) Then
        Exit Function
      End If
      If (Not tpFnd) Then
        curWedInf.wednr = -1
        curWedLftMode = impWedLftMode
        curWedAgeDate = impWedAgeDate
      Else
        curWedLftMode = curWedInf.lftBep
        curWedAgeDate = curWedInf.ageDate
      End If
    End If
  
  
    'find out if the wedstrijd currently already has that programmanummer.
    Dim progIsFixed As Boolean
    progIsFixed = Nz(impProgs("PR_Programmanummer_Fixed"))
    
    
    Dim impProgNr As String
    impProgNr = prognr
    
    
    
    Dim curAf As String, curSl As String, curCat As String, curCmpCat As CAT_COMPILED_INFO
        
    Dim impAf As String, impSl As String, impCat As String, impCmpCat As CAT_COMPILED_INFO
    
    impAf = Nz(impProgs("PR_Afstand"))
    impSl = Nz(impProgs("PR_Slag"))
    impCat = Nz(impProgs("PR_Categorie"))
    
    
    Dim blDummy As Boolean
    If Not ctxCompileCat(impCat, impWedAgeDate, impWedLftMode, False, blDummy, impCmpCat) Then
      Exit Function
    End If
    
    If (progIsFixed) Then
      curProgs.Index = "PrimaryKey"
      curProgs.Seek "=", wednr, prognr
    Else
       curProgs.Index = "len"
       Dim lenID  As Long
       lenID = Nz(impProgs("INT_LEN_ID"))
       curProgs.Seek "=", wednr, lenID
       
       If (curProgs.NoMatch) Then
         'now use normal programmanummer.
          curProgs.Index = "PrimaryKey"
          curProgs.Seek "=", wednr, prognr
       Else
        'modification feb 2007
        'impProgNr = curProgs("PR_Programmanummer")
        
        curAf = Nz(curProgs("PR_AFstand"))
        curSl = Nz(curProgs("PR_Slag"))
        curCat = Nz(curProgs("PR_Categorie"))
        
        
        If Not ctxCompileCat(curCat, curWedAgeDate, curWedLftMode, False, blDummy, curCmpCat) Then
          Exit Function
        End If
        
        
        Dim isMatch As Boolean
        Dim lftBepMinAge As Integer
         
        isMatch = True
         
        'Have to refine matching criteria.
        If (curAf <> impAf Or curSl <> impSl Or curCmpCat.lOldYOB <> impCmpCat.lOldYOB Or curCmpCat.sGes <> impCmpCat.sGes) Then
          isMatch = False
        End If
        
        If (isMatch) Then
          If (curCmpCat.lYngYOB <> impCmpCat.lYngYOB) Then
            
            lftBepMinAge = catGetMinAllowedAgeLftBep(impCmpCat.iAuxOldAge)
            
            'Check to see if the problem of the differing minAges is real; or if it just
            'an artifact of the minimum age.
            
            If (curCmpCat.iAuxYngAge > lftBepMinAge Or impCmpCat.iAuxYngAge > lftBepMinAge) Then
              isMatch = False
            End If
          End If
        End If
        
        
        If (Not isMatch) Then
          'try and use normal programmanummer.
          curProgs.Index = "PrimaryKey"
          curProgs.Seek "=", wednr, prognr
        Else
          impProgNr = curProgs("PR_Programmanummer")
        End If
         
         
       End If
    End If
      
    If (curProgs.NoMatch) Then
        'This guarantees that (wednr, prognr) = (wednr, impProgNr) and that this pair is NOT present in the match.
        impProgs.Edit
          impProgs("IMP_IMPORT") = True
          impProgs("IMP_Programmanummer") = hzn(impProgNr)
          impProgs("IMP_INT_Wedstrijdnummer") = wednr
          impProgs("IMP_blLftProblem") = False
        impProgs.Update
    Else
        'Have to compare the progs.

        curAf = Nz(curProgs("PR_AFstand"))
        curSl = Nz(curProgs("PR_Slag"))
        curCat = Nz(curProgs("PR_Categorie"))
        
        If Not ctxCompileCat(curCat, curWedAgeDate, curWedLftMode, False, blDummy, curCmpCat) Then
          Exit Function
        End If
        
        Dim isAfSlMatch As Boolean
        
        isMatch = True
        isAfSlMatch = True
        
        
        If (progIsFixed And impAf = "100" And impSl = "RUG" And impCat = "MIX") Then
          'import from was2005 -> treat as exact match
        Else
         
          'Have to refine matching criteria.
          If (curAf <> impAf Or curSl <> impSl Or curCmpCat.sGes <> impCmpCat.sGes) Then
            isAfSlMatch = False
            isMatch = False
          End If
          
          If (isMatch) Then
            If (curCmpCat.lOldYOB <> impCmpCat.lOldYOB) Then
              isMatch = False
            End If
          End If
            
          
          If (isMatch) Then
            If (curCmpCat.lYngYOB <> impCmpCat.lYngYOB) Then
              lftBepMinAge = catGetMinAllowedAgeLftBep(impCmpCat.iAuxOldAge)
              
              'Check to see if the problem of the differing minAges is real; or if it just
              'an artifact of the minimum age.
              
              If (curCmpCat.iAuxYngAge > lftBepMinAge Or impCmpCat.iAuxYngAge > lftBepMinAge) Then
                isMatch = False
              End If
            End If
          End If
          
        End If
        
        
        If (isMatch) Then
          impProgs.Edit
            impProgs("IMP_Import") = True
            impProgs("IMP_Programmanummer") = hzn(impProgNr)
            impProgs("IMP_INT_Wedstrijdnummer") = wednr
            impProgs("IMP_blLftProblem") = False
          impProgs.Update
        ElseIf (isAfSlMatch) Then
          impProgs.Edit
            impProgs("IMP_IMPORT") = True
            impProgs("IMP_Programmanummer") = hzn(impProgNr)
            impProgs("IMP_INT_Wedstrijdnummer") = wednr
            impProgs("IMP_blLftProblem") = True
          impProgs.Update
        Else
          impProgs.Edit
            impProgs("IMP_IMPORT") = True
            impProgs("IMP_Programmanummer") = Null 'meaning: need to generate one.
            impProgs("IMP_INT_Wedstrijdnummer") = wednr
            impProgs("IMP_blLftProblem") = False
          impProgs.Update
        End If
    End If
  End If
  
  
  impProgs.MoveNext
Loop
      


appCleanRS impProgs
appCleanRS curProgs


lnhImportGenerateDefaultProgImportSettings = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " lnhImportGenerateDefaultProgImportSettings" & Error$, 16

Exit Function

'debug
On Error GoTo 0
Resume

Exit Function
End Function




Private Function lnhImportGenerateDefaultImportSettings_wed(ByRef impWedDate As Date, ByRef impWedLftMode As String, ByRef impWedAgeDate As Date, isWedOpened As Boolean, openWedNr As Long, openWedDat As Date, openWedTime As Date, openWedIsMeet As Boolean, openWedMeetNr As Long) As Boolean
On Error GoTo fout
lnhImportGenerateDefaultImportSettings_wed = False



Dim impWed As Recordset
Set impWed = CurrentDb().OpenRecordset("gIMP_LEN_wedstrijden")

impWed.MoveLast

Dim nImpWeds As Integer
nImpWeds = impWed.RecordCount




  Dim wed As Recordset
  Set wed = CurrentDb().OpenRecordset("dtWedstrijdGegevens", dbOpenDynaset)
  
  Dim isFirst As Boolean
  isFirst = True

  
  impWed.MoveFirst
  Do Until impWed.EOF
    Dim dat As Date, lftMode As String
    dat = Nz(impWed("WE_Datum"), #1/1/1900#)
    lftMode = Nz(impWed("WE_Leeftijdsbepaling"))
    
    If (isFirst) Then
      impWedDate = dat
      impWedLftMode = lftMode
      impWedAgeDate = Nz(impWed("WE_Leeftijdsdatum"), #1/1/1900#)
      If (Not lenDateIsValid(impWedAgeDate)) Then
        impWedAgeDate = impWedDate
      End If
      isFirst = False
    End If
    
    
    Dim Plaats As String
    Plaats = Nz(impWed("WE_Plaats"))
    Dim bn As Integer
    bn = Nz(impWed("WE_Baanlengte"))
    
    Dim avst As Date
    avst = Nz(impWed("WE_Aanvang"), #12:00:00 AM#)
    
    
    Dim blImport As Boolean
    Dim blImpUseWedNr As Boolean
    Dim lImpWedNr As Long
    Dim blHandled As Boolean
    blHandled = False
    
    blImport = False
    blImpUseWedNr = False
    
    
    
    
    'First check if we can simply attribute this wedstrijd to the opened match.
    If (nImpWeds = 1) And (isWedOpened) And (Not openWedIsMeet) Then
      Dim blIsMatch As Boolean
      blIsMatch = True
      If Format(openWedDat, "mm\-dd\-yyyy") <> Format(dat, "mm\-dd\-yyyy") Then
        blIsMatch = False
      End If
      
      If (blIsMatch) Then
        If (Format(openWedTime, "hh:nn") <> "00:00") And (Format(avst, "hh:nn") <> "00:00") Then
          If avst <> openWedTime Then
            blIsMatch = False
          End If
        End If
      End If
      
      If (blIsMatch) Then
        blImport = True
        blImpUseWedNr = True
        lImpWedNr = openWedNr
        blHandled = True
      End If
      
      
    End If
    
    
    
    If Not blHandled Then
        'do NOT search on plaats.
        wed.FindFirst "WE_Datum = #" & Format(dat, "mm\-dd\-yyyy") & "# and we_baanlengte = " & bn & " and format([we_aanvang],""hh:nn"") = """ & Format(avst, "hh:nn") & """"
        If wed.NoMatch Then
          If Not isWedOpened Then
            blImport = True
          End If
        Else
        
          'OK; we know what wedstrijdnummer to use. Only question is if we should import.
          If (Nz(wed("WE_Wedstrijdnummer"), -1) >= 0) Then
            blImpUseWedNr = True
            lImpWedNr = wed("WE_Wedstrijdnummer")
          End If
        
          If Not isWedOpened Then
            blImport = True
          Else
            blImport = False
            If (openWedIsMeet) Then
              If (Nz(wed("WE_Wedstrijdnummer")) = openWedMeetNr Or Nz(wed("WE_MainWedstrijdNummer")) = openWedMeetNr) Then
                blImport = True
              End If
            ElseIf (Nz(wed("WE_Wedstrijdnummer")) = openWedNr) Then
              blImport = True
            End If
          End If 'if not isWedOpened
          
        End If 'if wed.nomatch
    End If 'if not blHandled
    
    impWed.Edit
      impWed("IMP_Import") = blImport
      If (blImpUseWedNr) Then
        impWed("IMP_Wedstrijdnummer") = lImpWedNr
      Else
        impWed("IMP_Wedstrijdnummer") = Null
      End If
    impWed.Update
    
    
    
    impWed.MoveNext
  Loop


appCleanRS impWed
appCleanRS wed









lnhImportGenerateDefaultImportSettings_wed = True
Exit Function

fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " lnhImportGenerateDefaultImportSettings_wed" & Error$, 16
End Function


Public Function lnhImportGenerateDefaultImportSettings(ByRef impWedDate As Date, ByRef impWedLftMode As String, ByRef impWedAgeDate As Date, isWedOpened As Boolean, openWedNr As Long, openWedDat As Date, openWedTime As Date, openWedIsMeet As Boolean, openWedMeetNr As Long) As Boolean
On Error GoTo fout
lnhImportGenerateDefaultImportSettings = False



If Not lnhImportGenerateDefaultImportSettings_wed(impWedDate, impWedLftMode, impWedAgeDate, isWedOpened, openWedNr, openWedDat, openWedTime, openWedIsMeet, openWedMeetNr) Then
  Exit Function
End If


If Not trfGenerateDefaultVerImportSettings() Then
  Exit Function
End If


If Not trfGenerateDefaultOptsImportSettings() Then
  Exit Function
End If





lnhImportGenerateDefaultImportSettings = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " " & Error$, 16

Exit Function

'debug
On Error GoTo 0
Resume

End Function






Public Function lnhProcessUserImportSettings() As Boolean
On Error GoTo fout
lnhProcessUserImportSettings = False



If Not trfProcessWedImportSettings() Then
  Exit Function
End If


If Not trfProcessVerImportSettings() Then
  Exit Function
End If

If Not trfProcessProgImportSettings() Then
  Exit Function
End If

If Not trfProcessZwmImportSettings() Then
  Exit Function
End If


lnhProcessUserImportSettings = True
Exit Function

fout:
MsgBox Err & " lnhProcessUserImportSettings" & Error$, 16
Exit Function

End Function






Public Function lnhTransferTimes_checkWed(ByVal wednr As Long, ByRef blCannotProcessWed As Boolean) As Boolean
On Error GoTo fout
lnhTransferTimes_checkWed = False


blCannotProcessWed = False


lnhTransferTimes_checkWed = True
Exit Function

fout:
MsgBox Err & " lnhTransferTimes_processWed" & vbCrLf & Error$, 16
Exit Function
End Function


Public Function lnhTransferTimes_Init(ByRef lnhTransferdata As LNH_TRANSFER_DATA) As Boolean
On Error GoTo fout
lnhTransferTimes_Init = False



lnhTransferTimes_Init = True
Exit Function

fout:
MsgBox Err & " lnhTransferTimes_init" & vbCrLf & Error$, 16
Exit Function
End Function
Public Function lnhTransferTimes_processWed(ByRef lnhTransferdata As LNH_TRANSFER_DATA, ByVal wednr As Long) As Boolean
On Error GoTo fout
lnhTransferTimes_processWed = False


lnhTransferTimes_processWed = True
Exit Function

fout:
MsgBox Err & " lnhTransferTimes_processWed" & vbCrLf & Error$, 16
Exit Function
End Function
Public Function lnhTransferTimes_Clean(ByRef lnhTransferdata As LNH_TRANSFER_DATA) As Boolean
On Error GoTo fout
lnhTransferTimes_Clean = False


lnhTransferTimes_Clean = True
Exit Function

fout:
MsgBox Err & " lnhTransferTimes_Clean" & vbCrLf & Error$, 16
Exit Function
End Function


Public Function lnhDisplaySuccessMessage(ByRef lnhTransferdata As LNH_TRANSFER_DATA, ByRef lxImpStats As LX_IMP_STATS) As Boolean
On Error GoTo fout
lnhDisplaySuccessMessage = False


Dim msg As String
msg = "Er zijn met succes " & lxImpStats.nImpWed & " wedstrijd(en) geimporteerd."
If (lxImpStats.nNewWeds > 0) Then
  msg = msg & Chr(13) & "Als gevolg hiervan zijn er: " & lxImpStats.nNewWeds & " nieuwe wedstrijden aangemaakt in het bestand," & Chr(13) & _
  "met wedstrijdnummers: " & lxImpStats.newWedMinNr & " en hoger."
End If
If (lxImpStats.nNewProgs > 0) Then
  msg = msg & vbCrLf & vbCrLf & "Er zijn: " & lxImpStats.nNewProgs & " nieuwe programmanummers toegevoegd."
End If
If (lxImpStats.nNewSwimmer > 0) Then
  msg = msg & vbCrLf & vbCrLf & "Er zijn: " & lxImpStats.nNewSwimmer & " nieuwe zwemmers toegevoegd."
End If


MsgBox msg, vbInformation + vbOKOnly


lnhDisplaySuccessMessage = True
Exit Function

fout:
MsgBox Err & " lnhDisplaySuccessMessage" & vbCrLf & Error$, 16
Exit Function

End Function