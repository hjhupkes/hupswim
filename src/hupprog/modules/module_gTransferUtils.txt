Option Compare Database
Option Explicit

Public Const TRANSFER_DS_ABORT = 0
Public Const TRANSFER_DS_MERGE = 1
Public Const TRANSFER_DS_MERGE_ALL = 2
Public Const TRANSFER_DS_MARK_NO_IMPORT = 3
Public Const TRANSFER_DS_MARK_NO_IMPORT_ALL = 4

Public Const TRANSFER_IS_ABORT = 0
Public Const TRANSFER_IS_CORRECT = 1
Public Const TRANSFER_IS_MARK_NO_IMPORT = 3
Public Const TRANSFER_IS_MARK_NO_IMPORT_ALL = 4



Public Function trfRepairInvalidStartnummers() As Boolean
On Error GoTo fout
trfRepairInvalidStartnummers = False



'Find all swimmers that have been selected for import and scan for invalid startnummers

Dim sql As String
sql = "select gIMP_LEN_zwemmers.*, gIMP_LEN_ver.v_naam from gIMP_LEN_Zwemmers inner join gIMP_LEN_ver on [gIMP_LEN_zwemmers].zw_ver_id = [gIMP_LEN_ver].v_id where [gIMP_LEN_ver].imp_Import and [gIMP_LEN_Zwemmers].IMP_Import order by v_naam;"

Dim zwms As Recordset
Set zwms = CurrentDb().OpenRecordset(sql)


Dim blAborted As Boolean
blAborted = False

Dim blUserMarkNoImportAll As Boolean
blUserMarkNoImportAll = False


zwms.MoveFirst
Do Until zwms.EOF

  Dim tpOrgStart As String
  Dim tpImpStart As String
  Dim tpStart As String
  
  tpOrgStart = Nz(zwms("ZW_Startnummer"))
  tpImpStart = Nz(zwms("IMP_Startnummer"))
  
  tpStart = tpImpStart
  If (tpImpStart = "") Then
    tpStart = tpOrgStart
  End If
  
  
  
  Dim blShouldPrompt As Boolean
  blShouldPrompt = False
  
  If (Not lenIsValidStartnr(tpStart)) Then
    blShouldPrompt = True
  End If
  
  
    
  Dim blMarkNoInput As Boolean
  blMarkNoInput = False
  
  Dim blChangeStartnr As Boolean
  blChangeStartnr = False
  
  Dim sNewStartnr As String
  sNewStartnr = ""
    
  If (blShouldPrompt) Then
    If (Not blUserMarkNoImportAll) And (Not blAborted) Then
      Dim tpFullName As String, tpVer As String
      tpVer = Nz(zwms("V_Naam"))
      tpFullName = fmtName(Nz(zwms("ZW_Voornaam")), Nz(zwms("ZW_Voegsel")), Nz(zwms("ZW_Achternaam")))
      
      Dim iOption As Integer, blAbortAfterMark As Boolean
      If Not lenPromptInvalidSwimmer(tpVer, tpStart, tpFullName, sNewStartnr, iOption, blAbortAfterMark) Then
        Exit Function
      End If
      
      If (iOption = TRANSFER_IS_ABORT) Then
        blAborted = True
      ElseIf (iOption = TRANSFER_IS_CORRECT) Then
        If (lenIsValidStartnr(sNewStartnr)) Then
          blChangeStartnr = True
        Else
          blMarkNoInput = True
        End If
      ElseIf (iOption = TRANSFER_IS_MARK_NO_IMPORT) Then
        blMarkNoInput = True
        If (blAbortAfterMark) Then
          blAborted = True
        End If
      ElseIf (iOption = TRANSFER_IS_MARK_NO_IMPORT_ALL) Then
        blMarkNoInput = True
        blUserMarkNoImportAll = True
        If (blAbortAfterMark) Then
          blAborted = True
        End If
      End If
    ElseIf (blUserMarkNoImportAll) Then
      blMarkNoInput = True
    End If
  End If 'if blShouldPrompt
    
  If (blMarkNoInput) Then
    zwms.Edit
      zwms("IMP_Import") = False
    zwms.Update
  ElseIf (blChangeStartnr) Then
    If Not lenIsValidStartnr(sNewStartnr) Then
      Err.Raise 1, , "Internal error"
    End If
    
    zwms.Edit
      zwms("IMP_Startnummer") = hzn(sNewStartnr)
    zwms.Update
  End If
  
  zwms.MoveNext
Loop


appCleanRS zwms

If (blAborted) Then
  Exit Function
End If

trfRepairInvalidStartnummers = True

Exit Function
fout:
If (Err = 3021) Then Resume Next ' no current record.
MsgBox Err & " trfRepairInvalidStartnummers" & vbCrLf & Error$, 16
Exit Function
End Function


Public Function trfRepairDuplicateStartnummers(ByVal blMergeCloseDupStartsSilently As Boolean) As Boolean
On Error GoTo fout
trfRepairDuplicateStartnummers = False


'Need to find duplicate startnummers

Dim sql As String
sql = "select gIMP_LEN_zwemmers.*, gIMP_LEN_ver.v_naam from gIMP_LEN_Zwemmers inner join gIMP_LEN_ver on [gIMP_LEN_zwemmers].zw_ver_id = [gIMP_LEN_ver].v_id where [gIMP_LEN_ver].imp_Import and [gIMP_LEN_Zwemmers].imp_import order by v_naam, iif(nz([imp_startnummer]) = """", [zw_startnummer], [imp_startnummer]);"

Dim zwms As Recordset
Set zwms = CurrentDb().OpenRecordset(sql)




Dim lastImpStartnummer As String
Dim lastImpVer As String
Dim lastImpNormName As String
Dim lastImpFullName As String
Dim lastImpBookmark

lastImpStartnummer = ""
lastImpVer = ""
lastImpNormName = ""
lastImpFullName = ""


Dim blUserMergeAll As Boolean
blUserMergeAll = False

Dim blUserMarkNoImportAll As Boolean
blUserMarkNoImportAll = False

Dim blAborted As Boolean
blAborted = False

zwms.MoveFirst
Do Until zwms.EOF
  
  Dim tpVer As String
  tpVer = Nz(zwms("V_Naam"))
  
  Dim tpOrgStart As String
  Dim tpImpStart As String
  Dim tpStart As String
  
  tpOrgStart = Nz(zwms("ZW_Startnummer"))
  tpImpStart = Nz(zwms("IMP_Startnummer"))
  
  tpStart = tpImpStart
  If (tpImpStart = "") Then
    tpStart = tpOrgStart
  End If
  
  
  

  Dim tpNormName As String, tpFullName As String
  tpNormName = Nz(zwms("ZW_Voornaam")) & Nz(zwms("ZW_Achternaam"))
  tpFullName = fmtName(Nz(zwms("ZW_Voornaam")), Nz(zwms("ZW_Voegsel")), Nz(zwms("ZW_Achternaam")))
  
  If (tpStart = lastImpStartnummer) And (tpVer = lastImpVer) Then
    
    Dim blShouldPrompt As Boolean
    blShouldPrompt = True
    If (blMergeCloseDupStartsSilently) Then
      Dim iEditDistance As Integer
      iEditDistance = strEditDistance(tpNormName, lastImpNormName)
      If (iEditDistance >= 0) And (iEditDistance <= 4) Then
        blShouldPrompt = False
      End If
      
    End If
    
    Dim blMarkNoInput As Boolean
    blMarkNoInput = False
    
    If (blShouldPrompt) Then
      If (Not blUserMergeAll) And (Not blUserMarkNoImportAll) And (Not blAborted) Then
        Dim iOption As Integer, blAbortAfterMark As Boolean
        If Not lenPromptDuplicateSwimmer(tpVer, tpStart, lastImpFullName, tpFullName, iOption, blAbortAfterMark) Then
          Exit Function
        End If
      
        If (iOption = TRANSFER_DS_MERGE_ALL) Then
          blUserMergeAll = True
        ElseIf (iOption = TRANSFER_DS_ABORT) Then
          blAborted = True
        ElseIf (iOption = TRANSFER_DS_MARK_NO_IMPORT) Then
          blMarkNoInput = True
          If (blAbortAfterMark) Then
            blAborted = True
          End If
        ElseIf (iOption = TRANSFER_DS_MARK_NO_IMPORT_ALL) Then
          blMarkNoInput = True
          blUserMarkNoImportAll = True
          If (blAbortAfterMark) Then
            blAborted = True
          End If
        End If
      ElseIf (blUserMarkNoImportAll) Then
        blMarkNoInput = True
      End If
    End If
    
    If (blMarkNoInput) Then
      Dim tpCurBookmark
      tpCurBookmark = zwms.Bookmark
      
      zwms.Bookmark = lastImpBookmark
      zwms.Edit
        zwms("IMP_Import") = False
      zwms.Update
      
      zwms.Bookmark = tpCurBookmark
      zwms.Edit
        zwms("IMP_Import") = False
      zwms.Update
    End If
    
    
  End If 'if ver = lastVer and start = lastStart
  
  lastImpStartnummer = tpStart
  lastImpVer = tpVer
  lastImpNormName = tpNormName
  lastImpFullName = tpFullName
  lastImpBookmark = zwms.Bookmark
  

  zwms.MoveNext
Loop


appCleanRS zwms


If (blAborted) Then
  Exit Function
End If

trfRepairDuplicateStartnummers = True

Exit Function
fout:
If (Err = 3021) Then Resume Next ' no current record.
MsgBox Err & " trfRepairDuplicateStartnummers" & vbCrLf & Error$, 16
Exit Function

'debug
On Error GoTo 0
Resume

End Function




Private Function lenPromptInvalidSwimmer(ByVal sVer As String, ByVal sStart As String, ByVal sName As String, ByRef sNewStart As String, ByRef iOption As Integer, ByRef blAbortAfterMark) As Boolean
On Error GoTo fout
lenPromptInvalidSwimmer = False

Dim sql As String
sql = "Delete * from gIMP_LEN_DLG_InvalidSwimmer;"

DoCmd.SetWarnings False
DoCmd.RunSQL sql
DoCmd.SetWarnings True

Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset("gIMP_LEN_DLG_InvalidSwimmer")

rs.AddNew
  rs("IS_Option") = TRANSFER_IS_MARK_NO_IMPORT
  rs("IS_AbortAfterMarking") = False
  rs("IS_Startnummer") = hzn(sStart)
  rs("IS_Vereniging") = hzn(sVer)
  rs("IS_Naam") = hzn(sName)
  rs("IS_NewStartnummer") = Null
rs.Update

DoCmd.OpenForm "gIMP_LEN_DLG_InvalidSwimmer", , , , , acDialog

iOption = Nz(DLookup("IS_Option", "gIMP_LEN_DLG_InvalidSwimmer"), TRANSFER_IS_ABORT)
blAbortAfterMark = Nz(DLookup("IS_AbortAfterMarking", "gIMP_LEN_DLG_InvalidSwimmer"), False)
sNewStart = Nz(DLookup("IS_NewStartnummer", "gIMP_LEN_DLG_InvalidSwimmer"), False)


lenPromptInvalidSwimmer = True
Exit Function

fout:
DoCmd.SetWarnings True
MsgBox Err & " lenPromptInvalidSwimmer" & vbCrLf & Error$, 16
Exit Function
End Function





Private Function lenPromptDuplicateSwimmer(ByVal sVer As String, ByVal sStart As String, ByVal sNameA As String, ByVal sNameB As String, ByRef iOption As Integer, ByRef blAbortAfterMark) As Boolean
On Error GoTo fout
lenPromptDuplicateSwimmer = False

Dim sql As String
sql = "Delete * from gIMP_LEN_DLG_DuplicateSwimmer;"

DoCmd.SetWarnings False
DoCmd.RunSQL sql
DoCmd.SetWarnings True

Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset("gIMP_LEN_DLG_DuplicateSwimmer")

rs.AddNew
  rs("DS_Option") = TRANSFER_DS_MERGE
  rs("DS_AbortAfterMarking") = False
  rs("DS_Startnummer") = hzn(sStart)
  rs("DS_Vereniging") = hzn(sVer)
  rs("DS_NaamA") = hzn(sNameA)
  rs("DS_NaamB") = hzn(sNameB)
rs.Update

DoCmd.OpenForm "gIMP_LEN_DLG_DuplicateSwimmer", , , , , acDialog

iOption = Nz(DLookup("DS_Option", "gIMP_LEN_DLG_DuplicateSwimmer"), TRANSFER_DS_ABORT)
blAbortAfterMark = Nz(DLookup("DS_AbortAfterMarking", "gIMP_LEN_DLG_DuplicateSwimmer"), False)



lenPromptDuplicateSwimmer = True
Exit Function

fout:
DoCmd.SetWarnings True
MsgBox Err & " lenPromptDuplicateSwimmer" & vbCrLf & Error$, 16
Exit Function
End Function


Public Function lenQuickStart(defDir As String) As Boolean
On Error GoTo fout
lenQuickStart = False

Dim fName As String


If (DirectoryExists(directory_goedmaak(defDir))) Then
  fName = directory_goedmaak(defDir) & "\*.l?f"
Else
  fName = "c:\*.l?f"
End If


If Not fileNamePromptUser(FILE_DLG_OPEN, "Lenex file inlezen ", "Lenex bestanden (*.lef, *.lxf)|*.l?f", fName, True, True) Then
  Exit Function
End If

If FileExists(fName) Then
  If Not lenHandleCompleteImportSequence(extractFilePath(fName), extractFileName(fName), False, -1, #1/1/1900#, #12:00:00 AM#, False, -1) Then
    Exit Function
  End If
End If




lenQuickStart = True
Exit Function

fout:
MsgBox Err & " " & Error$, 16
End Function


Private Function lenImportKNZBFiles_prepareImport(tbName As String, depotFName As String, blSingleClub As Boolean, sClubDepot As String, blAll As Boolean, blImpRegion() As Boolean)
On Error GoTo fout
lenImportKNZBFiles_prepareImport = False

Dim sql As String

DoCmd.SetWarnings False
If (blSingleClub) Then
  sql = "Delete * from [" & tbName & "] where [" & depotFName & "] <> """ & sClubDepot & """;"
  DoCmd.RunSQL sql
ElseIf (blAll) Then
 'do nothing
Else
  Dim i As Integer
    For i = 1 To REG_N_REGIONS
    If Not blImpRegion(i) Then
      sql = "Delete * from [" & tbName & "] where [" & depotFName & "] like """ & Format(i, "00") & "[-]*"";"
      DoCmd.RunSQL sql
    End If
  Next i
End If
DoCmd.SetWarnings True


lenImportKNZBFiles_prepareImport = True
Exit Function
fout:
MsgBox Err & " lenImportKNZBFiles_prepareImport" & vbCrLf & Error$, 16
Exit Function

End Function

Private Function lenImportKNZBFiles_importClubs(clubLxfFName As String, blSingleClub As Boolean, sClubDepot As String, blAll As Boolean, blImpRegion() As Boolean) As Boolean
On Error GoTo fout
lenImportKNZBFiles_importClubs = False

If Not lenReadFile(extractFilePath(clubLxfFName), extractFileName(clubLxfFName), False) Then
  Exit Function
End If

If Not lenImportKNZBFiles_prepareImport("gIMP_LEN_ver", "V_depot", blSingleClub, sClubDepot, blAll, blImpRegion) Then
  Exit Function
End If

If Not lnhKNZBImpVers() Then
  Exit Function
End If


lenImportKNZBFiles_importClubs = True
Exit Function
fout:
MsgBox Err & " lenImportKNZBFiles_importClubs" & vbCrLf & Error$, 16
Exit Function
End Function

Private Function lenImportKNZBFiles_importZwms(zwmLxfFName As String, blSingleClub As Boolean, sClubDepot As String, blAll As Boolean, blImpRegion() As Boolean) As Boolean
On Error GoTo fout
lenImportKNZBFiles_importZwms = False

If Not lenReadFile(extractFilePath(zwmLxfFName), extractFileName(zwmLxfFName), False) Then
  Exit Function
End If

If Not lenImportKNZBFiles_prepareImport("gIMP_LEN_zwemmers", "ZW_FlatClubCode", blSingleClub, sClubDepot, blAll, blImpRegion) Then
  Exit Function
End If

If Not lnhKNZBImpZwemmers() Then
  Exit Function
End If

lenImportKNZBFiles_importZwms = True
Exit Function
fout:
MsgBox Err & " lenImportKNZBFiles_importZwms" & vbCrLf & Error$, 16
Exit Function
End Function

Private Function lenImportKNZBFiles_importOffs(offLxfFName As String, blSingleClub As Boolean, sClubDepot As String, blAll As Boolean, blImpRegion() As Boolean) As Boolean
On Error GoTo fout
lenImportKNZBFiles_importOffs = False

If Not lenReadFile(extractFilePath(offLxfFName), extractFileName(offLxfFName), True) Then
  Exit Function
End If

If Not lenImportKNZBFiles_prepareImport("gIMP_LEN_officials", "OFF_FlatClubCode", blSingleClub, sClubDepot, blAll, blImpRegion) Then
  Exit Function
End If

If Not lnhKNZBImpOfficials() Then
  Exit Function
End If

lenImportKNZBFiles_importOffs = True
Exit Function
fout:
MsgBox Err & " lenImportKNZBFiles_importOffs" & vbCrLf & Error$, 16
Exit Function
End Function


'blImpRegion should be a 1..12 array, corresponding to the 12 kringen.
Public Function lenImportKNZBFiles(blImpZwemmers As Boolean, blImpOffs As Boolean, blSingleClub As Boolean, sClubDepot As String, blAll As Boolean, blImpRegion() As Boolean) As Boolean
On Error GoTo fout
lenImportKNZBFiles = False

'Need to download the files.
Dim clubLXF As String
Dim zwmLXF As String
Dim offLXF As String

clubLXF = downloadFile("http://lijsten.knzb.nl/clubs.lxf")
If (clubLXF = "") Then
  Err.Raise 1, , "Error downloading file: http://lijsten.knzb.nl/clubs.lxf"
  Exit Function
End If

If (blImpZwemmers) Then
  zwmLXF = downloadFile("http://lijsten.knzb.nl/athletes_zwemmen.lxf")
  If (zwmLXF = "") Then
    Err.Raise 1, , "Error downloading file: http://lijsten.knzb.nl/athletes_zwemmen.lxf"
    Exit Function
  End If
End If

If (blImpOffs) Then
  offLXF = downloadFile("http://lijsten.knzb.nl/officials_zwemmen.lxf")
  If (offLXF = "") Then
    Err.Raise 1, , "Error downloading file: http://lijsten.knzb.nl/officials_zwemmen.lxf"
    Exit Function
  End If
End If


If Not lenImportKNZBFiles_importClubs(clubLXF, blSingleClub, sClubDepot, blAll, blImpRegion) Then
  Exit Function
End If


If (blImpZwemmers) Then
  If Not lenImportKNZBFiles_importZwms(zwmLXF, blSingleClub, sClubDepot, blAll, blImpRegion) Then
    Exit Function
  End If
End If
 
If (blImpOffs) Then
  If Not lenImportKNZBFiles_importOffs(offLXF, blSingleClub, sClubDepot, blAll, blImpRegion) Then
    Exit Function
  End If
End If





lenImportKNZBFiles = True
Exit Function
fout:
MsgBox Err & " lenImportKNZBFiles" & vbCrLf & Error$, 16
Exit Function
End Function



'This function is used during the import sequence to fill the AUX fields with information.
Public Function lenFillAuxFields() As Boolean
On Error GoTo fout
lenFillAuxFields = False

DoCmd.SetWarnings False
'start with programma.
Dim sql As String

sql = "UPDATE gIMP_LEN_Programma INNER JOIN gIMP_LEN_Wedstrijden ON gIMP_LEN_Programma.PR_WED_ID = gIMP_LEN_Wedstrijden.WE_ID SET gIMP_LEN_Programma.AUX_Wedstrijdnummer = [corr_wedstrijdnummer];"
DoCmd.RunSQL sql

'update aux_vorig_prog field.
sql = "UPDATE gIMP_LEN_Programma INNER JOIN gIMP_LEN_Programma AS gIMP_LEN_Programma_1 ON gIMP_LEN_Programma.PR_Vorig_Prog_ID = gIMP_LEN_Programma_1.PR_ID SET gIMP_LEN_Programma.AUX_Vorig_Prog = [gIMP_LEN_programma_1].[corr_programmanummer];"
DoCmd.RunSQL sql

'update zwemmer_depot nr field
sql = "UPDATE gIMP_LEN_Zwemmers INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_Zwemmers.ZW_VER_ID = gIMP_LEN_Ver.V_ID SET gIMP_LEN_Zwemmers.AUX_Depotnummer = [CORR_DEPOT];"
DoCmd.RunSQL sql

'update ploeg_depot nr field.
sql = "UPDATE gIMP_LEN_Ploeg INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_Ploeg.PL_VER_ID = gIMP_LEN_Ver.V_ID SET gIMP_LEN_Ploeg.AUX_Depotnummer = [CORR_DEPOT];"
DoCmd.RunSQL sql

'update deelneemr_depot nr field.
sql = "UPDATE gIMP_LEN_Deelnemers INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_Deelnemers.DE_VER_ID = gIMP_LEN_Ver.V_ID SET gIMP_LEN_Deelnemers.AUX_Depotnummer = [CORR_DEPOT];"
DoCmd.RunSQL sql
'update tijden  depot nr field
sql = "UPDATE gIMP_LEN_Tijden INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_Tijden.TY_VER_ID = gIMP_LEN_Ver.V_ID SET gIMP_LEN_Tijden.AUX_Depotnummer = [CORR_DEPOT];"
DoCmd.RunSQL sql

'update archiefTijden depot nr field
sql = "UPDATE gIMP_LEN_ArchiefTijden INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_ArchiefTijden.TD_VER_ID = gIMP_LEN_Ver.V_ID SET gIMP_LEN_ArchiefTijden.AUX_Depotnummer = [CORR_DEPOT];"
DoCmd.RunSQL sql




'programmanummers wedstrijd nr field
sql = "UPDATE gIMP_LEN_Wedstrijden INNER JOIN gIMP_LEN_Programma ON gIMP_LEN_Wedstrijden.WE_ID = gIMP_LEN_Programma.PR_WED_ID SET gIMP_LEN_Programma.AUX_Wedstrijdnummer = [corr_wedstrijdnummer];"
DoCmd.RunSQL sql

'archief tijden wedstrijd nr field
sql = "UPDATE gIMP_LEN_ArchiefTijden INNER JOIN gIMP_LEN_Wedstrijden ON gIMP_LEN_ArchiefTijden.TD_WED_ID = gIMP_LEN_Wedstrijden.WE_ID SET gIMP_LEN_Archieftijden.AUX_Wedstrijdnummer = [corr_wedstrijdnummer];"
DoCmd.RunSQL sql


'leeftijdsgroepen wedstrijd nr + programmanr fields
sql = "UPDATE (gIMP_LEN_Leeftijdsgroepen INNER JOIN gIMP_LEN_Programma ON gIMP_LEN_Leeftijdsgroepen.LF_PR_ID = gIMP_LEN_Programma.PR_ID) INNER JOIN gIMP_LEN_Wedstrijden " & _
"ON gIMP_LEN_Programma.PR_WED_ID = gIMP_LEN_Wedstrijden.WE_ID SET gIMP_LEN_Leeftijdsgroepen.AUX_Programmanummer = [corr_programmanummer], " & _
"gIMP_LEN_Leeftijdsgroepen.AUX_Wedstrijdnummer = [corr_wedstrijdnummer];"
DoCmd.RunSQL sql


'deelnemers wedstrijd nr + programmanr fields
sql = "UPDATE (gIMP_LEN_Deelnemers INNER JOIN gIMP_LEN_Programma ON gIMP_LEN_Deelnemers.DE_PROG_ID = gIMP_LEN_Programma.PR_ID) INNER JOIN gIMP_LEN_Wedstrijden " & _
"ON gIMP_LEN_Programma.PR_WED_ID = gIMP_LEN_Wedstrijden.WE_ID SET gIMP_LEN_Deelnemers.AUX_Programmanummer = [corr_programmanummer], " & _
"gIMP_LEN_Deelnemers.AUX_Wedstrijdnummer = [corr_wedstrijdnummer];"
DoCmd.RunSQL sql

'tijden wedstrijd nr + programmanr fields
sql = "UPDATE (gIMP_LEN_Tijden INNER JOIN gIMP_LEN_Programma ON gIMP_LEN_Tijden.TY_PROG_ID = gIMP_LEN_Programma.PR_ID) INNER JOIN gIMP_LEN_Wedstrijden " & _
"ON gIMP_LEN_Programma.PR_WED_ID = gIMP_LEN_Wedstrijden.WE_ID SET gIMP_LEN_Tijden.AUX_Programmanummer = [corr_programmanummer], " & _
"gIMP_LEN_Tijden.AUX_Wedstrijdnummer = [corr_wedstrijdnummer];"
DoCmd.RunSQL sql






'sql = "UPDATE (gIMP_LEN_Ploegleden INNER JOIN gIMP_LEN_Programma ON gIMP_LEN_Ploegleden.PLL_PROG_ID = gIMP_LEN_Programma.PR_ID) INNER JOIN gIMP_LEN_Wedstrijden " & _
'"ON gIMP_LEN_Programma.PR_WED_ID = gIMP_LEN_Wedstrijden.WE_ID SET gIMP_LEN_Ploegleden.AUX_Programmanummer = [corr_programmanummer], " & _
'"gIMP_LEN_Ploegleden.AUX_Wedstrijdnummer = [corr_wedstrijdnummer];"

'now have to update estafette nummers.
sql = "UPDATE (gIMP_LEN_Deelnemers INNER JOIN gIMP_LEN_Ploeg ON gIMP_LEN_Deelnemers.DE_Ploeg_ID = gIMP_LEN_Ploeg.PL_ID) INNER JOIN gIMP_LEN_Ver " & _
"ON gIMP_LEN_Ploeg.PL_VER_ID = gIMP_LEN_Ver.V_ID SET gIMP_LEN_Deelnemers.AUX_Estafettenummer = [pl_nummer], gIMP_LEN_Deelnemers.AUX_Depotnummer = [CORR_DEPOT];"
DoCmd.RunSQL sql

sql = "UPDATE (gIMP_LEN_Tijden INNER JOIN gIMP_LEN_Ploeg ON gIMP_LEN_Tijden.TY_Ploeg_ID = gIMP_LEN_Ploeg.PL_ID) INNER JOIN gIMP_LEN_Ver " & _
"ON gIMP_LEN_Ploeg.PL_VER_ID = gIMP_LEN_Ver.V_ID SET gIMP_LEN_Tijden.AUX_Estafettenummer = [pl_nummer], gIMP_LEN_Tijden.AUX_Depotnummer = [CORR_DEPOT];"
DoCmd.RunSQL sql


'update ploegleden.
sql = "UPDATE gIMP_LEN_Ploegleden INNER JOIN gIMP_LEN_Deelnemers ON gIMP_LEN_Ploegleden.PLL_Deelnemer_ID = " & _
"gIMP_LEN_Deelnemers.DE_ID SET gIMP_LEN_Ploegleden.AUX_Wedstrijdnummer = [gIMP_LEN_Deelnemers].[aux_wedstrijdnummer], " & _
"gIMP_LEN_Ploegleden.AUX_Estafettenummer = [gIMP_LEN_Deelnemers].[aux_estafettenummer], gIMP_LEN_Ploegleden.AUX_Programmanummer = " & _
"[gIMP_LEN_Deelnemers].[aux_programmanummer], gIMP_LEN_Ploegleden.AUX_Depotnummer = [gIMP_LEN_Deelnemers].[aux_depotnummer];"
DoCmd.RunSQL sql

sql = "UPDATE gIMP_LEN_Ploegleden INNER JOIN gIMP_LEN_Tijden ON gIMP_LEN_Ploegleden.PLL_Tijd_ID = " & _
"gIMP_LEN_Tijden.TY_ID SET gIMP_LEN_Ploegleden.AUX_Wedstrijdnummer = [gIMP_LEN_Tijden].[aux_wedstrijdnummer], " & _
"gIMP_LEN_Ploegleden.AUX_Estafettenummer = [gIMP_LEN_Tijden].[aux_estafettenummer], gIMP_LEN_Ploegleden.AUX_Programmanummer = " & _
"[gIMP_LEN_Tijden].[aux_programmanummer], gIMP_LEN_Ploegleden.AUX_Depotnummer = [gIMP_LEN_Tijden].[aux_depotnummer];"
DoCmd.RunSQL sql


sql = "UPDATE gIMP_LEN_Ploegleden INNER JOIN gIMP_LEN_Tijden ON gIMP_LEN_Ploegleden.PLL_Tijd_ID = " & _
"gIMP_LEN_Tijden.TY_ID SET gIMP_LEN_Ploegleden.AUX_Wedstrijdnummer = [gIMP_LEN_Tijden].[aux_wedstrijdnummer], " & _
"gIMP_LEN_Ploegleden.AUX_Estafettenummer = [gIMP_LEN_Tijden].[aux_estafettenummer], gIMP_LEN_Ploegleden.AUX_Programmanummer = " & _
"[gIMP_LEN_Tijden].[aux_programmanummer], gIMP_LEN_Ploegleden.AUX_Depotnummer = [gIMP_LEN_Tijden].[aux_depotnummer];"
DoCmd.RunSQL sql


sql = "UPDATE gIMP_LEN_Ploegleden INNER JOIN gIMP_LEN_ArchiefTijden ON gIMP_LEN_Ploegleden.PLL_TMA_Tijd_ID = " & _
"gIMP_LEN_ArchiefTijden.TD_ID SET gIMP_LEN_Ploegleden.AUX_Wedstrijdnummer = [gIMP_LEN_ArchiefTijden].[aux_wedstrijdnummer], " & _
"gIMP_LEN_Ploegleden.AUX_Estafettenummer = NULL, gIMP_LEN_Ploegleden.AUX_Programmanummer = " & _
"NULL, gIMP_LEN_Ploegleden.AUX_Depotnummer = [gIMP_LEN_ArchiefTijden].[aux_depotnummer];"
DoCmd.RunSQL sql


'now update startnummers everywhere.
'deelnemers
sql = "UPDATE gIMP_LEN_Deelnemers INNER JOIN gIMP_LEN_Zwemmers ON gIMP_LEN_Deelnemers.DE_Zwemmer_ID = gIMP_LEN_Zwemmers.ZW_ID SET gIMP_LEN_Deelnemers.AUX_Startnummer = [CORR_startnummer];"
DoCmd.RunSQL sql

'tijden
sql = "UPDATE gIMP_LEN_Tijden INNER JOIN gIMP_LEN_Zwemmers ON gIMP_LEN_Tijden.TY_Zwemmer_ID = gIMP_LEN_Zwemmers.ZW_ID SET gIMP_LEN_Tijden.AUX_Startnummer = [corr_startnummer];"
DoCmd.RunSQL sql

'tijden startzwemmers.
sql = "UPDATE gIMP_LEN_Tijden INNER JOIN gIMP_LEN_Zwemmers ON gIMP_LEN_Tijden.TY_StartZwemmer_ID = gIMP_LEN_Zwemmers.ZW_ID SET gIMP_LEN_Tijden.AUX_Startzwemmer = [corr_startnummer];"
DoCmd.RunSQL sql


'ploegleden
sql = "UPDATE gIMP_LEN_Ploegleden INNER JOIN gIMP_LEN_Zwemmers ON gIMP_LEN_Ploegleden.PLL_Zwemmer_ID = gIMP_LEN_Zwemmers.ZW_ID SET gIMP_LEN_Ploegleden.AUX_Startnummer = [corr_startnummer];"
DoCmd.RunSQL sql

'records
sql = "UPDATE gIMP_LEN_Records INNER JOIN gIMP_LEN_Zwemmers ON gIMP_LEN_Records.REC_Zwemmer_ID = gIMP_LEN_Zwemmers.ZW_ID SET gIMP_LEN_Records.AUX_Startnummer = [corr_startnummer], gIMP_LEN_records.aux_Depotnummer = gIMP_LEN_zwemmers.aux_depotnummer;"
DoCmd.RunSQL sql

'records with relay.
sql = "UPDATE (gIMP_LEN_Records INNER JOIN gIMP_LEN_Ploeg ON gIMP_LEN_Records.REC_Ploeg_ID = gIMP_LEN_Ploeg.PL_ID) INNER JOIN gIMP_LEN_Ver ON gIMP_LEN_Ploeg.PL_VER_ID = gIMP_LEN_Ver.V_ID SET gIMP_LEN_Records.AUX_Depotnummer = [CORR_DEPOT];"
DoCmd.RunSQL sql

'time archives
sql = "UPDATE gIMP_LEN_ArchiefTijden INNER JOIN gIMP_LEN_Zwemmers ON gIMP_LEN_ArchiefTijden.TD_Zwemmer_ID = gIMP_LEN_Zwemmers.ZW_ID SET gIMP_LEN_ArchiefTijden.AUX_Startnummer = [corr_startnummer]"
DoCmd.RunSQL sql

























DoCmd.SetWarnings True
lenFillAuxFields = True
Exit Function
fout:
DoCmd.SetWarnings True
MsgBox Err & " " & Error$, 16

Exit Function
End Function


Public Function lenCheckDepotnummers() As Boolean
On Error GoTo fout
lenCheckDepotnummers = False

Dim impVer As Recordset
Set impVer = CurrentDb().OpenRecordset("select * from gIMP_LEN_ver where nz([imp_import]) order by nz([corr_depot])")

Dim lastDep As String
lastDep = "---"

impVer.MoveFirst
Do Until impVer.EOF
  Dim tpD As String
  tpD = Nz(impVer("CORR_DEPOT"))
  Dim tpNaam As String
  tpNaam = Nz(impVer("V_Naam"))
  
  If (tpD = lastDep) Then
    Err.Raise 1, , "Dubbel depotnummer gevonden: " & tpD & ", " & tpNaam
  End If
  
  lastDep = tpD
  impVer.MoveNext
  
Loop


appCleanRS impVer


lenCheckDepotnummers = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " " & Error$, 16
Exit Function
End Function


Public Function lenCheckBlockedZwemmers() As Boolean
On Error GoTo fout
lenCheckBlockedZwemmers = False

'The tactic will be to look for swimmers with AUX_Depotnummer <> "" and IMP_Import = false
'The user needs to know about such swimmers.


Dim sql As String
sql = "select gIMP_LEN_zwemmers.*, gIMP_LEN_ver.v_naam from gIMP_LEN_Zwemmers inner join gIMP_LEN_ver on [gIMP_LEN_zwemmers].zw_ver_id = [gIMP_LEN_ver].v_id where [gIMP_LEN_ver].imp_Import and nz([corr_startnummer]) = """" order by v_naam;"

Dim zwms As Recordset
Set zwms = CurrentDb().OpenRecordset(sql)


Dim nBlockedSwm  As Integer
nBlockedSwm = 0
Dim sBlockedSwm As String
sBlockedSwm = ""




zwms.MoveFirst
Do Until zwms.EOF
  
  
  
  Dim tpName As String
  Dim tpActStart As String
  Dim tpVer As String
  
  tpVer = Nz(zwms("V_Naam"))
  tpActStart = Nz(zwms("ZW_Startnummer"))
  tpName = fmtName(Nz(zwms("ZW_Voornaam")), Nz(zwms("ZW_Voegsel")), Nz(zwms("ZW_Achternaam")))
  
  nBlockedSwm = nBlockedSwm + 1
  If (nBlockedSwm < 10) Then
    If (Len(sBlockedSwm) > 0) Then
      sBlockedSwm = sBlockedSwm & ", "
    End If
    sBlockedSwm = sBlockedSwm & tpName & " (" & tpVer & ", " & tpActStart & ")"
  End If

  zwms.MoveNext
Loop


appCleanRS zwms


If (nBlockedSwm >= 10) Then
  sBlockedSwm = sBlockedSwm & " en anderen "
End If



If (nBlockedSwm > 0) Then
  'Have to ask whether to continue.
  Dim msg As String
  
  msg = "Er zijn " & nBlockedSwm & " zwemmer(s) die niet zullen worden geimporteerd." & vbCrLf & _
  "Dit zijn de zwemmers: " & sBlockedSwm & "." & vbCrLf & _
  "Estafette ploegen met deze zwemmers zullen niet of onvolledig worden geimporteerd." & vbCrLf & _
  "Om deze zwemmers toch te importeren, dient u terug te gaan naar het scherm met zwemmergegevens en uw selectie aan te passen. " & vbCrLf & _
  "Wilt u nu zonder deze zwemmers doorgaan met importeren?"
  
  If (MsgBox(msg, vbExclamation + vbYesNo + vbDefaultButton2) = vbNo) Then
    Exit Function
  End If
End If


lenCheckBlockedZwemmers = True

Exit Function
fout:
If (Err = 3021) Then Resume Next ' no current record.
MsgBox Err & " lenCheckBlockedZwemmers" & vbCrLf & Error$, 16
Exit Function
End Function