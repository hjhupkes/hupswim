Option Compare Database
Option Explicit

Const PNT_VVT_USE_OPM_WHEN_ABSENT = False


Private Const PNT_LFT_MAX_ST_PER_ZW = 6
Private Const PNT_LFT_MAX_PROGS = 50
Private Const PNT_LFT_MAX_ZWM = 200


Public Const PNT_CALC_MODE_RESULT = 0
Public Const PNT_CALC_MODE_ESTIMATE = 1
Public Const PNT_CALC_MODE_TEST = 2




Public Type PNT_VER_OUTPUT_ITEM
  pnt As Double
  
  ver As String
  start As String
  estNr As Integer
  nm As String
  
  tvDis As Double
  actIsDis As Boolean
  actTime As Double
  
  pntIsVV As Boolean
  pntTime As Double
  
  estStarts(0 To MAX_ESTAF_CNT) As String
  estNames(0 To MAX_ESTAF_CNT) As String

End Type



Public Type RANK_OPTIONS
  blRespectABC As Boolean
  blRestrictABC As Boolean
  sABCCodes As String
End Type

Type PNT_GLOBAL_BASIC_INFO
  wednr As Long
  orderID As Long
  type As String
  shortName As String
  des As String
  blEntireMeet As Boolean
End Type

Type PNT_VVT_CALC_OPTS
  blCalcVVTs As Boolean
  vvtPenalty As Double
  vvtPenPer100 As Boolean
  vvtMaxPenalty As Double
  vvtRestrictCmp As Boolean
  vvtAddDisPenalty As Boolean
  vvtDisPenalty As Double
  vvtDisPenPer100 As Boolean
  vvtMaxDisPenalty As Double
End Type

Type PNT_IND_OPTIONS
  vvtOpts As PNT_VVT_CALC_OPTS
  rnkOpts As RANK_OPTIONS
  blSortPerVer As Boolean
  tdToPointMode As Integer
  blUseTst As Boolean
  blRestrictVers As Boolean
End Type

Type PNT_VER_PNT_OPTIONS
  disMode As Integer
  disFixedPoints As Long
  blDisFixedPointRequireValidTime As Boolean
  blDoortellen As Boolean
  blUseTst As Boolean
  blUseStdTst As Boolean
  blUseStdProgSettings As Boolean
  blRestrictVers As Boolean
  blIncludeRVerTimes As Boolean
  blUseProgSubOrdering As Boolean
  blGroupVers As Boolean
End Type

Type PNT_VER_MED_OPTIONS
  blUseTst As Boolean
  blUseStdProgSettings As Boolean
  blRestrictVers As Boolean
  blGroupVers As Boolean
End Type




Type PNT_VER_SEC_OPTIONS
  vvtOpts As PNT_VVT_CALC_OPTS
  disMode As Integer
  blUseTst As Boolean
  blUseStdTst As Boolean
  blUseStdProgSettings As Boolean
  blRestrictVers As Boolean
  tdToPointMode As Integer
  blSingleLft As Boolean
  blGroupVers As Boolean
  
  blIntUseLftRestrictionTable As Boolean
End Type


Type PNT_CATOND_INFO
  Code As String
  des As String

  blTeltMee As Boolean
  blRequireValidTime As Boolean
  vvTijd As Double
  vvPnts As Double
End Type

Type PNT_CAT_INFO
  cat As String
  bescat As String
  catOrder As Integer
  
      
  ondOffset As Integer
  ondCnt As Integer
  
End Type


Public Const PNT_TYPE_VER_SEC = "VERSEC"
Public Const PNT_TYPE_VER_PNT = "VERPNT"
Public Const PNT_TYPE_VER_MED = "VERMED"
Public Const PNT_TYPE_IND = "IND"



Public Const PNT_TD_TO_PNT_MODE_SEC = 1
Public Const PNT_TD_TO_PNT_MODE_SECFIFTY = 2
Public Const PNT_TD_TO_PNT_MODE_SECHND = 3
Public Const PNT_TD_TO_PNT_MODE_LEN = 4


Public Const PNT_DSQ_MODE_BLOCK = 1
Public Const PNT_DSQ_MODE_ADD_PEN = 2
Public Const PNT_DSQ_MODE_FIX_PNTS = 3

Type PNT_PROG_INFO
  wednr As Long
  prognr As String
  vvt As Double
  nComp As Integer
  tvDis As Double
  onderdeel As String
  Afstand As String
  slag As String
  afTot As Long
  cat As String
  bescat As String
  besAfw As String
  type As String
  isEstaf As Boolean
  estafCnt As Integer
  
  'nComp_Original As Integer
  'vvt_original As Double
  'tvDis_original As Double
End Type
  


Type PNT_VER_SEC_OPTS_BOE
  blSingleWedOnly As Boolean
  blRestrictVers As Boolean
  rvNames(0 To MAX_N_DLN_VERS) As String
  rvDepots(0 To MAX_N_DLN_VERS) As String
  rvNVers As Integer
  blUseExtInitVals As Boolean
  ivVNames(0 To MAX_N_DLN_VERS) As String
  ivInitVals(0 To MAX_N_DLN_VERS) As Integer
  ivNInitVals As Integer
  blUseExtProgProps As Boolean
  
    
  blReduce50 As Boolean
End Type

Type PNT_PROG_PROPS
  prWedNrs(0 To MAX_N_PNT_PROGS) As Long
  prProgs(0 To MAX_N_PNT_PROGS) As String
  prVVT(0 To MAX_N_PNT_PROGS) As Double
  prNComp(0 To MAX_N_PNT_PROGS) As Integer
  prTvDis(0 To MAX_N_PNT_PROGS) As Double
  prOnd(0 To MAX_N_PNT_PROGS) As String
  prNProgs As Integer
End Type

Public Const PNT_IND_MAX_N_CATS = 100
Public Const PNT_IND_MAX_N_CATOND = 5000

Private Const PNT_MAX_MEETEL_PLAATS = 100
Private Const PNT_MAX_MEETEL_BUFFER = 15




Public Function pntGenerateDefault(ByRef pntOpts As PNT_VER_SEC_OPTS_BOE) As Boolean
On Error GoTo fout
pntGenerateDefault = False

pntOpts.blSingleWedOnly = False
pntOpts.blRestrictVers = False
pntOpts.blUseExtInitVals = False
pntOpts.blUseExtProgProps = False
pntOpts.blReduce50 = False

pntGenerateDefault = True
Exit Function
fout:
MsgBox Err & " " & Error$, 16
Exit Function
End Function

Public Function pntDisplayTijd(td As Double, isVVT As Boolean, isDis As Boolean) As String
On Error GoTo fout
pntDisplayTijd = ""

Dim tv As String
tv = ""
If (td < 1) Then
  If (isDis) Then
    tv = "D"
  End If
ElseIf (isVVT And isDis) Then
  tv = "*D"
ElseIf (isDis) Then
  tv = "D"
ElseIf (isVVT) Then
  tv = "*"
End If

If (td < 1) Then
  pntDisplayTijd = tv
Else
  pntDisplayTijd = Trim(fmtSwimTime(td)) & tv
End If
      
Exit Function
fout:
Exit Function
End Function

Public Function pntVerCreateTables(ByVal tbName As String) As Boolean
On Error GoTo fout
pntVerCreateTables = False

DoCmd.SetWarnings False
DoCmd.DeleteObject acTable, tbName
DoCmd.SetWarnings True

Dim mydb As Database
Set mydb = CurrentDb()
Dim tbDef As TableDef
Set tbDef = mydb.CreateTableDef

Dim fld As Field


Set fld = tbDef.CreateField("PT_PNT_Wedstrijdnummer", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_PNT_OrderID", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_Wedstrijdnummer", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_Is_Estimate", dbBoolean)
tbDef.Fields.Append fld
'feb 2007 ======= Add possibility for including initial values.
Set fld = tbDef.CreateField("PT_Is_InitVals", dbBoolean)
tbDef.Fields.Append fld
Set fld = tbDef.CreateField("PT_Vereniging", dbText, 255)
tbDef.Fields.Append fld
Set fld = tbDef.CreateField("PT_Depot", dbText, 50)
tbDef.Fields.Append fld

'======
Set fld = tbDef.CreateField("PT_Programmanummer", dbText, 25)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_PNT_GRP_CatIdx", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_PNT_GRP_Categorie", dbText, 50)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_PNT_GRP_ABC", dbText, 1)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_PNT_GRP_Beschrijving", dbText, 255)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_Afstand", dbText, 25)
tbDef.Fields.Append fld
Set fld = tbDef.CreateField("PT_slag", dbText, 25)
tbDef.Fields.Append fld
Set fld = tbDef.CreateField("PT_categorie", dbText, 25)
tbDef.Fields.Append fld
Set fld = tbDef.CreateField("PT_Beschrijving_categorie", dbText, 50)
tbDef.Fields.Append fld
Set fld = tbDef.CreateField("PT_Beschrijving_afwijkend", dbText, 255)
tbDef.Fields.Append fld
Set fld = tbDef.CreateField("PT_Type", dbText, 50)
tbDef.Fields.Append fld
Set fld = tbDef.CreateField("PT_N_Meetellende_zwemmers", dbInteger)
tbDef.Fields.Append fld
Set fld = tbDef.CreateField("PT_Vervangende_tijd", dbDouble)
tbDef.Fields.Append fld
Set fld = tbDef.CreateField("PT_Is_Estaf", dbBoolean)
tbDef.Fields.Append fld

Dim i As Integer
For i = 1 To MAX_N_MEETEL
  Set fld = tbDef.CreateField("PT_Startnummer_" & i, dbText, 10)
  tbDef.Fields.Append fld
  Set fld = tbDef.CreateField("PT_Naam_" & i, dbText, 100)
  tbDef.Fields.Append fld
  Set fld = tbDef.CreateField("PT_Tijd_" & i, dbDouble)
  tbDef.Fields.Append fld
  Set fld = tbDef.CreateField("PT_Actual_Tijd_" & i, dbDouble)
  tbDef.Fields.Append fld
  Set fld = tbDef.CreateField("PT_Toevoegen_dis_" & i, dbDouble)
  tbDef.Fields.Append fld
  Set fld = tbDef.CreateField("PT_Is_Dis_" & i, dbBoolean)
  tbDef.Fields.Append fld
  Set fld = tbDef.CreateField("PT_IS_VVT_" & i, dbBoolean)
  tbDef.Fields.Append fld
  Set fld = tbDef.CreateField("PT_Punten_" & i, dbDouble)
  tbDef.Fields.Append fld
  
  Set fld = tbDef.CreateField("PT_Estafettenummer_" & i, dbInteger)
  tbDef.Fields.Append fld
  
  Set fld = tbDef.CreateField("PT_INT_EstGUID_" & i, dbInteger)
  tbDef.Fields.Append fld
  
Next i

Set fld = tbDef.CreateField("PT_Subtotaal", dbDouble)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_Cumulatief", dbDouble)
tbDef.Fields.Append fld
Set fld = tbDef.CreateField("PT_Cumulatief_NoInitVal", dbDouble)
tbDef.Fields.Append fld
Set fld = tbDef.CreateField("PT_Toevoegen_dis_Cumulatief", dbDouble)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_Ranking", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_RankingCounter", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_RankingDisplay", dbText, 10)
tbDef.Fields.Append fld





tbDef.name = tbName

mydb.TableDefs.Append tbDef

Set tbDef = Nothing


'Now create a second, estafette table.

Dim estTbName As String
estTbName = tbName & "_Estaf"

DoCmd.SetWarnings False
DoCmd.DeleteObject acTable, estTbName
DoCmd.SetWarnings True

Set tbDef = mydb.CreateTableDef

Set fld = tbDef.CreateField("PT_INT_ESTGUID", dbLong)
tbDef.Fields.Append fld

For i = 1 To MAX_ESTAF_CNT
  Set fld = tbDef.CreateField("PT_Estaf_startnummer_" & i & "", dbText, 12)
  tbDef.Fields.Append fld
  Set fld = tbDef.CreateField("PT_Estaf_naam_" & i & "", dbText, 100)
  tbDef.Fields.Append fld
Next i


tbDef.name = estTbName
mydb.TableDefs.Append tbDef


Set tbDef = Nothing


'Now create a third, statistics table.

Dim stTbName As String
stTbName = tbName & "_Stats"

DoCmd.SetWarnings False
DoCmd.DeleteObject acTable, stTbName
DoCmd.SetWarnings True

Set tbDef = mydb.CreateTableDef

Set fld = tbDef.CreateField("PT_PNT_Wedstrijdnummer", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_PNT_OrderID", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_PNT_CalcMode", dbInteger)
tbDef.Fields.Append fld


Set fld = tbDef.CreateField("PT_Last_Wedstrijdnummer", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_Last_Programmanummer", dbText, 50)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_Last_PNT_Grp_CatIdx", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_Last_PNT_Grp_ABC", dbText, 1)
tbDef.Fields.Append fld


Set fld = tbDef.CreateField("PT_MAX_NComp", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_OPT_ProgStart", dbText, 50)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_OPT_ProgEnd", dbText, 50)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_OPT_ProgSingle", dbText, 50)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_OPT_VerSingle", dbText, 50)
tbDef.Fields.Append fld


Set fld = tbDef.CreateField("PT_OPT_IsEindUitslag", dbBoolean)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PT_OPT_HideEmptySubtotals", dbBoolean)
tbDef.Fields.Append fld




tbDef.name = stTbName
mydb.TableDefs.Append tbDef

Set tbDef = Nothing



pntVerCreateTables = True





Exit Function
fout:
If (Err = 3011 Or Err = 7874) Then Resume Next

MsgBox Err & " pntVerCreateTables" & Error$, 16
Exit Function
End Function


Public Function pntCalcVer_OutputStats(ByVal tbNameStats As String, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal lastWednr As Long, ByVal lastProgNr As String, ByVal lastPntGrpABC As String, ByVal lastPntGrpCatIdx As Long, ByVal maxNComp As Long, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalcVer_OutputStats = False

Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset(tbNameStats)
rs.AddNew
  rs("PT_PNT_Wedstrijdnummer") = pntInf.wednr
  rs("PT_PNT_OrderID") = pntInf.orderID
  rs("PT_PNT_CalcMode") = pntCalcMode
  rs("PT_LAST_Wedstrijdnummer") = lastWednr
  rs("PT_Last_Programmanummer") = hzn(lastProgNr)
  rs("PT_Last_Pnt_GRP_ABC") = hzn(lastPntGrpABC)
  rs("PT_Last_Pnt_GRP_CatIdx") = lastPntGrpCatIdx
  rs("PT_Max_NComp") = maxNComp
rs.Update
  

pntCalcVer_OutputStats = True
Exit Function
fout:
MsgBox Err & " pntCalcVer_OutputStats" & vbCrLf & Error$, 16
Exit Function
End Function


Private Function pntCalcFindVerGroups(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal blUseInitVals As Boolean, ByRef groupNames() As String, ByRef groupInitVals() As Double, ByRef groupDepots() As String, ByRef nGroups As Integer, ByRef dlvNames() As String, ByRef dlvDepots() As String, ByRef dlvGroupIdx() As Integer, ByRef nDlnVers As Integer, ByRef blInitValsUsed As Boolean) As Boolean
On Error GoTo fout
pntCalcFindVerGroups = False

Dim i As Integer


nGroups = 0
nDlnVers = 0

blInitValsUsed = False


Dim rs As Recordset
  
Dim sql As String

sql = "SELECT dtgPuntentellingVerGroups.* " & _
        "FROM dtgPuntentellingVerGroups " & _
        "WHERE (((dtgPuntentellingVerGroups.PTVG_Wedstrijdnummer)= " & pntInf.wednr & ") AND ((dtgPuntentellingVerGroups.PTVG_OrderID)=" & pntInf.orderID & ")) order by ptvg_groupName "

Set rs = CurrentDb().OpenRecordset(sql)

rs.MoveFirst
Do Until rs.EOF
  Dim tpGroupName As String, tpGroupInitVal As Double, tpDepot As String
  
  tpGroupName = Nz(rs("PTVG_GroupName"))
  tpGroupInitVal = 0
  tpDepot = ""
  
  If (blUseInitVals) Then
    tpGroupInitVal = Nz(rs("PTVG_InitValue"))
    If (tpGroupInitVal > 0) Then
      blInitValsUsed = True
    End If
  End If
  
  Dim insPos As String
  Dim oldGrpCnt As Integer
  oldGrpCnt = nGroups
  insPos = insString(tpGroupName, nGroups, groupNames)
  shiftRightDouble insPos, 1, oldGrpCnt, groupInitVals
  shiftRightString insPos, 1, oldGrpCnt, groupDepots
  
  groupInitVals(insPos) = tpGroupInitVal
  groupDepots(insPos) = tpDepot
  
  rs.MoveNext
Loop

appCleanRS rs


sql = "SELECT dtgPuntentellingDlnVers.*, [dtVerenigingen].V_DEPOT " & _
        "FROM dtgPuntentellingDlnVers LEFT JOIN [dtVerenigingen] ON " & _
        "dtgPuntentellingDlnVers.PTV_Vereniging = [dtVerenigingen].V_NAAM " & _
        "WHERE (((dtgPuntentellingDlnVers.PTV_Wedstrijdnummer)= " & pntInf.wednr & ") AND ((dtgPuntentellingDlnVers.PTV_OrderID)=" & pntInf.orderID & ")) order by ptv_vereniging "

  
Set rs = CurrentDb().OpenRecordset(sql)
rs.MoveFirst

Do Until rs.EOF
  Dim tpVName As String
  Dim tPVDepot As String
  
  tpVName = Nz(rs("PTV_Vereniging"))
  tPVDepot = Nz(rs("V_Depot"))
  
  Dim tpVGroupName As String
  tpVGroupName = Nz(rs("PTV_GroupName"))
  
  If (tpVGroupName <> "") Then
    Dim tpGroupIdx As Integer
    tpGroupIdx = bSearchString(tpVGroupName, nGroups, groupNames)
  
    If (tpGroupIdx < 0) Then
      Err.Raise 1, , "De verenigingsgroep: " & tpVGroupName & " werd niet gevonden" & vbCrLf & "Ga naar het <Dln Verenigingen> tabblad in het <Punten> scherm en zorg dat alle ingevulde groepen geldig zijn."
    End If

    insPos = insString(tpVName, nDlnVers, dlvNames)
    shiftRightString insPos, 1, (nDlnVers - 1), dlvDepots
    shiftRightInt insPos, 1, (nDlnVers - 1), dlvGroupIdx
    
    dlvDepots(insPos) = tPVDepot
    dlvGroupIdx(insPos) = tpGroupIdx

  End If
  
  rs.MoveNext
Loop

pntCalcFindVerGroups = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcFindVerGroups" & vbCrLf & Error$, 16
Exit Function
End Function




Public Function pntCalcFindVers(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal blRestrictVers, ByRef dlvNames() As String, ByRef dlvDepots() As String, ByRef nDlnVers As Integer) As Boolean
On Error GoTo fout
pntCalcFindVers = False

Dim i As Integer

If (blRestrictVers) Then
  'get the restricted vers
  Dim rs As Recordset
  
  Dim sql As String
  sql = "SELECT dtgPuntentellingDlnVers.*, [dtVerenigingen].V_DEPOT " & _
        "FROM dtgPuntentellingDlnVers LEFT JOIN [dtVerenigingen] ON " & _
        "dtgPuntentellingDlnVers.PTV_Vereniging = [dtVerenigingen].V_NAAM " & _
        "WHERE (((dtgPuntentellingDlnVers.PTV_Wedstrijdnummer)= " & pntInf.wednr & ") AND ((dtgPuntentellingDlnVers.PTV_OrderID)=" & pntInf.orderID & ")) order by ptv_vereniging "

  
  Set rs = CurrentDb().OpenRecordset(sql)
  rs.MoveFirst
  Do Until rs.EOF
    Dim tpVName As String
    Dim tPVDepot As String
    
    tpVName = Nz(rs("PTV_Vereniging"))
    tPVDepot = Nz(rs("V_Depot"))
  
  
    Dim insPos As Integer
    insPos = insString(tpVName, nDlnVers, dlvNames)
    shiftRightString insPos, 1, (nDlnVers - 1), dlvDepots
    dlvDepots(insPos) = tPVDepot
  
    rs.MoveNext
  Loop
  
  
Else
  'Read the verenigingen the standard way.
  If Not wedGetDlnVers(True, pntInf.blEntireMeet, wedInf.wednr, wedInf.meetMainNr, dlvNames, dlvDepots, nDlnVers) Then
    Exit Function
  End If
End If


pntCalcFindVers = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcFindVers" & vbCrLf & Error$, 16
Exit Function
End Function





Private Function pntFindVerInitVal(ByRef pntTstVers As Recordset, ByRef dlv As Recordset, ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal blUseTst As Boolean, ByVal blUseStdTst As Boolean, ByVal vName As String, ByRef vInitVal As Double, ByRef isFnd As Boolean) As Boolean
On Error GoTo fout
pntFindVerInitVal = False

isFnd = False
vInitVal = 0

If (Not blUseTst) Then
  isFnd = True
  vInitVal = 0
ElseIf (blUseStdTst) Then
  Dim actWedNr As Long
  actWedNr = pntInf.wednr
  If (pntInf.blEntireMeet) Then
    actWedNr = wedInf.meetMainNr
  End If
  
  If Not pntFindVerStdInitVal(dlv, actWedNr, vName, vInitVal, isFnd) Then
    Exit Function
  End If
  
  
Else
  pntTstVers.Seek "=", pntInf.wednr, pntInf.orderID, vName
  If Not pntTstVers.NoMatch Then
    isFnd = True
    vInitVal = pntTstVers("PTT_Punten")
  End If
End If



pntFindVerInitVal = True
Exit Function
fout:
MsgBox Err & " pntFindVerInitVal" & vbCrLf & Error$, 16
Exit Function
'debug
On Error GoTo 0
Resume Next
End Function

Public Function pntCalcFindVerInitVals(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal blUseTst As Boolean, ByVal blUseStdTst As Boolean, ByRef dlvNames() As String, ByRef dlvInitVals() As Double, ByRef nDlnVers As Integer, ByRef blInitValsUsed As Boolean) As Boolean
On Error GoTo fout
pntCalcFindVerInitVals = False

Dim rsDlv As Recordset
Dim rsTST As Recordset

If (blUseTst) Then
  Set rsDlv = CurrentDb().OpenRecordset("dtDeelnemendeVerenigingen")
  rsDlv.Index = "PrimaryKey"
  
  If (Not blUseStdTst) Then
    Set rsTST = CurrentDb().OpenRecordset("dtgPuntentellingTussenstandVer")
    rsTST.Index = "PrimaryKey"
  End If

End If





Dim i As Integer
For i = 0 To nDlnVers - 1

  Dim isFnd As Boolean

  If Not pntFindVerInitVal(rsTST, rsDlv, wedInf, pntInf, blUseTst, blUseStdTst, dlvNames(i), dlvInitVals(i), isFnd) Then
    Exit Function
  End If
  
  If (Not isFnd) Then
    Err.Raise 1, , "Kon geen tussenstand vinden voor de vereniging: " & dlvNames(i)
  End If
Next i


blInitValsUsed = False
For i = 0 To nDlnVers - 1
  If (Abs(dlvInitVals(i)) > LIMEPS) Then
    blInitValsUsed = True
  End If
Next i



pntCalcFindVerInitVals = True
Exit Function
fout:
MsgBox Err & " pntCalcFindVerInitVals" & vbCrLf & Error$, 16
Exit Function
End Function








Public Function pntCalcVer_InitPhase(ByVal tbName As String, ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef outp As Recordset, ByRef outpEst As Recordset, ByRef est As Recordset, ByRef nGroups As Integer, ByRef groupNames() As String, ByRef groupDepots() As String, ByRef groupInitScores() As Double, ByRef nDlnVers As Integer, ByRef dlvNames() As String, ByRef dlvDepots() As String, ByRef dlvGroupIdx() As Integer, ByRef blInitValsUsed As Boolean, ByVal blUseVerGroups As Boolean, ByVal blRestrictVers As Boolean, ByVal blUseTst As Boolean, ByVal blUseStdTst As Boolean, ByVal blUseStdProgSettings, ByRef rsProgs As Recordset, ByRef rsPntPrg As Recordset, ByRef rsPr As Recordset, ByRef rsPntDLV As Recordset) As Boolean
On Error GoTo fout
pntCalcVer_InitPhase = False

Dim tbNameEst As String
tbNameEst = tbName & "_Estaf"

If (Not pntVerCreateTables(tbName)) Then
  Exit Function
End If

Set outp = CurrentDb().OpenRecordset(tbName, dbOpenDynaset)

Set outpEst = CurrentDb().OpenRecordset(tbNameEst, dbOpenDynaset)



Set est = CurrentDb().OpenRecordset("~AN_Estafs")
est.Index = "P"


If (blUseVerGroups) Then
  If Not pntCalcFindVerGroups(wedInf, pntInf, blUseTst, groupNames, groupInitScores, groupDepots, nGroups, dlvNames, dlvDepots, dlvGroupIdx, nDlnVers, blInitValsUsed) Then
    Exit Function
  End If
Else

  'Load verenigingen
  If Not pntCalcFindVers(wedInf, pntInf, blRestrictVers, dlvNames, dlvDepots, nDlnVers) Then
    Exit Function
  End If
  
  'Copy over verenigingen to groups
  nGroups = nDlnVers
  Dim i As Integer
  For i = 0 To nDlnVers - 1
    groupNames(i) = dlvNames(i)
    groupDepots(i) = dlvDepots(i)
    groupInitScores(i) = 0
    dlvGroupIdx(i) = i
  Next i
  
  'Find init values for GROUP names
  If Not pntCalcFindVerInitVals(wedInf, pntInf, blUseTst, blUseStdTst, groupNames, groupInitScores, nGroups, blInitValsUsed) Then
    Exit Function
  End If
End If




If (blInitValsUsed) Then
  'Need to build table lines for the initial values.
   
  For i = 0 To nGroups - 1
    outp.AddNew
      outp("PT_PNT_Wedstrijdnummer") = pntInf.wednr
      outp("PT_PNT_OrderID") = pntInf.orderID
      outp("PT_Wedstrijdnummer") = IIf(pntInf.blEntireMeet, wedInf.meetMainNr, wedInf.wednr)
      outp("PT_Is_InitVals") = True
      outp("PT_Programmanummer") = "-1"
      outp("PT_Vereniging") = hzn(groupNames(i))
      outp("PT_Depot") = hzn(groupDepots(i))
      outp("PT_Subtotaal") = groupInitScores(i)
      outp("PT_Cumulatief") = groupInitScores(i)
      outp("PT_Cumulatief_NoInitVal") = 0
      outp("PT_Toevoegen_dis_Cumulatief") = 0
    outp.Update
  Next i
  
  
End If
'Deelnemende verenigingen have now succesfully been initialized.




'Get tables for extracting prog Properties.
If (Not blUseStdProgSettings) Then
  Set rsPntPrg = CurrentDb().OpenRecordset("dtgPuntentellingProgs")
  rsPntPrg.Index = "PrimaryKey"
End If


Set rsPr = CurrentDb().OpenRecordset(TNM_PR)
rsPr.Index = "PrimaryKey"


If (blRestrictVers) Then
  Set rsPntDLV = CurrentDb().OpenRecordset("dtgPuntentellingDlnVers")
  rsPntDLV.Index = "PrimaryKey"
End If





Dim sql As String
sql = wedGetProgsSQL(False, pntInf.blEntireMeet, "", wedInf.wednr, wedInf.meetMainNr, False, True)

Set rsProgs = CurrentDb().OpenRecordset(sql)
  





pntCalcVer_InitPhase = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcVer_InitPhase" & vbCrLf & Error$, 16
Exit Function
'debug
On Error GoTo 0
Resume
End Function



Public Function pntCalcVerSec(ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalcVerSec = False


Dim wedInf As WED_BASIC_INFO

If Not pntCalcPrepareGlobal(pntInf, wedInf) Then
  Exit Function
End If


If Not analyzeEstafs(Not pntInf.blEntireMeet, wedInf.wednr, wedInf.meetMainNr, "~AN_Estafs") Then
  Exit Function
End If

If Not uitslagTransferSettings(wedInf.wednr, pntInf.blEntireMeet) Then
  Exit Function
End If


Dim pntVerSecOpts As PNT_VER_SEC_OPTIONS
Dim isFnd As Boolean

If Not pntVerSecLookup(pntInf.wednr, pntInf.orderID, isFnd, pntVerSecOpts) Then
  Exit Function
End If

If Not isFnd Then
  Err.Raise 1, , "Kon puntentelling: " & pntInf.wednr & " , " & pntInf.orderID & " )  niet vinden"
End If





If (pntInf.orderID = -1) And (pntVerSecOpts.blSingleLft Or pntVerSecOpts.vvtOpts.blCalcVVTs) Then
  'Need to fillTables anyway
  Dim sql As String
  sql = "INSERT INTO dtgPuntentellingDefs ( PTG_Wedstrijdnummer, PTG_OrderID ) SELECT " & pntInf.wednr & " AS WED, -1 AS ORD;"

  DoCmd.SetWarnings False
  DoCmd.RunSQL sql
  DoCmd.SetWarnings True

  If Not pntFillTables_Perform(pntInf, wedInf) Then
    GoTo cleanup
  End If
End If

If Not pntInitWorkFields(pntInf, wedInf, pntVerSecOpts.blUseStdProgSettings, pntVerSecOpts.vvtOpts.blCalcVVTs) Then
  GoTo cleanup
End If

If Not pntCalcVerSec_driver(wedInf, pntInf, pntVerSecOpts, pntCalcMode) Then
  GoTo cleanup
End If




pntCalcVerSec = True


cleanup:
If (pntInf.orderID = -1) And (pntVerSecOpts.blSingleLft Or pntVerSecOpts.vvtOpts.blCalcVVTs) Then
  sql = "Delete * from dtgPuntentellingDefs where ptg_wedstrijdnummer = " & pntInf.wednr & " and ptg_orderID =  -1"

  DoCmd.SetWarnings False
  DoCmd.RunSQL sql
  DoCmd.SetWarnings True
End If
Exit Function

fout:
MsgBox Err & " pntCalcVerSec" & vbCrLf & Error$, 16
Exit Function
End Function


Public Function pntCalcVerSec_perform(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVSOpts As PNT_VER_SEC_OPTIONS, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalcVerSec_perform = False

'If Not pntVSOpts.blGroupVers Then
  If Not pntCalcVerSec_perform_calcTable("__punten", wedInf, pntInf, pntVSOpts, pntCalcMode) Then
    Exit Function
  End If
'Else
'  If Not pntCalcVerSec_perform_calcTable("__punten_pregroup", wedInf, pntInf, pntVSOpts, pntCalcMode) Then
'    Exit Function
'  End If
'End If
  


pntCalcVerSec_perform = True
Exit Function
fout:
MsgBox Err & " pntCalcVerSec_perform" & vbCrLf & Error$, 16
Exit Function
End Function



Public Function pntCalcVerSec_perform_calcTable(ByVal tbName As String, ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVSOpts As PNT_VER_SEC_OPTIONS, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalcVerSec_perform_calcTable = False

Dim outp As Recordset
Dim outpEst As Recordset
Dim lastUsedEstGUID As Long
Dim est As Recordset

lastUsedEstGUID = 0


Dim nGroups As Integer
Dim groupNames(0 To MAX_N_DLN_VERS - 1) As String
Dim groupDepots(0 To MAX_N_DLN_VERS - 1) As String
Dim groupInitScore(0 To MAX_N_DLN_VERS - 1) As Double



Dim nDlnVers As Integer
Dim dlvNames(0 To MAX_N_DLN_VERS - 1) As String
Dim dlvDepots(0 To MAX_N_DLN_VERS - 1) As String
Dim dlvGroupIdx(0 To MAX_N_DLN_VERS - 1) As Integer


Dim blInitValsUsed As Boolean


Dim rsProgs As Recordset
Dim rsPntPrg As Recordset
Dim rsPr As Recordset
Dim rsPntDLV As Recordset



If Not pntCalcVer_InitPhase("__punten", wedInf, pntInf, outp, outpEst, est, nGroups, groupNames, groupDepots, groupInitScore, nDlnVers, dlvNames, dlvDepots, dlvGroupIdx, blInitValsUsed, pntVSOpts.blGroupVers, pntVSOpts.blRestrictVers, pntVSOpts.blUseTst, pntVSOpts.blUseStdTst, pntVSOpts.blUseStdProgSettings, rsProgs, rsPntPrg, rsPr, rsPntDLV) Then
  Exit Function
End If


Dim maxNComp As Long
Dim lastWednr As Long
Dim lastProgNr As String
Dim lastPntCatIdx As Integer

maxNComp = 0
lastWednr = -1
lastProgNr = ""
lastPntCatIdx = -1

rsProgs.MoveFirst

'================End standard part



Dim rsLft As Recordset

'This name is standard and does not depend upon the specific tbName passed
'as an argument.
Dim tbNameLft As String
tbNameLft = "__punten__lft"

If (pntVSOpts.blIntUseLftRestrictionTable) Then
  Set rsLft = CurrentDb().OpenRecordset(tbNameLft)
  rsLft.Index = "PrimaryKey"
End If


Dim rsTd As Recordset



Dim groupCurTotScore(0 To MAX_N_DLN_VERS - 1) As Double
Dim groupCurTotToevDis(0 To MAX_N_DLN_VERS - 1) As Double
Dim groupIsCurProgProcessed(0 To MAX_N_DLN_VERS - 1) As Boolean

Dim i As Integer

For i = 0 To nGroups - 1
  groupCurTotScore(i) = groupInitScore(i)
  groupCurTotToevDis(i) = 0
Next i



Dim prGroupItemLongPnts(0 To MAX_N_DLN_VERS - 1, 0 To MAX_N_MEETEL) As Long
Dim prGroupItems(0 To MAX_N_DLN_VERS - 1, 0 To MAX_N_MEETEL) As PNT_VER_OUTPUT_ITEM
Dim prGroupNItems(0 To MAX_N_DLN_VERS - 1) As Integer


Dim curVName As String
Dim curVValid As Boolean
Dim curVIdx As Integer
Dim curVGroupIdx As Integer
curVValid = False


Dim pntProgInf As PNT_PROG_INFO

Do Until rsProgs.EOF

  'First extract programma information.

  Dim curProgWedNr As Long
  Dim curProgNr As String
  
  curProgWedNr = Nz(rsProgs(FNM_PR_WED))
  curProgNr = Nz(rsProgs(FNM_PR_PROG))
  
  Dim isFnd As Boolean
  
  If Not pntFindProgPntInfo(rsPntPrg, rsPr, wedInf, pntInf, pntVSOpts.blUseStdProgSettings, curProgWedNr, curProgNr, pntProgInf, isFnd) Then
    Exit Function
  End If
  
  If Not isFnd Then
    Err.Raise 1, , "Kon geen gegevens vinden voor programmanr: ( " & curProgWedNr & " , " & curProgNr & " )"
  End If
  
  If (pntProgInf.nComp > 0) And (pntProgInf.vvt > 1) And (pntProgInf.type <> PROG_TYPE_PUNT) And (pntProgInf.type <> PROG_TYPE_RANKING) Then
    'Dit programmanummer afhandelen.
    
    If (pntProgInf.nComp > maxNComp) Then
      maxNComp = pntProgInf.nComp
    End If
    
    lastWednr = curProgWedNr
    lastProgNr = curProgNr
    lastPntCatIdx = 0
    
    
    'Reset the current vereniging
    curVName = ""
    
    'Mark that every vereniging has not been processed
    For i = 0 To nGroups - 1
      'TODO : isCurProgProcessed will be discarded.
      groupIsCurProgProcessed(i) = False
      
      prGroupNItems(i) = 0
    Next i
    
    Dim vvPnt As Double
    Dim vvPntBaseTime As Double
    vvPntBaseTime = pntProgInf.vvt
    Select Case pntVSOpts.tdToPointMode
      Case PNT_TD_TO_PNT_MODE_SEC
        vvPnt = swtToSeconds(vvPntBaseTime)
      Case PNT_TD_TO_PNT_MODE_SECFIFTY
        vvPnt = swtToSeconds(vvPntBaseTime)
        If (pntProgInf.afTot > 0) Then
          vvPnt = vvPnt * 50 / CDbl(pntProgInf.afTot)
        End If
      Case PNT_TD_TO_PNT_MODE_SECHND
        vvPnt = swtToSeconds(vvPntBaseTime)
        If (pntProgInf.afTot > 0) Then
          vvPnt = vvPnt * 100 / CDbl(pntProgInf.afTot)
        End If
      Case PNT_TD_TO_PNT_MODE_LEN
        vvPnt = lenCalcFinaPoints(vvPntBaseTime, pntProgInf.Afstand, pntProgInf.slag, m_of_v(pntProgInf.cat), wedInf.baan)
    End Select
       
        
    Dim tdsql As String
    tdsql = ""
    
    If (pntProgInf.isEstaf) Then
      If (pntCalcMode = PNT_CALC_MODE_RESULT) Then
        tdsql = tyGetResultsEstSQL(True, False, curProgNr, curProgWedNr, -1)
        tdsql = tdsql & " ORDER BY " & FNM_TY_EST_VER_TO_ORDER & ""
      ElseIf (pntCalcMode = PNT_CALC_MODE_ESTIMATE) Or (pntCalcMode = PNT_CALC_MODE_TEST) Then
        tdsql = dlnGetDeelnemersEstSQL(True, False, curProgNr, curProgWedNr, -1, False, "")
        tdsql = tdsql & " ORDER BY " & FNM_DE_EST_VER_TO_ORDER & ""
      End If
      
    Else
      If (pntCalcMode = PNT_CALC_MODE_RESULT) Then
        tdsql = tyGetResultsPersSQL(True, False, curProgNr, curProgWedNr, -1)
        tdsql = tdsql & " ORDER BY " & FNM_TY_PERS_VER_TO_ORDER & ""
      ElseIf (pntCalcMode = PNT_CALC_MODE_ESTIMATE) Or (pntCalcMode = PNT_CALC_MODE_TEST) Then
        tdsql = dlnGetDeelnemersPersSQL(True, False, curProgNr, curProgWedNr, -1, False)
        tdsql = tdsql & " ORDER BY " & FNM_DE_PERS_VER_TO_ORDER & ""
      End If
    
    End If
    
    Set rsTd = CurrentDb().OpenRecordset(tdsql)
    
    
    Dim tpVName As String
    Dim tpStart As String
    Dim tpEst As Integer
    Dim tpNm As String
    Dim tpIsBM As Boolean
    Dim tpTd As Double
    Dim tpDis As String
    
           
        
    
        
    rsTd.MoveFirst
    Do Until False
      
      'First see if we need to finish up curVName
      If (rsTd.EOF) Then
        tpVName = ""
      Else
        If (pntProgInf.isEstaf) Then
          
          If (pntCalcMode = PNT_CALC_MODE_RESULT) Then
            tpVName = Nz(rsTd(FNM_TY_EST_VER))
            tpEst = Nz(rsTd(FNM_TY_EST_ESTNR))
            tpIsBM = Nz(rsTd(FNM_TY_EST_BM)) = "J"
            tpStart = ""
            tpNm = ""
            
            tpTd = Nz(rsTd(FNM_TY_EST_EINDTIJD))
            tpDis = Nz(rsTd(FNM_TY_EST_DIS))
            
          ElseIf (pntCalcMode = PNT_CALC_MODE_ESTIMATE) Or (pntCalcMode = PNT_CALC_MODE_TEST) Then
            tpVName = Nz(rsTd(FNM_DE_EST_VER))
            tpEst = Nz(rsTd(FNM_DE_EST_ESTNR))
            tpIsBM = Nz(rsTd(FNM_DE_EST_BM)) = "J"
            tpStart = ""
            tpNm = ""
            
            tpTd = Nz(rsTd(FNM_DE_EST_INSTD))
            tpDis = ""
            
            If (pntCalcMode = PNT_CALC_MODE_TEST) Then
              If (CLng(tpTd * 100) Mod 10) = 9 Then
                tpDis = "DQ"
              End If
            End If
            
          End If
          
          
        Else 'persoonlijk
        
          If (pntCalcMode = PNT_CALC_MODE_RESULT) Then
            tpVName = Nz(rsTd(FNM_TY_PERS_VER))
            tpEst = 0
            tpStart = Nz(rsTd(FNM_TY_PERS_START))
            tpNm = Nz(rsTd(FNM_TY_PERS_NAAM))
            tpIsBM = Nz(rsTd(FNM_TY_PERS_BM)) = "J"
            
            tpTd = Nz(rsTd(FNM_TY_PERS_EINDTIJD))
            tpDis = Nz(rsTd(FNM_TY_PERS_DIS))
          ElseIf (pntCalcMode = PNT_CALC_MODE_ESTIMATE) Or (pntCalcMode = PNT_CALC_MODE_TEST) Then
            tpVName = Nz(rsTd(FNM_DE_PERS_VER))
            tpEst = 0
            tpStart = Nz(rsTd(FNM_DE_PERS_STARTNR))
            tpNm = Nz(rsTd(FNM_DE_PERS_NAAM))
            tpIsBM = Nz(rsTd(FNM_DE_PERS_BM)) = "J"
            
            tpTd = Nz(rsTd(FNM_DE_PERS_INSTD))
            tpDis = ""
          
            If (pntCalcMode = PNT_CALC_MODE_TEST) Then
              If (CLng(tpTd * 100) Mod 10) = 9 Then
                tpDis = "DQ"
              End If
            End If
          End If
          
        End If 'if persoonlijk
      End If ' if rsTd.eof
      
      If (tpVName <> curVName) Then
        If (curVName <> "") Then
          If (curVValid) Then
            

          End If 'if curVValid
        End If 'if curVName <> ""
        
        'Reinitialize details for new  vereniging.
        
        curVName = tpVName
        curVValid = (curVName <> "")
        
        If (curVValid) Then
          'Check to see if the vereniging is in our list
          curVIdx = bSearchString(curVName, nDlnVers, dlvNames)
          If (curVIdx < 0) Then
            'The vereniging is not in our initial list.
            curVValid = False
          Else
            curVGroupIdx = dlvGroupIdx(curVIdx)
          End If
        End If
        
      End If 'if curVName <> vName
      
      If (rsTd.EOF) Then
        Exit Do
      End If
      
      Dim tpIsDis As Boolean
      Dim tpIsDisNG As Boolean
      Dim tpIsDisNGZA As Boolean
      Dim tpIsDisAFM As Boolean
      Dim tpIsDisZK As Boolean
      
      tpIsDis = tpDis <> ""
      
      If (tpIsDis) Then
        tpIsDisNG = (tpDis = DIS_NG)
        tpIsDisNGZA = (tpDis = DIS_NGZA)
        tpIsDisAFM = (tpDis = DIS_AFM)
        tpIsDisZK = (tpDis = DIS_ZK)
      End If
      
      
      Dim blProcessTime As Boolean
      blProcessTime = True
      
      If (Not curVValid) Then
        blProcessTime = False
      End If
      
      If (tpIsBM) Then
        blProcessTime = False
      End If
      
      If (blProcessTime) Then
        If (tpIsDis And pntVSOpts.disMode = PNT_DSQ_MODE_BLOCK) Then
          blProcessTime = False
        End If
      End If
      
      If (blProcessTime And tpIsDis) Then
        If (tpIsDisNGZA Or tpIsDisNG Or tpIsDisAFM Or tpIsDisZK) Then
          blProcessTime = False
        End If
      End If
      
      
      'if blIntUseLftRestrictionTable then check to see if startnummer is the startnummer we have allowed
      'in the minimization procedure.
      If (blProcessTime And (Not pntProgInf.isEstaf) And pntVSOpts.blIntUseLftRestrictionTable) Then
         rsLft.Seek "=", pntProgInf.wednr, pntProgInf.prognr, tpVName, tpStart
         If (rsLft.NoMatch) Then
           blProcessTime = False
        End If
      End If

        
      If (blProcessTime) Then
    
        
        
        Dim pntIsVVT As Boolean
        Dim pntIsDis As Boolean
        Dim pntTvDis As Double
        Dim pntDisplayTime As Double
        
        Dim pntCalcBaseTime As Double
              
        
        pntIsVVT = False
        pntIsDis = False
        pntTvDis = 0
        pntDisplayTime = 0
        
        pntCalcBaseTime = 0
        
        
        If (Not swtIsValid(tpTd)) Then
          tpTd = 0
          pntIsVVT = True
          pntIsDis = False
          pntTvDis = 0
          pntDisplayTime = pntProgInf.vvt
          
          pntCalcBaseTime = pntProgInf.vvt
        Else
          If (tpIsDis) Then
            'may safely add penalty.
            'Check to see if penalty may be added
            'has already been performed.
            pntIsDis = True
            pntTvDis = pntProgInf.tvDis
            pntDisplayTime = tpTd
            pntCalcBaseTime = swtFromSeconds(swtToSeconds(tpTd) + pntTvDis)
          Else
            pntDisplayTime = tpTd
            pntCalcBaseTime = tpTd
          End If
          'See if we need to clip to vvvt
          If (pntCalcBaseTime > pntProgInf.vvt) Then
            pntIsVVT = True
            pntIsDis = False
            pntTvDis = 0
            pntDisplayTime = pntProgInf.vvt
            pntCalcBaseTime = pntProgInf.vvt
          End If
        End If
      End If 'if blProcessTime
        
        
      Dim pnt As Double
      pnt = 0
        
      If (blProcessTime) Then
        'Set out to calculation pnt
        'If (pntVSOpts.blReduce50) Then
          'Need to normalize back to 50m times.
          
        Select Case pntVSOpts.tdToPointMode
          Case PNT_TD_TO_PNT_MODE_SEC
            pnt = swtToSeconds(pntCalcBaseTime)
          Case PNT_TD_TO_PNT_MODE_SECFIFTY
            pnt = swtToSeconds(pntCalcBaseTime)
            If (pntProgInf.afTot > 0) Then
              pnt = pnt * 50 / CDbl(pntProgInf.afTot)
            End If
          Case PNT_TD_TO_PNT_MODE_SECHND
            pnt = swtToSeconds(pntCalcBaseTime)
            If (pntProgInf.afTot > 0) Then
              pnt = pnt * 100 / CDbl(pntProgInf.afTot)
            End If
          Case PNT_TD_TO_PNT_MODE_LEN
            pnt = lenCalcFinaPoints(pntCalcBaseTime, pntProgInf.Afstand, pntProgInf.slag, m_of_v(pntProgInf.cat), wedInf.baan)
        End Select
      End If
        
        
      If (blProcessTime) Then
        'add into items list.
        
        Dim lPntToIns As Long
        lPntToIns = CLng(pnt * 100)
        
        If (pntVSOpts.tdToPointMode = PNT_TD_TO_PNT_MODE_LEN) Then
          'To get order correctly.
          lPntToIns = -lPntToIns
        End If
        
        Dim insPos As Integer
        
        Dim oldGrpNItems As Integer
        oldGrpNItems = prGroupNItems(curVGroupIdx)
        
        insPos = insLong2d(curVGroupIdx, lPntToIns, prGroupNItems, prGroupItemLongPnts)
        
        shiftRightItems2d curVGroupIdx, insPos, 1, oldGrpNItems, prGroupItems
        
        
        With prGroupItems(curVGroupIdx, insPos)
            .pnt = pnt
            .actIsDis = tpIsDis
            .actTime = tpTd
            If (pntProgInf.isEstaf) Then
              .estNr = tpEst
              
              est.Seek "=", curProgWedNr, curProgNr, tpEst, tpVName
              If (Not est.NoMatch) Then
                For i = 0 To pntProgInf.estafCnt - 1
                  .estStarts(i) = Nz(est("EST_Startnummer_" & (i + 1)))
                  .estNames(i) = Nz(est("EST_Naam_" & (i + 1)))
                Next i
              Else
                For i = 0 To pntProgInf.estafCnt - 1
                  .estStarts(i) = ""
                  .estNames(i) = ""
                Next i
              End If
              
            Else
              .start = tpStart
              .nm = tpNm
            End If
            .pntIsVV = pntIsVVT
            .pntTime = pntDisplayTime
            
            .tvDis = pntTvDis
            .ver = tpVName
        End With
        
        'See if we need to clip
        If (prGroupNItems(curVGroupIdx) > pntProgInf.nComp) Then
          prGroupNItems(curVGroupIdx) = pntProgInf.nComp
        End If
        
      End If 'if blProcessTime
      
    
      rsTd.MoveNext
    Loop
    
    
    
    'Now need to loop through the vers.
    For i = 0 To nGroups - 1
              
      Dim subTot As Double
              
              
      If Not pntCalcVerUpdateSums(vvPnt, pntProgInf, groupCurTotScore(i), groupCurTotToevDis(i), subTot, groupCurTotScore(i), groupCurTotToevDis(i), prGroupNItems(i), i, prGroupItems) Then
         Exit Function
      End If
        
      Dim pntGrpCatIdx As Integer
      Dim pntGrpCategorie As String
      Dim pntGrpABC As String
      Dim pntGrpDes As String
        
      pntGrpCatIdx = 0
      pntGrpCategorie = ""
      pntGrpABC = ""
      pntGrpDes = ""
      
      
      If Not pntCalcVerOutputItems(vvPnt, groupNames(i), groupDepots(i), groupInitScore(i), False, _
        wedInf, pntInf, pntProgInf, pntGrpCatIdx, pntGrpCategorie, pntGrpABC, pntGrpDes, subTot, _
        groupCurTotScore(i), groupCurTotToevDis(i), prGroupNItems(i), i, prGroupItems, _
        outp, lastUsedEstGUID, outpEst) Then
        
        Exit Function
      End If

    Next i
    
    

      
  End If 'if should process prognr.
  rsProgs.MoveNext
Loop

appCleanRS rsProgs
appCleanRS outp
appCleanRS outpEst
appCleanRS est


appCleanRS rsPntPrg
appCleanRS rsPr
appCleanRS rsPntDLV



Dim blSortAscending As Boolean
blSortAscending = True

If pntVSOpts.tdToPointMode = PNT_TD_TO_PNT_MODE_LEN Then
  blSortAscending = False
End If

If Not pntCalcVer_ApplyRanking(wedInf, pntInf, blSortAscending) Then
  Exit Function
End If

Dim tbNameStats As String
tbNameStats = tbName & "_Stats"

If Not pntCalcVer_OutputStats(tbNameStats, pntInf, lastWednr, lastProgNr, "", 0, maxNComp, pntCalcMode) Then
  Exit Function
End If



pntCalcVerSec_perform_calcTable = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcVerSec_Perform_calcTable" & Error$, 16

Exit Function
'debug
On Error GoTo 0
Resume

End Function

Public Function pntReadVVTCalcOpts(ByRef rs As Recordset, ByVal fnSfx As String, ByRef vvtOpts As PNT_VVT_CALC_OPTS) As Boolean
On Error GoTo fout
pntReadVVTCalcOpts = False

vvtOpts.blCalcVVTs = Nz(rs(fnSfx & "CalcVVTS"))
vvtOpts.vvtPenalty = Nz(rs(fnSfx & "Penalty"))
vvtOpts.vvtPenPer100 = Nz(rs(fnSfx & "PenPer100"))
vvtOpts.vvtMaxPenalty = Nz(rs(fnSfx & "MaxPenalty"))
vvtOpts.vvtRestrictCmp = Nz(rs(fnSfx & "RestrictCmp"))
vvtOpts.vvtAddDisPenalty = Nz(rs(fnSfx & "AddDisPenalty"))
vvtOpts.vvtDisPenalty = Nz(rs(fnSfx & "DisPenalty"))
vvtOpts.vvtDisPenPer100 = Nz(rs(fnSfx & "DisPenPer100"))
vvtOpts.vvtMaxDisPenalty = Nz(rs(fnSfx & "MaxDisPenalty"))


pntReadVVTCalcOpts = True
Exit Function
fout:
MsgBox Err & " pntReadVVTCalcOpts" & vbCrLf & Error$, 16
Exit Function
End Function

Public Function pntWriteVVTCalcOpts(ByRef rs As Recordset, ByVal fnSfx As String, ByRef vvtOpts As PNT_VVT_CALC_OPTS) As Boolean
On Error GoTo fout
pntWriteVVTCalcOpts = False

rs(fnSfx & "CalcVVTS") = vvtOpts.blCalcVVTs
rs(fnSfx & "Penalty") = vvtOpts.vvtPenalty
rs(fnSfx & "PenPer100") = vvtOpts.vvtPenPer100
rs(fnSfx & "MaxPenalty") = vvtOpts.vvtMaxPenalty
rs(fnSfx & "RestrictCmp") = vvtOpts.vvtRestrictCmp
rs(fnSfx & "AddDisPenalty") = vvtOpts.vvtAddDisPenalty
rs(fnSfx & "DisPenalty") = vvtOpts.vvtDisPenalty
rs(fnSfx & "DisPenPer100") = vvtOpts.vvtDisPenPer100
rs(fnSfx & "MaxDisPenalty") = vvtOpts.vvtMaxDisPenalty


pntWriteVVTCalcOpts = True
Exit Function
fout:
MsgBox Err & " pntWriteVVTCalcOpts" & vbCrLf & Error$, 16
Exit Function
End Function

Public Function pntGenerateDefaultVVTCalcOpts(ByRef vvtOpts As PNT_VVT_CALC_OPTS) As Boolean
On Error GoTo fout
pntGenerateDefaultVVTCalcOpts = False

vvtOpts.blCalcVVTs = False
vvtOpts.vvtPenalty = 6
vvtOpts.vvtPenPer100 = True
vvtOpts.vvtMaxPenalty = 9
vvtOpts.vvtRestrictCmp = True
vvtOpts.vvtAddDisPenalty = True
vvtOpts.vvtDisPenalty = 6
vvtOpts.vvtDisPenPer100 = True
vvtOpts.vvtMaxDisPenalty = 9


pntGenerateDefaultVVTCalcOpts = True
Exit Function
fout:
MsgBox Err & " pntGenerateDefaultVVTCalcOpts" & vbCrLf & Error$, 16
Exit Function
End Function



Public Function pntTvDisDefault(ByVal pAf As String) As Double
On Error GoTo fout
pntTvDisDefault = 9
If (pAf = "25") Then
  pntTvDisDefault = 1.5
ElseIf (pAf = "50") Then
  pntTvDisDefault = 3
ElseIf (pAf = "100") Then
  pntTvDisDefault = 6
End If
Exit Function
fout:
MsgBox Err & " pntTvDisDefault" & vbCrLf & Error$, 16
Exit Function
End Function



Public Function pntFindProgPntInfo(ByRef pntProgs As Recordset, ByRef prs As Recordset, ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal blUseStdProgSettings As Boolean, ByVal prWedNr As Long, ByVal prNr As String, ByRef pntProgInfo As PNT_PROG_INFO, ByRef isFnd As Boolean) As Boolean
On Error GoTo fout
pntFindProgPntInfo = False

isFnd = False

prs.Seek "=", prWedNr, prNr
If (Not prs.NoMatch) Then
  isFnd = True
  pntProgInfo.Afstand = Nz(prs(FNM_PR_AF))
  pntProgInfo.slag = Nz(prs(FNM_PR_SL))
  pntProgInfo.nComp = Nz(prs(FNM_PR_NCOMP))
  pntProgInfo.onderdeel = ""
  pntProgInfo.prognr = Nz(prs(FNM_PR_PROG))
  pntProgInfo.wednr = Nz(prs(FNM_PR_WED))
  pntProgInfo.tvDis = pntTvDisDefault(pntProgInfo.Afstand)
  pntProgInfo.vvt = Nz(prs(FNM_PR_VVT))
  
  pntProgInfo.besAfw = Nz(prs(FNM_PR_BESAFW))
  pntProgInfo.type = Nz(prs(FNM_PR_TYPE))
  
  pntProgInfo.cat = Nz(prs(FNM_PR_CAT))
  pntProgInfo.bescat = Nz(prs(FNM_PR_BESCAT))
  
  pntProgInfo.isEstaf = pntProgInfo.Afstand Like "*x*"

  If (pntProgInfo.isEstaf) Then
    pntProgInfo.estafCnt = afstand_n_zwemmers(pntProgInfo.Afstand)
    If (pntProgInfo.estafCnt > MAX_ESTAF_CNT) Then
      pntProgInfo.estafCnt = MAX_ESTAF_CNT
    End If
    pntProgInfo.afTot = CLng(pntProgInfo.estafCnt * val(afstand_ind_part(pntProgInfo.Afstand)))
  Else
    pntProgInfo.afTot = CLng(val(pntProgInfo.Afstand))
  End If
  
  
  If (PNT_VVT_USE_OPM_WHEN_ABSENT) And (pntProgInfo.vvt < 0.1) Then
    pntProgInfo.vvt = parseTijd(Nz(prs(FNM_PR_OPM)))
    If (pntProgInfo.vvt > 0.1) Then
      If (pntProgInfo.isEstaf) Then
        pntProgInfo.nComp = 1
      Else
        pntProgInfo.nComp = 2
      End If
    End If
  End If
  


  'pntProgInfo.nComp_Original = pntProgInfo.nComp
  'pntProgInfo.vvt_original = pntProgInfo.vvt

 
  'refine data if necessary.
 
  If (Not blUseStdProgSettings) Then
    pntProgs.Seek "=", pntInf.wednr, pntInf.orderID, prWedNr, prNr
    If (Not pntProgs.NoMatch) Then
      
      pntProgInfo.onderdeel = Nz(pntProgs("PTPR_OnderdeelCode"))
      
      pntProgInfo.vvt = Nz(pntProgs("PTPR_WORK_VVT"))
      pntProgInfo.nComp = Nz(pntProgs("PTPR_WORK_NCOMP"))
      pntProgInfo.tvDis = Nz(pntProgs("PTPR_WORK_TvDis"))
      
      'pntProgInfo.vvt_original = Nz(pntProgs("PTPR_VervangendeTijd"))
      'pntProgInfo.nComp_Original = Nz(pntProgs("PTPR_NMeetellendeDeelnemers"))
      'pntProgInfo.tvDis_original = Nz(pntProgs("PTPR_ToevoegenDis"))
      
    End If
  End If
End If


pntFindProgPntInfo = True
Exit Function
fout:
MsgBox Err & " pntFindProgPntInfo" & vbCrLf & Error$, 16
Exit Function
End Function


Public Function pntCalcVer_ApplyRanking(ByRef wedInf As WED_BASIC_INFO, ByRef pntInfo As PNT_GLOBAL_BASIC_INFO, ByVal blSortPntAscending As Boolean) As Boolean
On Error GoTo fout
pntCalcVer_ApplyRanking = False

Dim rs As Recordset


Dim sql As String


  sql = "Select * from [__punten] order by pt_wedstrijdnummer, pt_programmanummer, pt_pnt_grp_abc, pt_pnt_grp_CatIdx,  pt_cumulatief"

If Not blSortPntAscending Then
  sql = sql & " DESC"
End If

Set rs = CurrentDb().OpenRecordset(sql)

Dim curWed As Long
Dim curProg As String
Dim curABC As String
Dim curCatIdx As Long



Dim lastValidRnkPnt As Double
Dim lastValidRnk As Long
Dim lastValidRnkCounter As Long


curWed = -1
curProg = ""
curABC = ""
curCatIdx = -1


lastValidRnkPnt = -99
lastValidRnk = 0
lastValidRnkCounter = 0

rs.MoveFirst
Do Until rs.EOF
  Dim tpWed As Long
  Dim tpProg As String
  Dim tpABC As String
  Dim tpCatIdx As Integer
  
  tpWed = Nz(rs("PT_Wedstrijdnummer"))
  tpProg = Nz(rs("PT_Programmanummer"))
  tpABC = Nz(rs("PT_PNT_GRP_ABC"))
  tpCatIdx = Nz(rs("PT_PNT_GRP_CatIdx"))
  
  Dim blReset As Boolean
  blReset = False
  

  
  If (tpWed <> curWed) Or (tpProg <> curProg) Or (tpABC <> curABC) Or (tpCatIdx <> curCatIdx) Then
    blReset = True
  End If
  
  
  If (blReset) Then
    lastValidRnk = 0
    lastValidRnkPnt = -999
    lastValidRnkCounter = 0
  End If
  
  curWed = tpWed
  curProg = tpProg
  curABC = tpABC
  curCatIdx = tpCatIdx
  
  
  
  Dim tpRnk As Long
  Dim tpRnkCounter As Long
  Dim sRnkDisplay As String
  
  
  Dim tpPnt As Double
  tpPnt = Nz(rs("PT_Cumulatief"))
  
  tpRnk = 100000
  tpRnkCounter = 100000
  sRnkDisplay = "-"
  
  If (tpPnt > LIMEPS) Then
    'Assign a valid ranking:
    
    lastValidRnkCounter = lastValidRnkCounter + 1
    
    If (Abs(tpPnt - lastValidRnkPnt)) < LIMEPS Then
      tpRnk = lastValidRnk
      sRnkDisplay = ""
    Else
      tpRnk = lastValidRnkCounter
      sRnkDisplay = tpRnk
    End If
    tpRnkCounter = lastValidRnkCounter
    
    lastValidRnk = tpRnk
    lastValidRnkPnt = tpPnt
  End If
  
  
  rs.Edit
    rs("PT_Ranking") = tpRnk
    rs("PT_RankingCounter") = tpRnkCounter
    rs("PT_RankingDisplay") = hzn(sRnkDisplay)
  rs.Update
  
  
  
  

 rs.MoveNext
Loop


pntCalcVer_ApplyRanking = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcVer_ApplyRanking" & vbCrLf & Error$, 16
Exit Function
End Function



'This is the global entry point for point calculation routines.
Public Function pntCalc(ByVal wednr As Long, ByVal pntOrderID As Long, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalc = False


DoCmd.Hourglass True

Dim pntInf As PNT_GLOBAL_BASIC_INFO
Dim isFound As Boolean

If Not pntGlobalLookup(wednr, pntOrderID, isFound, pntInf) Then
  DoCmd.Hourglass False
  Exit Function
End If

If (Not isFound) Then
 Err.Raise 1, , "Kon puntentelling: ( " & wednr & " , " & pntOrderID & " ) niet vinden."
End If

Select Case pntInf.type
  Case PNT_TYPE_IND
    If Not pntCalcInd(pntInf, pntCalcMode) Then
      DoCmd.Hourglass False
      Exit Function
    End If
  Case PNT_TYPE_VER_PNT
    If Not pntCalcVerPnt(pntInf, pntCalcMode) Then
      DoCmd.Hourglass False
      Exit Function
    End If
  Case PNT_TYPE_VER_SEC
    If Not pntCalcVerSec(pntInf, pntCalcMode) Then
      DoCmd.Hourglass False
      Exit Function
    End If
  Case PNT_TYPE_VER_MED
    If Not pntCalcVerMed(pntInf, pntCalcMode) Then
      DoCmd.Hourglass False
      Exit Function
    End If
End Select


DoCmd.Hourglass False


pntCalc = True
Exit Function
fout:
DoCmd.Hourglass False
MsgBox Err & " " & Error$, 16
Exit Function
End Function


Private Sub pntFillTables_getNoMedPrList_addProg(ByVal sProgNr As String, ByRef nProgs As Integer, ByRef sProgNrs() As String)

If bSearchString(sProgNr, nProgs, sProgNrs) < 0 Then
  insString sProgNr, nProgs, sProgNrs
End If

End Sub

Private Function pntFillTables_getNoMedPrList(ByRef pntInfo As PNT_GLOBAL_BASIC_INFO, ByRef wedInfo As WED_BASIC_INFO, ByRef nProgs As Integer, ByRef sProgNrs() As String) As Boolean
On Error GoTo fout
pntFillTables_getNoMedPrList = False


nProgs = 0

If (pntInfo.type <> PNT_TYPE_VER_MED) Then
  pntFillTables_getNoMedPrList = True
  Exit Function
End If


Dim prSQL As String
prSQL = wedGetProgsSQL(False, pntInfo.blEntireMeet, "", wedInfo.wednr, wedInfo.meetMainNr, False, False)

Dim prs As Recordset
Set prs = CurrentDb().OpenRecordset(prSQL)

prs.MoveFirst
Do Until prs.EOF
  Dim tpProgType As String, tpProgNr As String, tpPrvProgNr As String
  
  tpProgNr = Nz(prs(FNM_PR_PROG))
  tpProgType = Nz(prs(FNM_PR_TYPE))
  tpPrvProgNr = Nz(prs(FNM_PR_PRV_NR))
  
  If (tpProgType = PROG_TYPE_FST) Or (tpProgType = PROG_TYPE_SWOFF) Or (tpProgType = PROG_TYPE_QF) Or (tpProgType = PROG_TYPE_SF) _
    Or (tpProgType = PROG_TYPE_BFIN) Or (tpProgType = PROG_TYPE_CFIN) Then
    pntFillTables_getNoMedPrList_addProg tpProgNr, nProgs, sProgNrs
  End If
  
  If (tpPrvProgNr <> "") Then
    If (tpProgType = PROG_TYPE_QF) Or (tpProgType = PROG_TYPE_SF) Or (tpProgType = PROG_TYPE_FIN) Or _
      (tpProgType = PROG_TYPE_AFIN) Or (tpProgType = PROG_TYPE_BFIN) Or (tpProgType = PROG_TYPE_CFIN) Then
      pntFillTables_getNoMedPrList_addProg tpPrvProgNr, nProgs, sProgNrs
    End If
  End If

  prs.MoveNext
Loop


appCleanRS prs

pntFillTables_getNoMedPrList = True
Exit Function

fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntFillTables_getNoMedPrList" & vbCrLf & Error$, 16
Exit Function
End Function

Private Function pntFillTables_Perform(ByRef pntInfo As PNT_GLOBAL_BASIC_INFO, ByRef wedInfo As WED_BASIC_INFO) As Boolean
On Error GoTo fout
pntFillTables_Perform = False


Dim sql As String


If (pntInfo.type = PNT_TYPE_IND) Then
  sql = "INSERT INTO dtgPuntentellingOndCatDetails ( PTTM_Categorie, PTTM_Wedstrijdnummer, " & _
  "PTTM_OrderID, PTTM_OnderdeelCode, PTTM_TeltMee, PTTM_RequireValidTime ) " & _
  "SELECT dtgPuntentellingCats.PTC_Categorie, dtgPuntentellingOnderdelen.PTO_Wedstrijdnummer, " & _
  "dtgPuntentellingOnderdelen.PTO_OrderID, dtgPuntentellingOnderdelen.PTO_Code, True AS Expr1, " & _
  "false AS Expr2 " & _
  "FROM dtgPuntentellingCats, dtgPuntentellingOnderdelen " & _
  "WHERE (((dtgPuntentellingCats.PTC_Wedstrijdnummer)=" & pntInfo.wednr & ") AND ((dtgPuntentellingCats.PTC_OrderID)=" & _
  pntInfo.orderID & ") AND ((dtgPuntentellingOnderdelen.PTO_Wedstrijdnummer)=" & pntInfo.wednr & ") AND " & _
  "((dtgPuntentellingOnderdelen.PTO_OrderID)=" & pntInfo.orderID & "));"


  DoCmd.SetWarnings False
  DoCmd.RunSQL (sql)
  DoCmd.SetWarnings True
End If



Dim nNoMedProgs As Integer, sNoMedProgs(0 To MAX_N_PROGS) As String
If Not pntFillTables_getNoMedPrList(pntInfo, wedInfo, nNoMedProgs, sNoMedProgs) Then
  Exit Function
End If



'get list of programmanummers.
Dim prSQL As String
prSQL = wedGetProgsSQL(False, pntInfo.blEntireMeet, "", wedInfo.wednr, wedInfo.meetMainNr, False, False)

Dim prs As Recordset
Set prs = CurrentDb().OpenRecordset(prSQL)

Dim prOut As Recordset
Set prOut = CurrentDb().OpenRecordset("dtgPuntentellingProgs")
prOut.Index = "PrimaryKey"

prs.MoveFirst
Do Until prs.EOF
  Dim tpWed As Long
  Dim tpProg As String
  tpWed = Nz(prs(FNM_PR_WED))
  tpProg = Nz(prs(FNM_PR_PROG))
  
  prOut.Seek "=", pntInfo.wednr, pntInfo.orderID, tpWed, tpProg
  If prOut.NoMatch Then
    'have to insert.
    prOut.AddNew
      prOut("PTPR_Wedstrijdnummer") = pntInfo.wednr
      prOut("PTPR_OrderID") = pntInfo.orderID
      prOut("PTPR_ProgWedstrijdnummer") = tpWed
      prOut("PTPR_ProgProgrammanummer") = tpProg
      
      prOut("PTPR_ToevoegenDis") = pntTvDisDefault(Nz(prs(FNM_PR_AF)))
      prOut("PTPR_VervangendeTijd") = Nz(prs(FNM_PR_VVT))
      prOut("PTPR_NMeetellendeDeelnemers") = Nz(prs(FNM_PR_NCOMP))
      
      prOut("PTPR_MED_IncludeProg") = (bSearchString(tpProg, nNoMedProgs, sNoMedProgs) < 0)
      
    
    prOut.Update
  End If
  
  prs.MoveNext
Loop




pntFillTables_Perform = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntFillTables_Perform" & vbCrLf & Error$, 16
Exit Function
End Function


Public Function pntFillTables(ByVal wednr As Long, ByVal pntOrderID As Long) As Boolean
On Error GoTo fout
pntFillTables = False

Dim isFnd As Boolean

Dim wedInfo As WED_BASIC_INFO
If Not wedLookup(wednr, isFnd, wedInfo) Then
  Exit Function
End If

If Not isFnd Then
  Err.Raise 1, , "Kon wedstrijd: " & wednr & " niet vinden"
End If


Dim pntInfo As PNT_GLOBAL_BASIC_INFO


If Not pntGlobalLookup(wednr, pntOrderID, isFnd, pntInfo) Then
  Exit Function
End If

If Not isFnd Then
  Err.Raise 1, , "Kon puntentelling: ( " & wednr & " , " & pntOrderID & " ) niet vinden."
End If


If Not pntFillTables_Perform(pntInfo, wedInfo) Then
  Exit Function
End If



pntFillTables = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntFillTables" & vbCrLf & Error$, 16
Exit Function

'debug
On Error GoTo 0
Resume
End Function

Private Function pntInitWorkFields(ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef wedInf As WED_BASIC_INFO, ByVal blUseStdProgSettings, ByVal blCalcVVTs As Boolean) As Boolean
On Error GoTo fout
pntInitWorkFields = False



Dim nNoMedProgs As Integer
Dim sNoMedProgs(0 To MAX_N_PROGS) As String

If Not pntFillTables_getNoMedPrList(pntInf, wedInf, nNoMedProgs, sNoMedProgs) Then
  Exit Function
End If


Dim pntProgs As Recordset
Dim progs As Recordset

Set pntProgs = CurrentDb().OpenRecordset("Select * from dtgPuntentellingProgs where ptpr_Wedstrijdnummer=" & pntInf.wednr & " and ptpr_orderID=" & pntInf.orderID)

Set progs = CurrentDb().OpenRecordset(TNM_PR)
progs.Index = "PrimaryKey"


pntProgs.MoveFirst
Do Until pntProgs.EOF

  Dim tpWedNr As Long
  Dim tpProgNr As String
  
  tpWedNr = Nz(pntProgs("PTPR_ProgWedstrijdnummer"))
  tpProgNr = Nz(pntProgs("PTPR_ProgProgrammanummer"))
  
  
  
  
  
  If (blUseStdProgSettings) Then
    progs.Seek "=", tpWedNr, tpProgNr
  
    If progs.NoMatch Then
      Err.Raise 1, , "Internal error. Could not find programmanr: ( " & tpWedNr & ", " & tpProgNr & ")"
    End If
    
    Dim blIsNoMed As Boolean
    blIsNoMed = bSearchString(tpProgNr, nNoMedProgs, sNoMedProgs) >= 0
    
        
    pntProgs.Edit
      pntProgs("PTPR_WORK_TvDis") = pntTvDisDefault(Nz(progs(FNM_PR_AF)))
      If (Not blCalcVVTs) Then
        pntProgs("PTPR_WORK_VVT") = progs(FNM_PR_VVT)
      Else
        pntProgs("PTPR_WORK_VVT") = 0
      End If
      pntProgs("PTPR_WORK_NComp") = progs(FNM_PR_NCOMP)
      
      pntProgs("PTPR_WORK_MED_IncludeProg") = Not blIsNoMed
      
    pntProgs.Update
  Else
    pntProgs.Edit
      pntProgs("PTPR_WORK_NComp") = pntProgs("PTPR_NMeetellendeDeelnemers")
      pntProgs("PTPR_WORK_TvDis") = pntProgs("PTPR_ToevoegenDis")
      If (Not blCalcVVTs) Then
        pntProgs("PTPR_WORK_VVT") = pntProgs("PTPR_VervangendeTijd")
      Else
        pntProgs("PTPR_WORK_VVT") = 0
      End If
      pntProgs("PTPR_WORK_MED_IncludeProg") = pntProgs("PTPR_MED_IncludeProg")
    pntProgs.Update
  End If
  
  
  
  pntProgs.MoveNext
Loop
  
appCleanRS pntProgs
appCleanRS progs



pntInitWorkFields = True
Exit Function

fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntInitWorkFields" & vbCrLf & Error$, 16
Exit Function

'debug
On Error GoTo 0
Resume
End Function


Private Function pntBufferWorkFields(ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal sBuffer As String) As Boolean
On Error GoTo fout
pntBufferWorkFields = False


Dim sql As String

DoCmd.SetWarnings False

sql = "UPDATE dtgPuntentellingProgs SET dtgPuntentellingProgs.PTPR_BUFFER_" & sBuffer & "_NComp = [ptpr_work_ncomp], " & _
"dtgPuntentellingProgs.PTPR_BUFFER_" & sBuffer & "_VVT = [ptpr_work_vvt], dtgPuntentellingProgs.PTPR_BUFFER_" & sBuffer & "_TvDis = " & _
"[ptpr_work_tvdis] WHERE (((dtgPuntentellingProgs.PTPR_Wedstrijdnummer)=" & pntInf.wednr & ") AND ((dtgPuntentellingProgs.PTPR_OrderID)=" & pntInf.orderID & "));"

DoCmd.RunSQL sql

DoCmd.SetWarnings True

  


pntBufferWorkFields = True
Exit Function

fout:
DoCmd.SetWarnings True
MsgBox Err & " pntBufferWorkFields" & vbCrLf & Error$, 16
Exit Function
End Function

Private Function pntRestoreWorkFields(ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal sBuffer As String) As Boolean
On Error GoTo fout
pntRestoreWorkFields = False


Dim sql As String

DoCmd.SetWarnings False

sql = "UPDATE dtgPuntentellingProgs SET ptpr_work_ncomp = PTPR_BUFFER_" & sBuffer & "_NComp , " & _
"ptpr_work_vvt = PTPR_BUFFER_" & sBuffer & "_VVT , ptpr_work_tvdis = PTPR_BUFFER_" & sBuffer & "_TvDis  " & _
"WHERE (((dtgPuntentellingProgs.PTPR_Wedstrijdnummer)=" & pntInf.wednr & ") AND ((dtgPuntentellingProgs.PTPR_OrderID)=" & pntInf.orderID & "));"

DoCmd.RunSQL sql

DoCmd.SetWarnings True

  

pntRestoreWorkFields = True
Exit Function

fout:
DoCmd.SetWarnings True
MsgBox Err & " pntRestoreWorkFields" & vbCrLf & Error$, 16
Exit Function
End Function


Private Function pntInitOndCatWorkFields(ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntIndOpts As PNT_IND_OPTIONS) As Boolean
On Error GoTo fout
pntInitOndCatWorkFields = False


Dim pntOndCat As Recordset

Set pntOndCat = CurrentDb().OpenRecordset("Select * from dtgPuntentellingOndCatDetails where pttm_Wedstrijdnummer=" & pntInf.wednr & " and pttm_orderID=" & pntInf.orderID)


pntOndCat.MoveFirst
Do Until pntOndCat.EOF
  
    pntOndCat.Edit
      pntOndCat("PTTM_WORK_RequireValidTime") = pntOndCat("PTTM_RequireValidTime")
      If (pntIndOpts.vvtOpts.blCalcVVTs) Then
        pntOndCat("PTTM_WORK_VervangendeTijd") = 0
        pntOndCat("PTTM_WORK_VervangendePunten") = 0
      Else
        pntOndCat("PTTM_WORK_VervangendeTijd") = pntOndCat("PTTM_VervangendeTijd")
        pntOndCat("PTTM_WORK_VervangendePunten") = pntOndCat("PTTM_VervangendePunten")
      End If
    pntOndCat.Update
  
  pntOndCat.MoveNext
Loop
  
appCleanRS pntOndCat


pntInitOndCatWorkFields = True
Exit Function

fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntInitOndCatWorkFields" & vbCrLf & Error$, 16
Exit Function

'debug
On Error GoTo 0
Resume
End Function


Private Function pntBufferOndCatWorkFields(ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal sBuffer As String) As Boolean
On Error GoTo fout
pntBufferOndCatWorkFields = False


Dim sql As String

DoCmd.SetWarnings False

sql = "UPDATE dtgPuntentellingOndCatDetails SET dtgPuntentellingOndCatDetails.PTTM_BUFFER_" & sBuffer & "_RequireValidTime = [pttm_work_RequireValidTime], " & _
"dtgPuntentellingOndCatDetails.PTTM_BUFFER_" & sBuffer & "_VervangendeTijd = [pttm_work_vervangendeTijd], " & _
"dtgPuntentellingOndCatDetails.PTTM_BUFFER_" & sBuffer & "_VervangendePunten = " & _
"[pttm_work_vervangendePunten] WHERE (((dtgPuntentellingOndCatDetails.PTTM_Wedstrijdnummer)=" & pntInf.wednr & ") AND ((dtgPuntentellingOndCatDetails.PTTM_OrderID)=" & pntInf.orderID & "));"

DoCmd.RunSQL sql

DoCmd.SetWarnings True

  


pntBufferOndCatWorkFields = True
Exit Function

fout:
DoCmd.SetWarnings True
MsgBox Err & " pntBufferOndCatWorkFields" & vbCrLf & Error$, 16
Exit Function
End Function

Private Function pntRestoreOndCatWorkFields(ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal sBuffer As String) As Boolean
On Error GoTo fout
pntRestoreOndCatWorkFields = False


Dim sql As String

DoCmd.SetWarnings False

sql = "UPDATE dtgPuntentellingOndCatDetails SET pttm_work_RequireValidTime = PTTM_BUFFER_" & sBuffer & "_RequireValidTime , " & _
"pttm_work_vervangendeTijd = PTTM_BUFFER_" & sBuffer & "_VervangendeTijd , pttm_work_vervangendePunten = PTTM_BUFFER_" & sBuffer & "_vervangendePunten  " & _
"WHERE (((dtgPuntentellingOndCatDetails.PTTM_Wedstrijdnummer)=" & pntInf.wednr & ") AND ((dtgPuntentellingOndCatDetails.PTTM_OrderID)=" & pntInf.orderID & "));"

DoCmd.RunSQL sql

DoCmd.SetWarnings True

  

pntRestoreOndCatWorkFields = True
Exit Function

fout:
DoCmd.SetWarnings True
MsgBox Err & " pntRestoreOndCatWorkFieldss" & vbCrLf & Error$, 16
Exit Function
End Function




'Lookup wedinfo and fill tables.
Private Function pntCalcPrepareGlobal(ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef wedInf As WED_BASIC_INFO) As Boolean
On Error GoTo fout
pntCalcPrepareGlobal = False


Dim isFnd As Boolean

If Not wedLookup(pntInf.wednr, isFnd, wedInf) Then
  Exit Function
End If

If Not isFnd Then
  Err.Raise 1, , "Kon wedstrijd: " & pntInf.wednr & " niet vinden."
End If


If (pntInf.orderID <> -1) Then
  If Not pntFillTables_Perform(pntInf, wedInf) Then
    Exit Function
  End If
End If


'If Not pntRestoreWorkFields(pntInf) Then
'  Exit Function
'End If



pntCalcPrepareGlobal = True
Exit Function
fout:
DoCmd.SetWarnings True
MsgBox Err & " pntCalcPrepareGlobal" & vbCrLf & Error$, 16
Exit Function
End Function




Private Function pntCalcInd_driver_post_vvt(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntIndOpts As PNT_IND_OPTIONS, pntCalcMode) As Boolean
On Error GoTo fout
pntCalcInd_driver_post_vvt = False




If Not pntCalcInd_Perform(wedInf, pntInf, pntIndOpts, pntCalcMode) Then
  Exit Function
End If
  
 


pntCalcInd_driver_post_vvt = True
Exit Function
fout:
DoCmd.SetWarnings True
MsgBox Err & " pntCalcInd_driver_post_vvt" & vbCrLf & Error$, 16
Exit Function
'debug
On Error GoTo 0
Resume
End Function




Private Function pntCalcInd_calc_vvts_set_work(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntIndOpts As PNT_IND_OPTIONS) As Boolean
On Error GoTo fout
pntCalcInd_calc_vvts_set_work = False

'Need only consider the competitors.
  


Dim pntOndCat As Recordset

Set pntOndCat = CurrentDb().OpenRecordset("Select * from dtgPuntentellingOndCatDetails where pttm_Wedstrijdnummer=" & pntInf.wednr & " and pttm_orderID=" & pntInf.orderID)

pntOndCat.MoveFirst
Do Until pntOndCat.EOF
 

  pntOndCat.Edit
    'allow disqualifications, but do not use vvt or vvp
    pntOndCat("PTTM_WORK_requireValidTime") = False
    pntOndCat("PTTM_WORK_vervangendeTijd") = 0
    pntOndCat("PTTM_WORK_vervangendePunten") = 0
    
  pntOndCat.Update
  
  pntOndCat.MoveNext
Loop

appCleanRS pntOndCat






Dim pntProgs As Recordset
Dim progs As Recordset

Set pntProgs = CurrentDb().OpenRecordset("Select * from dtgPuntentellingProgs where ptpr_Wedstrijdnummer=" & pntInf.wednr & " and ptpr_orderID=" & pntInf.orderID)

Set progs = CurrentDb().OpenRecordset(TNM_PR)
progs.Index = "PrimaryKey"




pntProgs.MoveFirst
Do Until pntProgs.EOF

  Dim tpWedNr As Long
  Dim tpProgNr As String
  
  tpWedNr = Nz(pntProgs("PTPR_ProgWedstrijdnummer"))
  tpProgNr = Nz(pntProgs("PTPR_ProgProgrammanummer"))
  
  progs.Seek "=", tpWedNr, tpProgNr
  
  If progs.NoMatch Then
    Err.Raise 1, , "Internal error. Could not find programmanr: ( " & tpWedNr & ", " & tpProgNr & ")"
  End If
  
    

  Dim newTvDis As Double
  
  
  Dim tpAf As String, tpEstAf As Boolean
  tpAf = Nz(progs(FNM_PR_AF))
  tpEstAf = tpAf Like "*x*"
  
  Dim tpTotAf As Double
  If (tpEstAf) Then
    tpTotAf = CLng(afstand_n_zwemmers(tpAf) * afstand_ind_part(tpAf))
  Else
    tpTotAf = CLng(val(tpAf))
  End If
  
  
  newTvDis = 0
  
  If Not pntNewTvDis(tpTotAf, pntIndOpts.vvtOpts, newTvDis) Then
    Exit Function
  End If
  
  
  'Calculated the disqualification penalty
  
  pntProgs.Edit
    pntProgs("PTPR_WORK_TvDis") = newTvDis
  pntProgs.Update
  
  pntProgs.MoveNext
Loop
  

appCleanRS pntProgs
appCleanRS progs






pntCalcInd_calc_vvts_set_work = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcInd_calc_vvts_set_work" & vbCrLf & Error$, 16
Exit Function

'debug
On Error GoTo 0
Resume

End Function




'This procedure updates the WORK_VVT field in the dtgOndCatDetails table to reflect the vvt calculated
'from the times of the swimmers that compete in the puntentelling.

Private Function pntCalcInd_calc_vvts_from_comps(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntIndOpts As PNT_IND_OPTIONS, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalcInd_calc_vvts_from_comps = False





'We create a new set of options for performing the puntentelling.

'First backup the current work fields.
If Not pntBufferOndCatWorkFields(pntInf, "A") Then
  Exit Function
End If

If Not pntBufferWorkFields(pntInf, "A") Then
  Exit Function
End If


Dim newPntIndOpts As PNT_IND_OPTIONS
newPntIndOpts = pntIndOpts


'Now correctly update the work fields to set requireValidTime to true and vvt and vvp to zero.
'also update the tv_dis fields in pntProgs
If Not pntCalcInd_calc_vvts_set_work(wedInf, pntInf, pntIndOpts) Then
  Exit Function
End If



'Now calculate a table of results using these updated options

If Not pntCalcInd_driver_post_vvt(wedInf, pntInf, newPntIndOpts, pntCalcMode) Then
  Exit Function
End If



'Restore the work fields.

If Not pntRestoreWorkFields(pntInf, "A") Then
  Exit Function
End If

If Not pntRestoreOndCatWorkFields(pntInf, "A") Then
  Exit Function
End If



'Load category structure...
Dim catInfo(0 To PNT_IND_MAX_N_CATS) As CAT_INFO
Dim catPntInfo(0 To PNT_IND_MAX_N_CATS) As PNT_CAT_INFO
Dim catOnd(0 To PNT_IND_MAX_N_CATOND) As PNT_CATOND_INFO
Dim nCats As Integer

If Not pntGetCatStructure(wedInf, pntInf, nCats, catInfo, catPntInfo, catOnd) Then
  Exit Function
End If


'Scan the results in ~pntUitslagInd table to determine new VVT
Dim pnt As Recordset
Set pnt = CurrentDb().OpenRecordset("select * from [~pntUitslagInd] order by ut_categorie")

Dim pntOndCat As Recordset
Set pntOndCat = CurrentDb().OpenRecordset("dtgPuntentellingOndCatDetails")
pntOndCat.Index = "PrimaryKey"


Dim curCat As String, curCatIdx As Integer
Dim tpCat As String

curCat = ""





Dim eofflag As Boolean

pnt.MoveFirst

eofflag = pnt.EOF




Dim ondNewVVP(0 To PNT_IND_MAX_N_CATOND) As Double


Do Until eofflag
  If (pnt.EOF) Then
    eofflag = True
    tpCat = ""
  Else
    tpCat = Trim(Nz(pnt("UT_Categorie")))
  End If
  
  
  If (tpCat <> curCat) Then
    If (curCat <> "") Then
      'update the vervangende tijd / punten
      
      Dim i As Integer
      For i = 0 To catPntInfo(curCatIdx).ondCnt - 1
        Dim ondIdx As Integer
        ondIdx = catPntInfo(curCatIdx).ondOffset + i
        If (catOnd(ondIdx).blTeltMee) Then
          Dim sOndCode As String
          sOndCode = catOnd(ondIdx).Code
          pntOndCat.Seek "=", pntInf.wednr, pntInf.orderID, curCat, sOndCode
          If (pntOndCat.NoMatch) Then
            Err.Raise 1, , "Internal error"
          End If
          
          
          pntOndCat.Edit
            If (pntIndOpts.tdToPointMode = PNT_TD_TO_PNT_MODE_SEC) Then
              pntOndCat("PTTM_WORK_VervangendeTijd") = swtFromSeconds(ondNewVVP(ondIdx))
            Else
              pntOndCat("PTTM_WORK_VervangendePunten") = ondNewVVP(ondIdx)
            End If
          pntOndCat.Update
          
        End If
      Next i
      
      
  
    End If 'if curCat <> ""
    
    curCat = tpCat
    
    
    If (tpCat <> "") Then
      curCatIdx = -1
      For i = 0 To nCats - 1
        If Trim(catInfo(i).cat) = tpCat Then
          curCatIdx = i
          Exit For
        End If
      Next i
      
      If (curCatIdx = -1) Then
        Err.Raise 1, , "internal error"
      End If
      
         
      For i = 0 To catPntInfo(curCatIdx).ondCnt - 1
        ondIdx = catPntInfo(curCatIdx).ondOffset + i
        ondNewVVP(ondIdx) = 0
      Next i
      
    End If 'if tpCat <> ""

  End If 'if tpCat <> curCat
  
  
  
  
  If (Not eofflag) Then
  
    Dim tpGes As String
    tpGes = Nz(pnt("UT_Geslacht"))
  
    'Need to analyze times and update maximum.
    For i = 0 To catPntInfo(curCatIdx).ondCnt - 1
      ondIdx = catPntInfo(curCatIdx).ondOffset + i
      
      If (catOnd(ondIdx).blTeltMee) Then
      
        sOndCode = catOnd(ondIdx).Code
        
        Dim tpPnt As Double
        tpPnt = Nz(pnt("UT_Punten" & sOndCode))
        
        If (tpPnt > 0.5) Then
        
          Dim tpNewSecs As Double
          tpNewSecs = swtToSeconds(pnt("UT_Tijd" & sOndCode)) + Nz(pnt("UT_TDIS" & sOndCode))
          
          'now add the additional penalty factor
          Dim tpAf As String, tpSl As String
          tpAf = Nz(pnt("UT_Afstand" & sOndCode))
          tpSl = Nz(pnt("UT_Slag" & sOndCode))
          
          
          Dim tpNewTime As Double
          If Not pntNewVVT(tpNewSecs, val(tpAf), pntIndOpts.vvtOpts, tpNewTime) Then
            Exit Function
          End If
          
          Dim tpNewPnts As Double
          tpNewPnts = 0
          
          If (swtIsValid(tpNewTime)) Then
            Select Case pntIndOpts.tdToPointMode
              Case PNT_TD_TO_PNT_MODE_LEN
                tpNewPnts = lenCalcFinaPoints(tpNewTime, tpAf, tpSl, tpGes, wedInf.baan)
              Case PNT_TD_TO_PNT_MODE_SEC
                tpNewPnts = swtToSeconds(tpNewTime)
              Case PNT_TD_TO_PNT_MODE_SECFIFTY
                tpNewPnts = swtToSeconds(tpNewTime)
                Dim dValAf As Double
                dValAf = val(tpAf)
                If (dValAf > LIMEPS) Then
                  tpNewPnts = 50 * tpNewPnts / dValAf
                End If
            Case PNT_TD_TO_PNT_MODE_SECHND
              tpNewPnts = swtToSeconds(tpNewTime)
              dValAf = val(tpAf)
              If (dValAf > LIMEPS) Then
                tpNewPnts = 100 * tpNewPnts / dValAf
              End If
            End Select
          End If 'if swtIsValid
          
          
          If (tpNewPnts > 0.5) Then
            If (ondNewVVP(ondIdx) > 0.5) Then
              If (pntIndOpts.tdToPointMode = PNT_TD_TO_PNT_MODE_LEN) Then
                If (tpNewPnts < ondNewVVP(ondIdx)) Then
                  ondNewVVP(ondIdx) = tpNewPnts
                End If
              Else
                If (tpNewPnts > ondNewVVP(ondIdx)) Then
                  ondNewVVP(ondIdx) = tpNewPnts
                End If
              End If
            Else
              ondNewVVP(ondIdx) = tpNewPnts
            End If
          End If 'if tpNewPnts > 0.5
          
          
        End If 'if tpPnt > 0.5
        
      
      
      End If 'if catOnd.blTeltMeed
      
      
    Next i 'ondCnt
      
  
    pnt.MoveNext
  End If 'if not eofflag
Loop


appCleanRS pnt
appCleanRS pntOndCat



pntCalcInd_calc_vvts_from_comps = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcInd_calc_vvts_from_comps" & vbCrLf & Error$, 16
Exit Function

'debug
On Error GoTo 0
Resume
End Function



Private Function pntCalcInd_driver(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntIndOpts As PNT_IND_OPTIONS, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalcInd_driver = False

Dim newPntIndOpts As PNT_IND_OPTIONS


newPntIndOpts = pntIndOpts

If pntIndOpts.vvtOpts.blCalcVVTs Then
  'Need to calculate VVTs.

  If (pntInf.orderID = -1) Then
    Err.Raise 1, , "Internal error."
  End If


  'Call procedures that set the WORK_VVT fields to their correct values
  If Not pntCalcInd_calc_vvts_from_comps(wedInf, pntInf, newPntIndOpts, pntCalcMode) Then
    Exit Function
  End If
  

End If

'Vervangende tijden have been determined.
'Start the actual calculation

If Not pntCalcInd_driver_post_vvt(wedInf, pntInf, newPntIndOpts, pntCalcMode) Then
  Exit Function
End If

pntCalcInd_driver = True
Exit Function
fout:
MsgBox Err & " pntCalcInd_driver" & vbCrLf & Error$, 16
Exit Function
End Function



Public Function pntCalcInd(ByRef pntInfo As PNT_GLOBAL_BASIC_INFO, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalcInd = False


Dim wedInf As WED_BASIC_INFO

If Not pntCalcPrepareGlobal(pntInfo, wedInf) Then
  Exit Function
End If


'Need to transfer settings
If Not uitslagTransferSettings(wedInf.wednr, pntInfo.blEntireMeet) Then
  Exit Function
End If



Dim pntIndOpts As PNT_IND_OPTIONS

Dim isFnd As Boolean

If Not pntINDLookup(pntInfo.wednr, pntInfo.orderID, isFnd, pntIndOpts) Then
  Exit Function
End If

If Not isFnd Then
  Err.Raise 1, , "Kon puntentelling: " & pntInfo.wednr & " , " & pntInfo.orderID & " )  niet vinden"
End If


If (pntCalcMode = PNT_CALC_MODE_RESULT) Then
  If Not wedAppendMissingTimes(pntInfo.wednr, pntInfo.blEntireMeet, False, "") Then
    Exit Function
  End If
End If



'Always use the fields from pntProgs
If Not pntInitWorkFields(pntInfo, wedInf, False, False) Then
  Exit Function
End If

If Not pntInitOndCatWorkFields(pntInfo, pntIndOpts) Then
  Exit Function
End If


If Not pntCalcInd_driver(wedInf, pntInfo, pntIndOpts, pntCalcMode) Then
  Exit Function
End If

'If Not pntCalcInd_Perform(wedInf, pntInfo, pntIndOpts, pntCalcMode) Then
'  Exit Function
'End If

If Not pntCalcInd_ApplyRanking(wedInf, pntInfo, pntIndOpts) Then
  Exit Function
End If

pntCalcInd = True
Exit Function
fout:
MsgBox Err & " pntCalcInd" & vbCrLf & Error$, 16
Exit Function
End Function


Private Function pntCalcInd_Perform(ByRef wedInf As WED_BASIC_INFO, ByRef pntInfo As PNT_GLOBAL_BASIC_INFO, ByRef pntIndOpts As PNT_IND_OPTIONS, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalcInd_Perform = False


Dim isFnd As Boolean

If Not pntCalcIndCreateTables(pntInfo, "~pntUitslagInd") Then
  Exit Function
End If


'Build up a list of valid ABC codes
Dim sValidABC(0 To 1000) As String
Dim nValidABC As Integer

nValidABC = 0
If (pntIndOpts.rnkOpts.blRestrictABC) Then
  Dim tpTok As String
  tpTok = Trim(extractToken(pntIndOpts.rnkOpts.sABCCodes, ";"))
  While (Len(tpTok) > 0)
     insString tpTok, nValidABC, sValidABC
     tpTok = Trim(extractToken(pntIndOpts.rnkOpts.sABCCodes, ";"))
  Wend
End If





Dim outp As Recordset
Set outp = CurrentDb().OpenRecordset("~pntUitslagInd")



'Load category structure...
Dim catInfo(0 To PNT_IND_MAX_N_CATS) As CAT_INFO
Dim catPntInfo(0 To PNT_IND_MAX_N_CATS) As PNT_CAT_INFO
Dim catOnd(0 To PNT_IND_MAX_N_CATOND) As PNT_CATOND_INFO
Dim nCats As Integer

If Not pntGetCatStructure(wedInf, pntInfo, nCats, catInfo, catPntInfo, catOnd) Then
  Exit Function
End If


'Initialize some recordset
Dim pntPrs As Recordset
Set pntPrs = CurrentDb().OpenRecordset("dtgPuntentellingProgs")
pntPrs.Index = "PrimaryKey"

Dim prs As Recordset
Set prs = CurrentDb().OpenRecordset("dtProgramma")
prs.Index = "PrimaryKey"

Dim pntDlV As Recordset
Set pntDlV = CurrentDb().OpenRecordset("dtgPuntentellingDlnVers")
pntDlV.Index = "PrimaryKey"

Dim pntTstInd As Recordset
Set pntTstInd = CurrentDb().OpenRecordset("dtgPuntentellingTussenstandInd")
pntTstInd.Index = "PrimaryKey"



Dim tySql As String

If (pntCalcMode = PNT_CALC_MODE_RESULT) Then
  tySql = tyGetResultsPersSQL(False, pntInfo.blEntireMeet, "", wedInf.wednr, wedInf.meetMainNr)
  tySql = tySql & " order by " & FNM_TY_PERS_VER_TO_ORDER & ", [" & FNM_TY_PERS_START & "] ;"
ElseIf (pntCalcMode = PNT_CALC_MODE_ESTIMATE) Or (pntCalcMode = PNT_CALC_MODE_TEST) Then
  tySql = dlnGetDeelnemersPersSQL(False, pntInfo.blEntireMeet, "", wedInf.wednr, wedInf.meetMainNr, False)
  tySql = tySql & " order by " & FNM_DE_PERS_VER_TO_ORDER & ", " & FNM_DE_PERS_STARTNR_TO_ORDER & " ;"
End If

Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset(tySql)


Dim curVer As String
Dim curVerRestricted As Boolean

Dim curStart As String
Dim curGeslacht As String
Dim curNaam As String
Dim curABC As String

Dim curIsValid As Boolean
Dim curCatIdx As Integer
Dim curOndOffset As Integer
Dim curOndCnt As Integer
Dim curInitPoints As Double
Dim curInitPointsValid As Boolean

Dim curActWednr(0 To PNT_IND_MAX_N_CATOND) As Long
Dim curActPrognr(0 To PNT_IND_MAX_N_CATOND) As String
Dim curActIsDis(0 To PNT_IND_MAX_N_CATOND) As Boolean
Dim curActTimes(0 To PNT_IND_MAX_N_CATOND) As Double
Dim curActAfstand(0 To PNT_IND_MAX_N_CATOND) As String
Dim curActSlag(0 To PNT_IND_MAX_N_CATOND) As String


Dim curPntTimes(0 To PNT_IND_MAX_N_CATOND) As Double
Dim curPntTvDis(0 To PNT_IND_MAX_N_CATOND) As Double
Dim curPntIsVV(0 To PNT_IND_MAX_N_CATOND) As Boolean

Dim curPoints(0 To PNT_IND_MAX_N_CATOND) As Double
Dim curPointsValid(0 To PNT_IND_MAX_N_CATOND) As Boolean



curIsValid = False
curVer = ""
curVerRestricted = False

curStart = ""

Dim i As Integer


rs.MoveFirst
Dim blEOFFlag As Boolean
blEOFFlag = rs.EOF
Do Until blEOFFlag

  Dim tpVer As String
  Dim tpStart As String

  If (rs.EOF) Then
    blEOFFlag = True
    tpVer = ""
    tpStart = ""
  Else
  
    If (pntCalcMode = PNT_CALC_MODE_RESULT) Then
      tpVer = Nz(rs(FNM_TY_PERS_VER))
      tpStart = Nz(rs(FNM_TY_PERS_START))
    ElseIf (pntCalcMode = PNT_CALC_MODE_ESTIMATE) Or (pntCalcMode = PNT_CALC_MODE_TEST) Then
      tpVer = Nz(rs(FNM_DE_PERS_VER))
      tpStart = Nz(rs(FNM_DE_PERS_STARTNR))
    End If
    
  End If
  
  If (curVer <> tpVer Or curStart <> tpStart) Then
    If (curIsValid) Then
      'wrap up swimmer.
      
      Dim blPointsValid As Boolean
      blPointsValid = True
      
      Dim totPoints As Double
      totPoints = 0
      
      Dim isEmpty As Boolean
      isEmpty = True
      
      'first check initial time
      If (pntIndOpts.blUseTst) Then
        If (Not curInitPointsValid) Then
          blPointsValid = False
        Else
          isEmpty = False
        End If
        totPoints = totPoints + curInitPoints
      End If
      
      For i = 0 To curOndCnt - 1
        With catOnd(curOndOffset + i)
          If (.blTeltMee) Then
            If curPointsValid(curOndOffset + i) Then
              totPoints = totPoints + curPoints(curOndOffset + i)
              isEmpty = False
            Else
              blPointsValid = False
            End If
          End If
        End With
      Next i
      
      'Now write swimmer to uitslag.
      If Not isEmpty Then
        outp.AddNew
          outp("UT_PNT_Wedstrijdnummer") = pntInfo.wednr
          outp("UT_PNT_OrderID") = pntInfo.orderID
          outp("UT_Vereniging") = hzn(curVer)
          outp("UT_Startnummer") = hzn(curStart)
          outp("UT_Geslacht") = hzn(curGeslacht)
          outp("UT_Naam") = hzn(curNaam)
          outp("UT_Categorie") = hzn(catPntInfo(curCatIdx).cat)
          outp("UT_CatOrder") = catPntInfo(curCatIdx).catOrder
          outp("UT_CatDescription") = hzn(catPntInfo(curCatIdx).bescat)
          If (Not blPointsValid) Then
            outp("UT_Eindpunten") = 0
          Else
            outp("UT_Eindpunten") = totPoints
          End If
          outp("UT_ABC") = hzn(curABC)
        
          For i = 0 To curOndCnt - 1
            With catOnd(curOndOffset + i)
              If (.blTeltMee) Then
                outp("UT_Tijd" & .Code) = curPntTimes(curOndOffset + i)
                outp("UT_TDis" & .Code) = curPntTvDis(curOndOffset + i)
                outp("UT_Punten" & .Code) = curPoints(curOndOffset + i)
                outp("UT_IsVV" & .Code) = curPntIsVV(curOndOffset + i)
                outp("UT_IsDis" & .Code) = curActIsDis(curOndOffset + i)
                outp("UT_Afstand" & .Code) = hzn(curActAfstand(curOndOffset + i))
                outp("UT_Slag" & .Code) = hzn(curActSlag(curOndOffset + i))
              End If
            End With
          Next i
          
          If pntIndOpts.blUseTst Then
            If (curInitPointsValid) Then
              outp("UT_Tussenstand") = curInitPoints
            End If
          End If
        
        outp.Update
      End If 'if not isEmpty
      
      
    End If ' if (curIsValid)
    
    
    'New swimmer.
    

    
    
    
    'update curVer
    If (tpVer <> curVer) Then
      curVer = tpVer
      Dim verAllowed As Boolean
      
      If Not pntFindVerRestriction(pntDlV, wedInf, pntInfo, curVer, pntIndOpts.blRestrictVers, verAllowed) Then
        Exit Function
      End If
      curVerRestricted = Not verAllowed
    End If
    
    'update curStart
    curStart = tpStart
    
    'check to see if this swimmer is valid
    curIsValid = True
    
    If (tpStart = "" Or tpVer = "") Then
      curIsValid = False
    End If
    
    
    If (curIsValid) Then
      If curVerRestricted Then
        curIsValid = False
      End If
    End If
    
    If (curIsValid) Then
      'perform initialisations.
      
      Dim tpGebDat As Date
      Dim tpGes As String
      Dim tpNaam As String
      
      If (pntCalcMode = PNT_CALC_MODE_RESULT) Then
        tpGebDat = Nz(rs(FNM_NA_GEBDAT), #1/1/1900#)
        tpGes = Nz(rs(FNM_NA_GES))
        tpNaam = Nz(rs(FNM_TY_PERS_NAAM))
      ElseIf (pntCalcMode = PNT_CALC_MODE_ESTIMATE) Or (pntCalcMode = PNT_CALC_MODE_TEST) Then
        tpGebDat = Nz(rs(FNM_NA_GEBDAT), #1/1/1900#)
        tpGes = Nz(rs(FNM_NA_GES))
        tpNaam = Nz(rs(FNM_DE_PERS_NAAM))
      End If
      
      curCatIdx = catInfoGetSatisfiedCatIdxFromList(wedInf.ageDate, wedInf.lftBep, curStart, tpGes, tpGebDat, 0, nCats, catInfo)
      If (curCatIdx < 0) Then
        curIsValid = False
      Else
        curOndCnt = catPntInfo(curCatIdx).ondCnt
        curOndOffset = catPntInfo(curCatIdx).ondOffset
        
        curGeslacht = tpGes
        curNaam = tpNaam
      End If
    End If
    
    
    'Apply RNK_OPTIONS regarding abc
    If (curIsValid) Then
    
      If (pntCalcMode = PNT_CALC_MODE_RESULT) Then
        curABC = Nz(rs("TY_A/B/C"))
      ElseIf (pntCalcMode = PNT_CALC_MODE_ESTIMATE) Or (pntCalcMode = PNT_CALC_MODE_TEST) Then
        curABC = Nz(rs(FNM_DE_PERS_ABC))
      End If
    
      If (pntIndOpts.rnkOpts.blRestrictABC) Then
        If (bSearchString(curABC, nValidABC, sValidABC) < 0) Then
          'The abc code was not listed as valid.
          curIsValid = False
        End If
      End If
    End If
    
    If (curIsValid) Then
      If Not (pntIndOpts.rnkOpts.blRespectABC) Then
        curABC = ""
      End If
    End If
    

      
      
    
    If (curIsValid) Then
      
      If Not pntFindZwmInitVal(pntTstInd, wedInf, pntInfo, pntIndOpts.blUseTst, curVer, curStart, curInitPoints, isFnd) Then
        Exit Function
      End If
      
      
      curInitPointsValid = True
      
      If (curInitPoints < LIMEPS) Then
        curInitPointsValid = False
      End If
    
      
      If (Not isFnd) Then
        'Don't know what to do here yet.
        curInitPointsValid = False
      End If
    
    
      For i = 0 To curOndCnt - 1
      
      
        curActIsDis(curOndOffset + i) = False
        curActTimes(curOndOffset + i) = 0
        curActWednr(curOndOffset + i) = 0
        curActPrognr(curOndOffset + i) = ""
        curActAfstand(curOndOffset + i) = ""
        curActSlag(curOndOffset + i) = ""
        
        curPntTvDis(curOndOffset + i) = 0
        
        With catOnd(curOndOffset + i)
        
          Dim blCanUseVV As Boolean
          Dim vvPoints As Double
          Dim vvTime As Double
          
          blCanUseVV = False
          vvPoints = 0
          vvTime = 0
        
          If pntIndOpts.tdToPointMode = PNT_TD_TO_PNT_MODE_SEC Then
            If (Not .blRequireValidTime) And (.vvTijd > LIMEPS) Then
              blCanUseVV = True
              vvPoints = swtToSeconds(.vvTijd)
              vvTime = .vvTijd
            End If
          Else 'if not TijdMode = SEC
            If (Not .blRequireValidTime) And (.vvPnts > LIMEPS) Then
              blCanUseVV = True
              vvPoints = .vvPnts
            End If
          End If
          
          curPntIsVV(curOndOffset + i) = blCanUseVV
          curPntTimes(curOndOffset + i) = vvTime
          curPoints(curOndOffset + i) = vvPoints
          curPointsValid(curOndOffset + i) = vvPoints > LIMEPS
          
        End With
      Next i
    End If 'if curIsValid
    
  End If 'if curVer<> tpVer or curStart <> tpStart
  
  'Exit the loop if we are done.
  If (blEOFFlag) Then
    Exit Do
  End If
  
  If curIsValid Then
    'process the current time.
    
    'First find out all about the programma.
    Dim tpWedNr As String
    Dim tpProgNr As String
    
    Dim tpPntProgInfo As PNT_PROG_INFO
    
    
    Dim tpOndIdx As Long
    
    
    If (pntCalcMode = PNT_CALC_MODE_RESULT) Then
      tpWedNr = Nz(rs(FNM_TY_WED))
      tpProgNr = Nz(rs(FNM_TY_PROG))
    ElseIf (pntCalcMode = PNT_CALC_MODE_ESTIMATE) Or (pntCalcMode = PNT_CALC_MODE_TEST) Then
      tpWedNr = Nz(rs(FNM_DE_PERS_WEDNR))
      tpProgNr = Nz(rs(FNM_DE_PERS_PROG))
    End If
    
    
    'Do NOT use standard prog settings; as we need to extra non-default stuff.
    If Not pntFindProgPntInfo(pntPrs, prs, wedInf, pntInfo, False, tpWedNr, tpProgNr, tpPntProgInfo, isFnd) Then
      Exit Function
    End If
    
    If Not isFnd Then
      Err.Raise 1, , "Kon prognr: ( " & tpWedNr & " , " & tpProgNr & " ) niet vinden."
    End If
    
    tpOndIdx = -1
    If (tpPntProgInfo.onderdeel <> "") Then
      For i = 0 To curOndCnt - 1
        If (catOnd(curOndOffset + i).Code = tpPntProgInfo.onderdeel) Then
          tpOndIdx = curOndOffset + i
          Exit For
        End If
      Next i
    End If
    
    
    If (tpOndIdx <> -1) Then
      'can now analyze and handle the swum time.
      
      Dim tpActTime As Double
      Dim tpActDis As String
      
      Dim tpActTimeCorrected As Double
      Dim tpActTvDis As Double
      Dim tpIsBM As Boolean
           
           
           
      If (pntCalcMode = PNT_CALC_MODE_RESULT) Then
        tpActTime = Nz(rs(FNM_TY_PERS_EINDTIJD))
        tpActDis = Nz(rs(FNM_TY_PERS_DIS))
        tpIsBM = Nz(rs(FNM_TY_PERS_BM) = "J")
      ElseIf (pntCalcMode = PNT_CALC_MODE_ESTIMATE) Then
        tpActTime = Nz(rs(FNM_DE_PERS_INSTD))
        tpActDis = ""
        tpIsBM = Nz(rs(FNM_DE_PERS_BM) = "J")
      ElseIf (pntCalcMode = PNT_CALC_MODE_TEST) Then
        tpActTime = Nz(rs(FNM_DE_PERS_INSTD))
        tpActDis = ""
        tpIsBM = Nz(rs(FNM_DE_PERS_BM) = "J")
        
        'Assign random disqualifications for times which end in a nine.
        If (CLng(tpActTime * 100) Mod 10) = 9 Then
          tpActDis = "DQ"
        End If
        
      End If
      
      tpActTimeCorrected = tpActTime
      tpActTvDis = 0
      
      If (swtIsValid(tpActTime) And tpActDis <> "") Then
        tpActTvDis = tpPntProgInfo.tvDis
        tpActTimeCorrected = swtFromSeconds(swtToSeconds(tpActTime) + tpActTvDis)
      End If
      
      
      Dim tpPntTvDis As Double
      Dim tpPntTime As Double
      Dim tpPntIsVV As Boolean
      Dim tpPnts As Double
      
      Dim tpPntVVPnts As Double
      Dim tpPntVVTime As Double
      
      
      tpPntTvDis = tpActTvDis
      tpPntTime = tpActTime
      tpPntIsVV = False
      
      tpPntVVPnts = 0
      tpPntVVTime = 0
      
      tpPnts = 0
      
      Dim tpPntIsValid As Boolean
      Dim tpPntVVIsValid As Boolean
      
      tpPntIsValid = swtIsValid(tpActTime)
      tpPntVVIsValid = False
      
      If (tpIsBM) Then
        tpPntIsValid = False
      End If
      
      
      'Calculate the number of points that may be gained.
      If (tpPntIsValid) Then
        With catOnd(tpOndIdx)
          Select Case pntIndOpts.tdToPointMode
            Case PNT_TD_TO_PNT_MODE_LEN
              tpPnts = lenCalcFinaPoints(tpActTimeCorrected, tpPntProgInfo.Afstand, tpPntProgInfo.slag, curGeslacht, wedInf.baan)
              tpPntVVPnts = catOnd(tpOndIdx).vvPnts
            Case PNT_TD_TO_PNT_MODE_SEC
              tpPnts = swtToSeconds(tpActTimeCorrected)
              tpPntVVPnts = swtToSeconds(catOnd(tpOndIdx).vvTijd)
              tpPntVVTime = catOnd(tpOndIdx).vvTijd
            Case PNT_TD_TO_PNT_MODE_SECFIFTY
              tpPnts = swtToSeconds(tpActTimeCorrected)
              Dim dValAf As Double
              dValAf = val(tpPntProgInfo.Afstand)
              If (dValAf > LIMEPS) Then
                tpPnts = 50 * tpPnts / dValAf
              End If
              tpPntVVPnts = catOnd(tpOndIdx).vvPnts
            Case PNT_TD_TO_PNT_MODE_SECHND
              tpPnts = swtToSeconds(tpActTimeCorrected)
              dValAf = val(tpPntProgInfo.Afstand)
              If (dValAf > LIMEPS) Then
                tpPnts = 100 * tpPnts / dValAf
              End If
              tpPntVVPnts = catOnd(tpOndIdx).vvPnts
          End Select
          
        
        
          If (.blRequireValidTime) Then
            If (Not swtIsValid(tpActTime)) Or tpActDis <> "" Then
              tpPnts = 0
              tpPntIsValid = False
            End If
          End If
          
          If (tpPntVVPnts > LIMEPS) Then
            tpPntVVIsValid = True
          End If
        
        End With
      End If 'if tpPntIsValid
      
      'see if we need to clip to vvPnts
      If (tpPntIsValid) Then
        If (tpPntVVIsValid) Then
          If (pntIndOpts.tdToPointMode = PNT_TD_TO_PNT_MODE_LEN) Then
            If (tpPnts < tpPntVVPnts - LIMEPS) Then
              tpPnts = tpPntVVPnts
              tpPntTvDis = 0
              tpPntTime = tpPntVVTime
              tpPntIsVV = True
            End If
          Else
            If (tpPnts > tpPntVVPnts + LIMEPS) Then
              tpPnts = tpPntVVPnts
              tpPntTvDis = 0
              tpPntTime = tpPntVVTime
              tpPntIsVV = True
            End If
          End If 'if pntMode = len
        End If 'if tpPntVVIsValid
      End If 'if tpPntIsValid
      
      
      
      If (tpPntIsValid) Then
        Dim blIsImprovement As Boolean
        blIsImprovement = False
        If (Not curPointsValid(tpOndIdx)) Then
          blIsImprovement = True
        End If
        If (Not blIsImprovement) Then
          If (pntIndOpts.tdToPointMode = PNT_TD_TO_PNT_MODE_LEN) Then
            If (tpPnts > curPoints(tpOndIdx) - LIMEPS) Then
              blIsImprovement = True
            End If
          Else
            If (tpPnts < curPoints(tpOndIdx) + LIMEPS) Then
              blIsImprovement = True
            End If
          End If
        End If 'if not blIsImprovement
        
        If (blIsImprovement) Then
          'We are an improvement, or, at worst, a levelment.
          'Levelments should also be handled here, since
          'we prefer slow swimtimes to empty vervangende times.
          curActTimes(tpOndIdx) = tpActTime
          curActWednr(tpOndIdx) = tpWedNr
          curActPrognr(tpOndIdx) = tpProgNr
          curActIsDis(tpOndIdx) = (tpActDis <> "")
          curActAfstand(tpOndIdx) = tpPntProgInfo.Afstand
          curActSlag(tpOndIdx) = tpPntProgInfo.slag
          
          curPntIsVV(tpOndIdx) = tpPntIsVV
          curPntTimes(tpOndIdx) = tpPntTime
          curPntTvDis(tpOndIdx) = tpPntTvDis
          
          curPoints(tpOndIdx) = tpPnts
          curPointsValid(tpOndIdx) = True
          
        End If 'if tpPnts < curPoints or curPoints = 0
      End If 'if tpPnts > 0
      
      
      
    End If 'if tpOndIdx <> -1
    
    

  End If 'if  curIsValid.
  
  
  rs.MoveNext
Loop




If Not pntCalcInd_OutputStats(pntInfo, pntCalcMode) Then
  Exit Function
End If




pntCalcInd_Perform = True
Exit Function
fout:
If (Err = 3021) Then Resume Next ' no current record
MsgBox Err & " pntCalcInd_Perform" & vbCrLf & Error$, 16
Exit Function
'debug
On Error GoTo 0
Resume
End Function




Private Function pntCalcInd_ApplyRanking(ByRef wedInf As WED_BASIC_INFO, ByRef pntInfo As PNT_GLOBAL_BASIC_INFO, ByRef pntIndOpts As PNT_IND_OPTIONS) As Boolean
On Error GoTo fout
pntCalcInd_ApplyRanking = False

Dim rs As Recordset


Dim sql As String

If pntIndOpts.blSortPerVer Then
sql = "Select * from [~pntUitslagInd] order by ut_vereniging, ut_categorie, ut_abc, ut_eindpunten"
Else
sql = "Select * from [~pntUitslagInd] order by  ut_categorie, ut_abc, ut_eindpunten"
End If

Dim blIsAscending As Boolean
blIsAscending = True

If (pntIndOpts.tdToPointMode = PNT_TD_TO_PNT_MODE_LEN) Then
  sql = sql & " DESC"
  blIsAscending = False
End If

Set rs = CurrentDb().OpenRecordset(sql)

Dim curVer As String
Dim curCat As String
Dim curABC As String

Dim lastValidRnkPnt As Double
Dim lastValidRnk As Long
Dim lastValidRnkCounter As Long

curVer = ""

lastValidRnkPnt = -99
lastValidRnk = 0
lastValidRnkCounter = 0

rs.MoveFirst
Do Until rs.EOF
  Dim tpVer As String
  Dim tpCat As String
  Dim tpABC As String
  
  tpVer = Nz(rs("UT_Vereniging"))
  tpCat = Nz(rs("UT_Categorie"))
  tpABC = Nz(rs("UT_ABC"))
  
  Dim blReset As Boolean
  blReset = False
  
  If (pntIndOpts.blSortPerVer) Then
    If (tpVer <> curVer) Then
      blReset = True
    End If
  End If
  
  If (tpCat <> curCat) Or (tpABC <> curABC) Then
    blReset = True
  End If
  
  
  If (blReset) Then
    lastValidRnk = 0
    lastValidRnkPnt = -999
    lastValidRnkCounter = 0
  End If
  
  curVer = tpVer
  curCat = tpCat
  curABC = tpABC
  
  
  Dim tpRnk As Long
  Dim tpRnkCounter As Long
  Dim sRnkDisplay As String
  Dim tpPnt As Double
  tpPnt = Nz(rs("UT_Eindpunten"))
  
  tpRnk = 100000
  tpRnkCounter = 100000
  
  sRnkDisplay = "-"
  If (tpPnt > LIMEPS) Then
    'Assign a valid ranking:
    
    lastValidRnkCounter = lastValidRnkCounter + 1
    
    If (Abs(tpPnt - lastValidRnkPnt)) < LIMEPS Then
      tpRnk = lastValidRnk
      sRnkDisplay = ""
    Else
      tpRnk = lastValidRnkCounter
      sRnkDisplay = tpRnk
    End If
    tpRnkCounter = lastValidRnkCounter
    
    lastValidRnk = tpRnk
    lastValidRnkPnt = tpPnt
  End If
  
  
  rs.Edit
    rs("UT_Ranking") = tpRnk
    rs("UT_RankingCounter") = tpRnkCounter
    rs("UT_RankingDisplay") = hzn(sRnkDisplay)
  rs.Update
  
  
  
  

 rs.MoveNext
Loop


pntCalcInd_ApplyRanking = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcInd_ApplyRanking" & vbCrLf & Error$, 16
Exit Function
End Function








Public Function pntCalcVerPnt(ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalcVerPnt = False




Dim wedInf As WED_BASIC_INFO

If Not pntCalcPrepareGlobal(pntInf, wedInf) Then
  Exit Function
End If





Dim pntVerPntOpts As PNT_VER_PNT_OPTIONS
Dim isFnd As Boolean

If Not pntVerPntLookup(pntInf.wednr, pntInf.orderID, isFnd, pntVerPntOpts) Then
  Exit Function
End If

If Not isFnd Then
  Err.Raise 1, , "Kon puntentelling: " & pntInf.wednr & " , " & pntInf.orderID & " )  niet vinden"
End If




'Need to calculate estafettes.
If Not analyzeEstafs(Not pntInf.blEntireMeet, wedInf.wednr, wedInf.meetMainNr, "~AN_Estafs") Then
  Exit Function
End If

If Not uitslagTransferSettings(wedInf.wednr, pntInf.blEntireMeet) Then
  Exit Function
End If

'Need to calculate rankings.
If Not uitslagRanglijsten(wedInf.wednr, pntInf.blEntireMeet, pntCalcMode) Then
  Exit Function
End If

'Need to calculate puntentellingen.
If Not uitslagPunten(wedInf.wednr, pntInf.blEntireMeet, pntCalcMode) Then
  Exit Function
End If




If Not pntInitWorkFields(pntInf, wedInf, pntVerPntOpts.blUseStdProgSettings, False) Then
  Exit Function
End If



If Not pntCalcVerPnt_Perform(wedInf, pntInf, pntVerPntOpts, pntCalcMode) Then
  Exit Function
End If


pntCalcVerPnt = True
Exit Function
fout:
MsgBox Err & " pntCalcVerPnt" & vbCrLf & Error$, 16
Exit Function
End Function



Public Function pntFindPlaatsPunt(ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntPltPers1B() As Long, ByRef pntPltEst1B() As Long, ByRef maxPntPlaats As Integer) As Boolean
On Error GoTo fout
pntFindPlaatsPunt = False


maxPntPlaats = 0

Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset("select * from dtgPuntentellingPlaatsPunt where ptp_wedstrijdnummer=" & pntInf.wednr & " and ptp_orderID = " & pntInf.orderID)


rs.MoveFirst
Do Until rs.EOF
  Dim tpPl As Long
  Dim tpPntP As Long
  Dim tpPntE As Long
  
  tpPl = Nz(rs("PTP_Plaats"))
  tpPntP = Nz(rs("PTP_Punten"))
  tpPntE = Nz(rs("PTP_PuntenEstaf"))
  
  If (tpPl > 0) And (tpPl < PNT_MAX_MEETEL_PLAATS) Then
    If (tpPntP < 0) Or (tpPntE < 0) Then
      Err.Raise 1, , "In de puntentelling-plaats tabel komt het volgnde ongeldige puntentaantal voor: ( " & tpPntP & " , " & tpPntE & " )."
    End If
  Else
    Err.Raise 1, , "In de puntentelling-plaats tabel komt de volgende ongeldige plaats voor: " & tpPl & vbCrLf & "Plaatsen moeten tussen 1 en " & PNT_MAX_MEETEL_PLAATS & " liggen."
  End If
  
  If (tpPl > maxPntPlaats) Then
    'initialize the between values
    Dim i As Integer
    For i = maxPntPlaats + 1 To tpPl
      pntPltPers1B(i) = 0
      pntPltEst1B(i) = 0
    Next i
    maxPntPlaats = tpPl
  End If
  
  If (tpPntP > 0) Or (tpPntE > 0) Then
    pntPltPers1B(tpPl) = tpPntP
    pntPltEst1B(tpPl) = tpPntE
  End If
  rs.MoveNext
Loop




pntFindPlaatsPunt = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntFindPlaatsPunt" & vbCrLf & Error$, 16
Exit Function
End Function



Private Function pntCalcVerPnt_perform_handlePntGroup(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVPOpts As PNT_VER_PNT_OPTIONS, ByRef pntProgInf As PNT_PROG_INFO, ByVal pntCalcMode As Integer, _
  ByRef est As Recordset, ByRef outp As Recordset, ByRef outpEst As Recordset, ByRef lastUsedEstGUID As Long, _
  ByVal pntGrpCatIdx As Integer, ByVal pntGrpCat As String, ByVal pntGrpABC As String, pntGrpDes As String, _
  ByVal nDlnVers As Integer, ByRef dlvNames() As String, ByRef dlvDepots() As String, ByRef dlvGroupIdx() As Integer, _
  ByVal nGroups As Integer, ByRef groupNames() As String, ByRef groupDepots() As String, ByRef groupInitScore() As Double, ByRef groupCurTotScore() As Double, _
  ByRef pntPuntPers1B() As Long, ByRef pntPuntEst1B() As Long, ByVal pntMaxPlaats As Integer, _
  ByRef curFastVers() As String, ByRef curFastStarts() As String, ByRef curFastEstNrs() As Integer, _
  ByRef curFastNames() As String, ByRef curFastActTimes() As Double, ByRef curFastActIsDis() As Boolean, _
  ByRef curFastCorrPoints() As Long, ByRef nFastTimes() As Integer, _
  ByRef curDisVers() As String, ByRef curDisStarts() As String, ByRef curDisEstNrs() As Integer, _
  ByRef curDisNames() As String, ByRef curDisActTimes() As Double, ByRef nDisTimes() As Integer) As Boolean
  
On Error GoTo fout
pntCalcVerPnt_perform_handlePntGroup = False


Dim cIdx As Integer
cIdx = pntGrpCatIdx


Dim groupCurProgNComp(0 To MAX_N_DLN_VERS) As Integer
Dim groupCurProgAllottedPointsHeader(0 To MAX_N_DLN_VERS) As Integer

Dim curAllPointsNext(0 To 4 * PNT_MAX_MEETEL_PLAATS + 2 * PNT_MAX_MEETEL_BUFFER) As Integer
Dim curAllPointsIsFast(0 To 4 * PNT_MAX_MEETEL_PLAATS + 2 * PNT_MAX_MEETEL_BUFFER) As Boolean
Dim curAllPointsIdx(0 To 4 * PNT_MAX_MEETEL_PLAATS + 2 * PNT_MAX_MEETEL_BUFFER) As Integer
Dim nCurAllPoints As Integer


Dim curFastAllottedPoints(0 To 2 * PNT_MAX_MEETEL_PLAATS + PNT_MAX_MEETEL_BUFFER) As Long
Dim curDisAllottedPoints(0 To 2 * PNT_MAX_MEETEL_PLAATS + PNT_MAX_MEETEL_BUFFER) As Long
    
    
    
nCurAllPoints = 0


Dim i As Integer
    
    
For i = 0 To nGroups - 1
  groupCurProgNComp(i) = 0
  groupCurProgAllottedPointsHeader(i) = -1
Next i
         
         
Dim tpVName As String
Dim tpCorrPoints As Long
         
         
'Start allotting points

Dim curPosDisPos As Long
Dim curPosCounter As Long
curPosDisPos = 0
curPosCounter = 0

Dim curPosCorrPoints As Long
curPosCorrPoints = -999

For i = 0 To nFastTimes(cIdx) - 1
  tpVName = curFastVers(cIdx, i)
  tpCorrPoints = curFastCorrPoints(cIdx, i)
  
  Dim tpVLkpPos As Integer, tpVGroupIdx As Integer
  tpVLkpPos = bSearchString(tpVName, nDlnVers, dlvNames)
  
  Dim blCountsForPos As Boolean
  Dim blAwardPoints As Boolean
  
  blAwardPoints = True
  If (tpVLkpPos < 0) Then
    blAwardPoints = False
  Else
    tpVGroupIdx = dlvGroupIdx(tpVLkpPos)
  End If
  
  If (blAwardPoints) Then
    If (groupCurProgNComp(tpVGroupIdx) >= pntProgInf.nComp) Then
      blAwardPoints = False
    End If
  End If
  
  blCountsForPos = True
  If (Not pntVPOpts.blDoortellen) Then
    If (Not blAwardPoints) Then
      blCountsForPos = False
    End If
  End If
  
  If blAwardPoints And (Not blCountsForPos) Then
    Err.Raise 1, , "Internal error"
  End If
  
  If (blCountsForPos) Then
    'need to update position
    curPosCounter = curPosCounter + 1
    If (tpCorrPoints > curPosCorrPoints) Then
      curPosDisPos = curPosCounter
      curPosCorrPoints = tpCorrPoints
    End If
    
  End If
  
  'Initialize the allotted points.
  curFastAllottedPoints(i) = 0
  
  If (blAwardPoints) Then
    'check the number of points for this position and award them.
    If (curPosDisPos < 0) Then
      Err.Raise 1, , "Internal error"
    End If
    If (curPosDisPos <= pntMaxPlaats) Then
      'Award
      If (pntProgInf.isEstaf) Then
        curFastAllottedPoints(i) = pntPuntEst1B(curPosDisPos)
      Else
        curFastAllottedPoints(i) = pntPuntPers1B(curPosDisPos)
      End If
    End If
  End If
    
  If (curFastAllottedPoints(i) > 0) Then
    'Need to update nComp and insert into list of alloted points
    groupCurProgNComp(tpVGroupIdx) = groupCurProgNComp(tpVGroupIdx) + 1
    
    curAllPointsIdx(nCurAllPoints) = i
    curAllPointsIsFast(nCurAllPoints) = True
    curAllPointsNext(nCurAllPoints) = groupCurProgAllottedPointsHeader(tpVGroupIdx)
    groupCurProgAllottedPointsHeader(tpVGroupIdx) = nCurAllPoints
    
    nCurAllPoints = nCurAllPoints + 1
    
  End If
Next i ' for i = 0 to nFastTimes - 1

If (pntVPOpts.disMode = PNT_DSQ_MODE_FIX_PNTS) Then
  For i = 0 To nDisTimes(cIdx) - 1
    
    tpVName = curDisVers(cIdx, i)
    tpVLkpPos = bSearchString(tpVName, nDlnVers, dlvNames)
    
    blAwardPoints = True
  
    If (tpVLkpPos < 0) Then
      blAwardPoints = False
     Else
       tpVGroupIdx = dlvGroupIdx(tpVLkpPos)
    End If
  
    If (blAwardPoints) Then
      If (groupCurProgNComp(tpVGroupIdx) >= pntProgInf.nComp) Then
        blAwardPoints = False
      End If
    End If
    
    'Initialize the allotted points.
    curDisAllottedPoints(i) = 0
   
    If (blAwardPoints) Then
      'check the number of points for this position and award them.
      curDisAllottedPoints(i) = pntVPOpts.disFixedPoints
    End If
    
    If (curDisAllottedPoints(i) > 0) Then
        'Need to update nComp and insert into list of alloted points
        groupCurProgNComp(tpVGroupIdx) = groupCurProgNComp(tpVGroupIdx) + 1
        
        curAllPointsIdx(nCurAllPoints) = i
        curAllPointsIsFast(nCurAllPoints) = False
        curAllPointsNext(nCurAllPoints) = groupCurProgAllottedPointsHeader(tpVGroupIdx)
        groupCurProgAllottedPointsHeader(tpVGroupIdx) = nCurAllPoints
        nCurAllPoints = nCurAllPoints + 1
    End If
  Next i
End If
 

 
'All points have been allotted.
'Should now allocate the points to the verenigingen
'and update table.

Dim prGroupItemPnts(0 To MAX_N_DLN_VERS - 1, 0 To MAX_N_MEETEL) As Long
Dim prGroupItems(0 To MAX_N_DLN_VERS - 1, 0 To MAX_N_MEETEL) As PNT_VER_OUTPUT_ITEM
Dim prGroupNItems(0 To MAX_N_DLN_VERS - 1) As Integer

Dim j As Integer

For i = 0 To nGroups - 1
  prGroupNItems(i) = 0
  Dim hd As Integer
  hd = groupCurProgAllottedPointsHeader(i)
  While (hd <> -1)
    Dim itemIdx  As Integer
    Dim itemIsFast As Boolean
    itemIdx = curAllPointsIdx(hd)
    itemIsFast = curAllPointsIsFast(hd)
    
    Dim pnts As Long
    If (itemIsFast) Then
      pnts = curFastAllottedPoints(itemIdx)
    Else
      pnts = curDisAllottedPoints(itemIdx)
    End If
    
    'insert -pnts, since we want a descending order.
    Dim oldNItems As Integer
    oldNItems = prGroupNItems(i)
    
    
    Dim insPos As Integer
    
    insPos = insLong2d(i, -pnts, prGroupNItems, prGroupItemPnts)
    
    shiftRightItems2d i, insPos, 1, oldNItems, prGroupItems
    
    With prGroupItems(i, insPos)
      If (itemIsFast) Then
        .pnt = curFastAllottedPoints(itemIdx)
        .actIsDis = curFastActIsDis(cIdx, itemIdx)
        .actTime = curFastActTimes(cIdx, itemIdx)
        
        If (pntProgInf.isEstaf) Then
          .estNr = curFastEstNrs(cIdx, itemIdx)
          
          est.Seek "=", pntProgInf.wednr, pntProgInf.prognr, curFastEstNrs(cIdx, itemIdx), curFastVers(cIdx, itemIdx)
          If (Not est.NoMatch) Then
            For j = 0 To pntProgInf.estafCnt - 1
              .estStarts(j) = Nz(est("EST_Startnummer_" & (j + 1)))
              .estNames(j) = Nz(est("EST_Naam_" & (j + 1)))
            Next j
          Else
            For j = 0 To pntProgInf.estafCnt - 1
              .estStarts(j) = ""
              .estNames(j) = ""
            Next j
          End If
        Else
          .start = curFastStarts(cIdx, itemIdx)
          .nm = curFastNames(cIdx, itemIdx)
        End If
        .pntIsVV = False
        .pntTime = .actTime
        
        .tvDis = 0
        .ver = curFastVers(cIdx, itemIdx)
      Else
        .pnt = curDisAllottedPoints(itemIdx)
        .actIsDis = True
        .actTime = curDisActTimes(cIdx, itemIdx)
        If (pntProgInf.isEstaf) Then
          .estNr = curDisEstNrs(cIdx, itemIdx)
          est.Seek "=", pntProgInf.wednr, pntProgInf.prognr, curDisEstNrs(cIdx, itemIdx), curDisVers(cIdx, itemIdx)
          If (Not est.NoMatch) Then
            For j = 0 To pntProgInf.estafCnt - 1
              .estStarts(j) = Nz(est("EST_Startnummer_" & (j + 1)))
              .estNames(j) = Nz(est("EST_Naam_" & (j + 1)))
            Next j
          Else
            For j = 0 To pntProgInf.estafCnt - 1
              .estStarts(j) = ""
              .estNames(j) = ""
            Next j
          End If
          
          
        Else
          .start = curDisStarts(cIdx, itemIdx)
          .nm = curDisNames(cIdx, itemIdx)
        End If
        .pntIsVV = False
        .pntTime = .actTime
        
        .tvDis = 0
        .ver = curDisVers(cIdx, itemIdx)
      End If
    End With
    
    'See if we need to clip
    If (prGroupNItems(i) > pntProgInf.nComp) Then
      prGroupNItems(i) = pntProgInf.nComp
    End If
    
    
    hd = curAllPointsNext(hd)
  Wend
  
  Dim subTot As Double, dummy As Double
  If Not pntCalcVerUpdateSums(0, pntProgInf, groupCurTotScore(i), 0, subTot, groupCurTotScore(i), dummy, prGroupNItems(i), i, prGroupItems) Then
    Exit Function
  End If
  
  
  
  If Not pntCalcVerOutputItems(0, groupNames(i), groupDepots(i), groupInitScore(i), False, wedInf, pntInf, pntProgInf, pntGrpCatIdx, pntGrpCat, pntGrpABC, pntGrpDes, subTot, groupCurTotScore(i), 0, prGroupNItems(i), i, prGroupItems, outp, lastUsedEstGUID, outpEst) Then
    Exit Function
  End If
Next i
         

pntCalcVerPnt_perform_handlePntGroup = True
Exit Function

fout:
MsgBox Err & " pntCalcVerPnt_perform_handlePntGroup" & vbCrLf & Error$, 16
Exit Function

End Function


'Before calling this procedure; analyze_estafs should have been called.
Private Function pntCalcVerPnt_Perform(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVPOpts As PNT_VER_PNT_OPTIONS, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalcVerPnt_Perform = False


Dim outp As Recordset
Dim outpEst As Recordset
Dim lastUsedEstGUID As Long
Dim est As Recordset

lastUsedEstGUID = 0




Dim nGroups As Integer
Dim groupNames(0 To MAX_N_DLN_VERS - 1) As String
Dim groupDepots(0 To MAX_N_DLN_VERS - 1) As String
Dim groupInitScore(0 To MAX_N_DLN_VERS - 1) As Double
Dim groupCurTotScore(0 To MAX_N_DLN_VERS - 1) As Double


Dim nDlnVers As Integer
Dim dlvNames(0 To MAX_N_DLN_VERS - 1) As String
Dim dlvDepots(0 To MAX_N_DLN_VERS - 1) As String
Dim dlvGroupIdx(0 To MAX_N_DLN_VERS - 1) As Integer


Dim blInitValsUsed As Boolean


Dim rsProgs As Recordset
Dim rsPntPrg As Recordset
Dim rsPr As Recordset
Dim rsPntDLV As Recordset



If Not pntCalcVer_InitPhase("__punten", wedInf, pntInf, outp, outpEst, est, nGroups, groupNames, groupDepots, groupInitScore, nDlnVers, dlvNames, dlvDepots, dlvGroupIdx, blInitValsUsed, pntVPOpts.blGroupVers, pntVPOpts.blRestrictVers, pntVPOpts.blUseTst, pntVPOpts.blUseStdTst, pntVPOpts.blUseStdProgSettings, rsProgs, rsPntPrg, rsPr, rsPntDLV) Then
  Exit Function
End If

Dim maxNComp As Long
Dim lastWednr As Long
Dim lastProgNr As String
Dim lastPntGrpCatIdx As Integer
Dim lastPntGrpABC As String

maxNComp = 0
lastWednr = -1
lastProgNr = ""
lastPntGrpCatIdx = -1
lastPntGrpABC = ""


rsProgs.MoveFirst

'================End standard part









Dim rsTd As Recordset



Dim i As Integer

For i = 0 To nDlnVers - 1
  groupCurTotScore(i) = groupInitScore(i)
Next i








'Get punt plaats info.

Dim pntPuntPers1B(1 To PNT_MAX_MEETEL_PLAATS) As Long
Dim pntPuntEst1B(1 To PNT_MAX_MEETEL_PLAATS) As Long
Dim pntMaxPlaats As Integer

pntMaxPlaats = 0
If Not pntFindPlaatsPunt(pntInf, pntPuntPers1B, pntPuntEst1B, pntMaxPlaats) Then
  Exit Function
End If






Dim curFastVers(0 To MAX_N_VAR_CATS_PER_PROG_NON_DISPLAY, 0 To 2 * PNT_MAX_MEETEL_PLAATS + PNT_MAX_MEETEL_BUFFER) As String
Dim curFastStarts(0 To MAX_N_VAR_CATS_PER_PROG_NON_DISPLAY, 0 To PNT_MAX_MEETEL_PLAATS + PNT_MAX_MEETEL_BUFFER) As String
Dim curFastEstNrs(0 To MAX_N_VAR_CATS_PER_PROG_NON_DISPLAY, 0 To PNT_MAX_MEETEL_PLAATS + PNT_MAX_MEETEL_BUFFER) As Integer
Dim curFastNames(0 To MAX_N_VAR_CATS_PER_PROG_NON_DISPLAY, 0 To PNT_MAX_MEETEL_PLAATS + PNT_MAX_MEETEL_BUFFER) As String
Dim curFastActTimes(0 To MAX_N_VAR_CATS_PER_PROG_NON_DISPLAY, 0 To PNT_MAX_MEETEL_PLAATS + PNT_MAX_MEETEL_BUFFER) As Double
Dim curFastActIsDis(0 To MAX_N_VAR_CATS_PER_PROG_NON_DISPLAY, 0 To PNT_MAX_MEETEL_PLAATS + PNT_MAX_MEETEL_BUFFER) As Boolean
Dim curFastCorrPoints(0 To MAX_N_VAR_CATS_PER_PROG_NON_DISPLAY, 0 To PNT_MAX_MEETEL_PLAATS + PNT_MAX_MEETEL_BUFFER) As Long
Dim nFastTimes(0 To MAX_N_VAR_CATS_PER_PROG_NON_DISPLAY) As Integer



Dim curDisVers(0 To MAX_N_VAR_CATS_PER_PROG_NON_DISPLAY, 0 To 2 * PNT_MAX_MEETEL_PLAATS + PNT_MAX_MEETEL_BUFFER) As String
Dim curDisStarts(0 To MAX_N_VAR_CATS_PER_PROG_NON_DISPLAY, 0 To PNT_MAX_MEETEL_PLAATS + PNT_MAX_MEETEL_BUFFER) As String
Dim curDisEstNrs(0 To MAX_N_VAR_CATS_PER_PROG_NON_DISPLAY, 0 To PNT_MAX_MEETEL_PLAATS + PNT_MAX_MEETEL_BUFFER) As Integer
Dim curDisNames(0 To MAX_N_VAR_CATS_PER_PROG_NON_DISPLAY, 0 To PNT_MAX_MEETEL_PLAATS + PNT_MAX_MEETEL_BUFFER) As String
Dim curDisActTimes(0 To MAX_N_VAR_CATS_PER_PROG_NON_DISPLAY, 0 To PNT_MAX_MEETEL_PLAATS + PNT_MAX_MEETEL_BUFFER) As Double
Dim nDisTimes(0 To MAX_N_VAR_CATS_PER_PROG_NON_DISPLAY) As Integer

Dim pntProgInf As PNT_PROG_INFO



Do Until rsProgs.EOF

  'First extract programma information.

  Dim curProgWedNr As Long
  Dim curProgNr As String
  
  
  curProgWedNr = Nz(rsProgs(FNM_PR_WED))
  curProgNr = Nz(rsProgs(FNM_PR_PROG))
  
  
  Dim isFnd As Boolean
  
  If Not pntFindProgPntInfo(rsPntPrg, rsPr, wedInf, pntInf, pntVPOpts.blUseStdProgSettings, curProgWedNr, curProgNr, pntProgInf, isFnd) Then
    Exit Function
  End If
  
  If Not isFnd Then
    Err.Raise 1, , "Kon geen gegevens vinden voor programmanr: ( " & curProgWedNr & " , " & curProgNr & " )"
  End If
  
 
  If (pntProgInf.nComp > 0) Then
    'Dit programmanummer afhandelen.
    
    Dim curProgUseMCats As Boolean
    Dim curProgCatInfo(0 To MAX_N_VAR_CATS_PER_PROG_NON_DISPLAY) As CAT_INFO
    Dim curProgNCats As Integer
    
    curProgUseMCats = False
    curProgNCats = 1
    
    If (catIsMCat(pntProgInf.cat)) Then
      If (pntVPOpts.blUseProgSubOrdering) Then
        Dim sDummy As String
        If Not catInfoGetListForProg(curProgWedNr, curProgNr, 0, curProgNCats, sDummy, curProgCatInfo) Then
          Exit Function
        End If
        curProgUseMCats = True
      End If
    End If
    
    
    
    If (pntProgInf.nComp > maxNComp) Then
      maxNComp = pntProgInf.nComp
    End If
    
 
 
    Dim blUseResultData As Boolean
    blUseResultData = False
    If (pntCalcMode = PNT_CALC_MODE_RESULT) Or (pntProgInf.type = PROG_TYPE_RANKING) Or (pntProgInf.type = PROG_TYPE_PUNT) Then
      blUseResultData = True
    End If
 
    
        
    'Now process all the times that were swum during this programmanummer.
    Dim tdsql As String
    
    
    If (pntProgInf.isEstaf) Then
      If (blUseResultData) Then
        tdsql = tyGetResultsEstSQL(True, False, curProgNr, curProgWedNr, -1)
        tdsql = tdsql & " Order by [" & "TY_A/B/C" & "]"
      Else
        tdsql = dlnGetDeelnemersEstSQL(True, False, curProgNr, curProgWedNr, -1, False, "")
        tdsql = tdsql & " Order by [" & "DE_A/B/C" & "]"
      End If
    Else
      If (blUseResultData) Then
        tdsql = tyGetResultsPersSQL(True, False, curProgNr, curProgWedNr, -1)
        tdsql = tdsql & " ORDER BY [" & "TY_A/B/C" & "]"
      Else
        tdsql = dlnGetDeelnemersPersSQL(True, False, curProgNr, curProgWedNr, -1, False)
        tdsql = tdsql & " ORDER BY [" & FNM_DE_PERS_ABC & "]"
      End If
    End If
    
    
    Dim pntGrpCatIdx As Integer, pntGrpCat As String, pntGrpABC As String, pntGrpDes As String
    
    
    Set rsTd = CurrentDb().OpenRecordset(tdsql)
    
    
    
    
    
    Dim curABC As String
    curABC = "--"
    
    
    rsTd.MoveFirst
    
    
    Dim blDone As Boolean
    blDone = rsTd.EOF
    
    Do Until blDone
    
    
      
      Dim tpABC As String
    
    
      If (rsTd.EOF) Then
        blDone = True
        tpABC = "--"
      Else
        tpABC = ""
        If (pntVPOpts.blUseProgSubOrdering) Then
          If blUseResultData Then
            tpABC = Nz(rsTd("TY_A/B/C"))
          Else
            tpABC = Nz(rsTd("DE_A/B/C"))
          End If
        End If
      End If 'if not rsTd.eof
      
      
      
      If (curABC <> tpABC) Then
        If (curABC <> "--") Then
          'Wrap up old abc code
          lastPntGrpABC = curABC
          
          For i = 0 To curProgNCats - 1
            If (nFastTimes(i) > 0) Or (nDisTimes(i) > 0) Then
              lastProgNr = curProgNr
              lastWednr = curProgWedNr
              lastPntGrpCatIdx = i
              lastPntGrpABC = curABC
              
              'output items
              
              pntGrpCat = ""
              pntGrpDes = ""
              pntGrpCatIdx = i
              pntGrpABC = curABC
              If (curProgUseMCats) Then
                pntGrpCat = Trim(curProgCatInfo(i).cat)
                pntGrpDes = Trim(curProgCatInfo(i).bescat)
              End If
              If (pntGrpABC <> "") Then
                If (pntGrpDes <> "") Then
                  pntGrpDes = pntGrpDes & " (" & pntGrpABC & ")"
                Else
                  pntGrpDes = pntGrpDes & "Code: " & pntGrpABC
                End If
              End If
              
              
              If Not pntCalcVerPnt_perform_handlePntGroup(wedInf, pntInf, pntVPOpts, pntProgInf, pntCalcMode, _
                est, outp, outpEst, lastUsedEstGUID, _
                pntGrpCatIdx, pntGrpCat, pntGrpABC, pntGrpDes, nDlnVers, dlvNames, dlvDepots, dlvGroupIdx, _
                nGroups, groupNames, groupDepots, groupInitScore, groupCurTotScore, _
                pntPuntPers1B, pntPuntEst1B, pntMaxPlaats, _
                curFastVers, curFastStarts, curFastEstNrs, curFastNames, curFastActTimes, curFastActIsDis, curFastCorrPoints, nFastTimes, _
                curDisVers, curDisStarts, curDisEstNrs, curDisNames, curDisActTimes, nDisTimes) Then
                Exit Function
              End If
              
            End If
          Next i
          
          
          
        End If
        
        
        'Initialize new abc code
        
        'Initialize the queues
        For i = 0 To curProgNCats - 1
          nFastTimes(i) = 0
          nDisTimes(i) = 0
        Next i
        
        
        
        
        curABC = tpABC
      End If
      
      
      
      
      
      If Not blDone Then
        Dim tpVName As String
        Dim tpVerIsAllowed As Boolean
        Dim tpStart As String
        Dim tpEst As Integer
        Dim tpNm As String
        Dim tpAB As String
        Dim tpIsBM As Boolean
        
        Dim tpPnt As Double
        Dim tpTd As Double
        Dim tpDis As String
        
        Dim tpGes As String
        Dim tpGebDate As Date
        
        Dim tpCatIdx As Integer
        
        
        If (pntProgInf.isEstaf) Then
        
          If (blUseResultData) Then
            tpVName = Nz(rsTd(FNM_TY_EST_VER))
            tpEst = Nz(rsTd(FNM_TY_EST_ESTNR))
            tpTd = Nz(rsTd(FNM_TY_EST_EINDTIJD))
            tpDis = Nz(rsTd(FNM_TY_EST_DIS))
            tpAB = Nz(rsTd("TY_AB"))
            tpIsBM = Nz(rsTd(FNM_TY_EST_BM)) = "J"
            tpStart = ""
            tpNm = ""
          Else
            tpVName = Nz(rsTd(FNM_DE_EST_VER))
            tpEst = Nz(rsTd(FNM_DE_EST_ESTNR))
            tpTd = Nz(rsTd(FNM_DE_EST_INSTD))
            tpDis = ""
            tpAB = ""
            tpIsBM = Nz(rsTd(FNM_DE_EST_BM)) = "J"
            tpStart = ""
            tpNm = ""
          End If
          
        Else ' persoonlijk
        
          If (blUseResultData) Then
            tpVName = Nz(rsTd(FNM_TY_PERS_VER))
            tpEst = 0
            tpStart = Nz(rsTd(FNM_TY_PERS_START))
            tpNm = Nz(rsTd(FNM_TY_PERS_NAAM))
            tpTd = Nz(rsTd(FNM_TY_PERS_EINDTIJD))
            tpDis = Nz(rsTd(FNM_TY_PERS_DIS))
            tpAB = Nz(rsTd("TY_AB"))
            tpIsBM = Nz(rsTd(FNM_TY_PERS_BM)) = "J"
            tpGes = Nz(rsTd(FNM_NA_GES))
            tpGebDate = Nz(rsTd(FNM_NA_GEBDAT), #1/1/1900#)
          Else
            tpVName = Nz(rsTd(FNM_DE_PERS_VER))
            tpEst = 0
            tpStart = Nz(rsTd(FNM_DE_PERS_STARTNR))
            tpNm = Nz(rsTd(FNM_DE_PERS_NAAM))
            tpTd = Nz(rsTd(FNM_DE_PERS_INSTD))
            tpDis = ""
            tpAB = ""
            tpIsBM = Nz(rsTd(FNM_DE_PERS_BM)) = "J"
            tpGes = Nz(rsTd(FNM_NA_GES))
            tpGebDate = Nz(rsTd(FNM_NA_GEBDAT), #1/1/1900#)
          End If
          
        End If 'if estaf or persoonlijk
        
        If (pntProgInf.type = PROG_TYPE_PUNT) Then
          tpPnt = Nz(rsTd("TY_Eindpunten"))
          'For display purposes, also treat the points as a time.
          tpTd = tpPnt
        End If
        
        
        If (pntProgInf.type <> PROG_TYPE_PUNT) And (pntCalcMode = PNT_CALC_MODE_TEST) Then
          If (CLng(tpTd * 100) Mod 10) = 9 Then
            tpDis = "DQ"
          End If
        End If
        
          
        
        tpVerIsAllowed = True
        Dim verLkpPos As Integer
        verLkpPos = bSearchString(tpVName, nDlnVers, dlvNames)
        If (verLkpPos < 0) Then
          tpVerIsAllowed = False
        End If
        
        
        
        
        Dim tpIsDis As Boolean
        Dim tpTvDis As Long
      
        Dim tpCorrPoints As Long
        Dim tpCorrMainQValid As Boolean
        Dim tpCorrDisQValid As Boolean
        
        tpIsDis = tpDis <> ""
        
        
        
        
        'Merge time + AB code or pnt_points into a single point-quantity.
        tpCorrPoints = 0
        
        
        If (pntProgInf.type = PROG_TYPE_PUNT) Then
          tpCorrPoints = CLng(tpPnt * 100)
        Else
          If (swtIsValid(tpTd)) Then
            tpCorrPoints = CLng(tpTd * 100) * 100
            If (tpAB <> "") Then
              Dim tpABExtra As Long
              tpABExtra = Asc(UCase(tpAB)) - Asc("A")
              If (tpABExtra < 0) Then
                tpABExtra = 0
              ElseIf (tpABExtra > 26) Then
                tpABExtra = 26
              End If
              tpCorrPoints = tpCorrPoints + tpABExtra
            End If
          End If
        End If
          
          
          
        tpCorrMainQValid = True
        tpCorrDisQValid = (pntVPOpts.disMode = PNT_DSQ_MODE_FIX_PNTS)
        
        'Check to see whether time should be added to queue.
        
        'First of all, completely ignore times with the following discodes,
        'since we do not want them to be included.
        If (tpIsDis) Then
          If (tpDis = DIS_NG) Or (tpDis = DIS_NGZA) Or (tpDis = DIS_AFM) Or (tpDis = DIS_VV) Or (tpDis = DIS_ZK) Then
            tpCorrDisQValid = False
            tpCorrMainQValid = False
          End If
        End If
        
        If ((tpIsDis) And (Not swtIsValid(tpTd)) And (pntVPOpts.blDisFixedPointRequireValidTime)) Then
          tpCorrDisQValid = False
        End If
          
        
        
        If (Not tpVerIsAllowed) Then
          tpCorrDisQValid = False
        End If
        
        If (Not tpVerIsAllowed) And (Not pntVPOpts.blIncludeRVerTimes) Then
          tpCorrMainQValid = False
          tpCorrDisQValid = False
        End If
        
        If (tpIsBM) Then
          tpCorrMainQValid = False
          tpCorrDisQValid = False
        End If
        
        
        
        If (pntProgInf.type = PROG_TYPE_PUNT) Then
          tpCorrDisQValid = False
        End If
        
        
        
        If (pntProgInf.type = PROG_TYPE_PUNT) Then
          If (Abs(tpPnt) < 1) Then
            tpCorrMainQValid = False
          End If
        Else
          If Not swtIsValid(tpTd) Then
            tpCorrMainQValid = False
          ElseIf (tpIsDis) Then
            If (pntVPOpts.disMode = PNT_DSQ_MODE_ADD_PEN) Then
              tpTvDis = CLng(pntProgInf.tvDis) * 100 * 100 + 50
              tpCorrPoints = tpCorrPoints + tpTvDis
            Else
              'do not add penalty
              tpCorrMainQValid = False
            End If
          End If
        End If
        
        tpCatIdx = 0
        If (tpCorrMainQValid Or tpCorrDisQValid) Then
          If (curProgUseMCats) Then
            'Need to determine tpCatIdx
            tpCatIdx = -1
            If (pntProgInf.isEstaf) Then
              est.Seek "=", curProgWedNr, curProgNr, tpEst, tpVName
              
              If est.NoMatch Then
                Err.Raise 1, , "Internal error. Could not find estafette ploeg"
              End If
              
              Dim estMinYOB As Long, estMaxYOB As Long, estSumYOB As Long, estActCnt As Integer, estGes As String
              estMinYOB = Nz(est("EST_MinYOB"))
              estMaxYOB = Nz(est("EST_MaxYOB"))
              estSumYOB = Nz(est("EST_SumYOB"))
              estActCnt = Nz(est("EST_ActPloegCnt"))
              estGes = Nz(est("EST_Geslacht"))
              
              tpCatIdx = catInfoGetEstSatisfiedCatIdxFromList_bare(wedInf.lftBep, estMinYOB, estMaxYOB, estSumYOB, estActCnt, estGes, 0, curProgNCats, curProgCatInfo, wedInf.ageDate)
              
            Else
              tpCatIdx = catInfoGetSatisfiedCatIdxFromList(wedInf.ageDate, wedInf.lftBep, tpStart, tpGes, tpGebDate, 0, curProgNCats, curProgCatInfo)
            End If 'if isEstaf
            
            If tpCatIdx = -1 Then
              'Disallow swimmer
              tpCorrMainQValid = False
              tpCorrDisQValid = False
            End If
          End If 'if curProgUseMCats
        End If
        
        
        Dim insPos As Long
        
        If (tpCorrMainQValid) Then
          'add to main queue
          insPos = insLong2d(tpCatIdx, tpCorrPoints, nFastTimes, curFastCorrPoints)
          
          'now shift rest.
          shiftRightString2d tpCatIdx, insPos, 1, nFastTimes(tpCatIdx) - 1, curFastVers
          shiftRightString2d tpCatIdx, insPos, 1, nFastTimes(tpCatIdx) - 1, curFastStarts
          shiftRightInt2d tpCatIdx, insPos, 1, nFastTimes(tpCatIdx) - 1, curFastEstNrs
          shiftRightString2d tpCatIdx, insPos, 1, nFastTimes(tpCatIdx) - 1, curFastNames
          shiftRightDouble2d tpCatIdx, insPos, 1, nFastTimes(tpCatIdx) - 1, curFastActTimes
          shiftRightBoolean2d tpCatIdx, insPos, 1, nFastTimes(tpCatIdx) - 1, curFastActIsDis
          
          'insert rest.
          curFastVers(tpCatIdx, insPos) = tpVName
          curFastStarts(tpCatIdx, insPos) = tpStart
          curFastEstNrs(tpCatIdx, insPos) = tpEst
          curFastNames(tpCatIdx, insPos) = tpNm
          curFastActTimes(tpCatIdx, insPos) = tpTd
          curFastActIsDis(tpCatIdx, insPos) = tpIsDis
          
          'clip the number of times we are keeping in storage.
          If (nFastTimes(tpCatIdx) > 2 * pntMaxPlaats + PNT_MAX_MEETEL_BUFFER) Then
            nFastTimes(tpCatIdx) = 2 * pntMaxPlaats + PNT_MAX_MEETEL_BUFFER
          End If
          
          
        ElseIf (tpCorrDisQValid) Then
          'add to dis queue
          curDisVers(tpCatIdx, nDisTimes(tpCatIdx)) = tpVName
          curDisStarts(tpCatIdx, nDisTimes(tpCatIdx)) = tpStart
          curDisEstNrs(tpCatIdx, nDisTimes(tpCatIdx)) = tpEst
          curDisNames(tpCatIdx, nDisTimes(tpCatIdx)) = tpNm
          curDisActTimes(tpCatIdx, nDisTimes(tpCatIdx)) = tpTd
          nDisTimes(tpCatIdx) = nDisTimes(tpCatIdx) + 1
          
          'clip the number of times we are keeping in storage.
          If (nDisTimes(tpCatIdx) > 2 * pntMaxPlaats + PNT_MAX_MEETEL_BUFFER) Then
            nDisTimes(tpCatIdx) = 2 * pntMaxPlaats + PNT_MAX_MEETEL_BUFFER
          End If
        End If
        
        rsTd.MoveNext
        
      End If 'if not blDone
    Loop
    
    
    appCleanRS rsTd
    
    If (lastWednr <> curProgWedNr) Or (lastProgNr <> curProgNr) Then
      'output a single item for this prog
      nFastTimes(0) = 0
      nDisTimes(0) = 0
      
      lastWednr = curProgWedNr
      lastProgNr = curProgNr
      lastPntGrpABC = ""
      lastPntGrpCatIdx = 0
      
      pntGrpCatIdx = 0
      pntGrpCat = ""
      pntGrpABC = ""
      pntGrpDes = ""
      
      If Not pntCalcVerPnt_perform_handlePntGroup(wedInf, pntInf, pntVPOpts, pntProgInf, pntCalcMode, _
        est, outp, outpEst, lastUsedEstGUID, _
        pntGrpCatIdx, pntGrpCat, pntGrpABC, pntGrpDes, nDlnVers, dlvNames, dlvDepots, dlvGroupIdx, _
        nGroups, groupNames, groupDepots, groupInitScore, groupCurTotScore, _
        pntPuntPers1B, pntPuntEst1B, pntMaxPlaats, _
        curFastVers, curFastStarts, curFastEstNrs, curFastNames, curFastActTimes, curFastActIsDis, curFastCorrPoints, nFastTimes, _
        curDisVers, curDisStarts, curDisEstNrs, curDisNames, curDisActTimes, nDisTimes) Then
        Exit Function
      End If
      
      
    End If
    
  End If 'if should process prognr.
  rsProgs.MoveNext
Loop


appCleanRS rsProgs
appCleanRS outp
appCleanRS outpEst
appCleanRS est

appCleanRS rsPntPrg
appCleanRS rsPr
appCleanRS rsPntDLV


If Not pntCalcVer_ApplyRanking(wedInf, pntInf, False) Then
  Exit Function
End If

If Not pntCalcVer_OutputStats("__punten_stats", pntInf, lastWednr, lastProgNr, lastPntGrpABC, lastPntGrpCatIdx, maxNComp, pntCalcMode) Then
  Exit Function
End If
  


pntCalcVerPnt_Perform = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcVerPnt_Perform" & vbCrLf & Error$, 16

'debug
On Error GoTo 0
Resume
Exit Function

End Function


Private Function pntCalcVerUpdateSums(ByVal pVVPnt As Double, ByRef prInf As PNT_PROG_INFO, ByVal oldCumPnts As Double, ByVal oldCumTvDis As Double, ByRef subTot As Double, ByRef newCumPnts As Double, ByRef newCumTvDis As Double, ByVal nItems As Integer, ByVal pntItemsFirstIdx As Integer, ByRef pntItems() As PNT_VER_OUTPUT_ITEM) As Boolean
On Error GoTo fout
pntCalcVerUpdateSums = False

subTot = 0

newCumPnts = oldCumPnts
newCumTvDis = oldCumTvDis


Dim i As Integer

For i = 0 To prInf.nComp - 1
  If (i < nItems) Then
    subTot = subTot + pntItems(pntItemsFirstIdx, i).pnt
    newCumPnts = newCumPnts + pntItems(pntItemsFirstIdx, i).pnt
    newCumTvDis = newCumTvDis + pntItems(pntItemsFirstIdx, i).tvDis
  Else
    subTot = subTot + pVVPnt
    newCumPnts = newCumPnts + pVVPnt
  End If
Next i


pntCalcVerUpdateSums = True
Exit Function
fout:
MsgBox Err & " pntCalcVerUpdateSums" & vbCrLf & Error$, 16
Exit Function
End Function



Public Function pntCalcVerOutputItems(ByVal pVVPnt As Double, ByVal vName As String, ByVal vDepot As String, ByVal vInitPoints As Double, ByVal isEstimate As Boolean, ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef prInf As PNT_PROG_INFO, ByVal pntGrpCatIdx As Integer, ByVal pntGrpCategorie As String, ByVal pntGrpABC As String, ByVal pntGrpDes As String, ByVal subTot As Double, ByVal newCumPnts As Double, ByVal newCumTvDis As Double, ByVal nItems As Integer, ByVal pntItemsFirstIdx As Integer, ByRef pntItems() As PNT_VER_OUTPUT_ITEM, ByRef rsOut As Recordset, ByRef lastUsedEstGUID As Long, ByRef rsOutEst As Recordset) As Boolean
On Error GoTo fout
pntCalcVerOutputItems = False


 
    'Toevoegen aan uitslag.
    rsOut.AddNew
      rsOut("PT_PNT_Wedstrijdnummer") = pntInf.wednr
      rsOut("PT_PNT_OrderID") = pntInf.orderID
    
      rsOut("PT_Wedstrijdnummer") = prInf.wednr
      rsOut("PT_Is_Estimate") = isEstimate
      rsOut("PT_Programmanummer") = hzn(prInf.prognr)
      
      rsOut("PT_PNT_GRP_CatIdx") = pntGrpCatIdx
      rsOut("PT_PNT_GRP_Categorie") = hzn(pntGrpCategorie)
      rsOut("PT_PNT_GRP_ABC") = hzn(pntGrpABC)
      rsOut("PT_PNT_GRP_Beschrijving") = hzn(pntGrpDes)
      
      rsOut("PT_Vereniging") = hzn(vName)
      rsOut("PT_Depot") = hzn(vDepot)
      rsOut("PT_Slag") = hzn(prInf.slag)
      rsOut("PT_Afstand") = hzn(prInf.Afstand)
      rsOut("PT_Categorie") = hzn(prInf.cat)
      rsOut("PT_Beschrijving_categorie") = hzn(prInf.bescat)
      rsOut("PT_Type") = hzn(prInf.type)
      rsOut("PT_Beschrijving_afwijkend") = hzn(prInf.besAfw)
      
      rsOut("PT_N_Meetellende_zwemmers") = prInf.nComp
      rsOut("PT_Vervangende_tijd") = prInf.vvt
      rsOut("PT_IS_Estaf") = prInf.isEstaf
      Dim i As Integer
      For i = 0 To prInf.nComp - 1
        If (i < nItems) Then
            rsOut("PT_Tijd_" & (i + 1)) = pntItems(pntItemsFirstIdx, i).pntTime
            rsOut("PT_Actual_Tijd_" & (i + 1)) = pntItems(pntItemsFirstIdx, i).actTime
            rsOut("PT_Punten_" & (i + 1)) = pntItems(pntItemsFirstIdx, i).pnt
            rsOut("PT_IS_Dis_" & (i + 1)) = pntItems(pntItemsFirstIdx, i).actIsDis
            rsOut("PT_toevoegen_dis_" & (i + 1)) = pntItems(pntItemsFirstIdx, i).tvDis
            rsOut("PT_IS_VVT_" & (i + 1)) = pntItems(pntItemsFirstIdx, i).pntIsVV
            If (prInf.isEstaf) Then
              rsOut("PT_Estafettenummer_" & (i + 1)) = pntItems(pntItemsFirstIdx, i).estNr
              lastUsedEstGUID = lastUsedEstGUID + 1
              rsOut("PT_INT_ESTGUID_" & (i + 1)) = lastUsedEstGUID
              
              rsOutEst.AddNew
              rsOutEst("PT_INT_ESTGUID") = lastUsedEstGUID
                  
              Dim j As Integer
              For j = 0 To prInf.estafCnt - 1
                rsOutEst("PT_Estaf_startnummer_" & (j + 1)) = hzn(pntItems(pntItemsFirstIdx, i).estStarts(j))
                rsOutEst("PT_Estaf_naam_" & (j + 1)) = hzn(pntItems(pntItemsFirstIdx, i).estNames(j))
              Next j
              rsOutEst.Update
              
            Else
              rsOut("PT_Startnummer_" & (i + 1)) = hzn(pntItems(pntItemsFirstIdx, i).start)
              rsOut("PT_Naam_" & (i + 1)) = hzn(pntItems(pntItemsFirstIdx, i).nm)
            End If
        Else
          rsOut("PT_Punten_" & (i + 1)) = pVVPnt
          rsOut("PT_Is_VVT_" & (i + 1)) = True
        End If
      Next i
      
      
      
      rsOut("PT_Subtotaal") = subTot
      rsOut("PT_Cumulatief") = newCumPnts
      rsOut("PT_Cumulatief_NoInitVal") = newCumPnts - vInitPoints
      rsOut("PT_Toevoegen_dis_cumulatief") = newCumTvDis
      
      
      rsOut.Update
      
      
      
pntCalcVerOutputItems = True
Exit Function
fout:
MsgBox Err & " pntCalcVerOutputItems" & vbCrLf & Error$, 16
Exit Function
'debug
On Error GoTo 0
Resume
End Function


Public Sub shiftRightItems(ByVal pos As Integer, ByVal Shift As Integer, ByVal oldCnt As Integer, ByRef itemArray() As PNT_VER_OUTPUT_ITEM)
On Error GoTo fout
If (Shift = 0) Then
  Exit Sub
End If
Dim insPos As Integer
Dim done As Boolean
insPos = oldCnt - 1 + Shift
done = (insPos - Shift < pos)
While Not done
  itemArray(insPos) = itemArray(insPos - Shift)
  insPos = insPos - 1
  done = (insPos - Shift < pos)
Wend

Exit Sub
fout:
MsgBox Err & " " & Error$, 16
Exit Sub
End Sub

Public Sub shiftRightItems2d(ByVal firstIdx As Integer, ByVal pos As Integer, ByVal Shift As Integer, ByVal oldCnt As Integer, ByRef itemArray() As PNT_VER_OUTPUT_ITEM)
On Error GoTo fout
If (Shift = 0) Then
  Exit Sub
End If
Dim insPos As Integer
Dim done As Boolean
insPos = oldCnt - 1 + Shift
done = (insPos - Shift < pos)
While Not done
  itemArray(firstIdx, insPos) = itemArray(firstIdx, insPos - Shift)
  insPos = insPos - 1
  done = (insPos - Shift < pos)
Wend

Exit Sub
fout:
MsgBox Err & " " & Error$, 16
Exit Sub
End Sub



Public Function pntCalcInd_OutputStats(ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal pntCalcMode) As Boolean
On Error GoTo fout
pntCalcInd_OutputStats = False

Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset("~pntUitslagInd_Stats")
rs.AddNew
  rs("UT_PNT_Wedstrijdnummer") = pntInf.wednr
  rs("UT_PNT_OrderID") = pntInf.orderID
  rs("UT_PNT_CalcMode") = pntCalcMode
rs.Update
  

pntCalcInd_OutputStats = True
Exit Function
fout:
MsgBox Err & " pntCalcInd_OutputStats" & vbCrLf & Error$, 16
Exit Function
End Function


Private Function pntCalcIndCreateTables(ByRef pntInfo As PNT_GLOBAL_BASIC_INFO, ByVal tbName As String) As Boolean
On Error GoTo fout
pntCalcIndCreateTables = False

DoCmd.SetWarnings False
DoCmd.DeleteObject acTable, tbName
DoCmd.SetWarnings True

Dim mydb As Database
Set mydb = CurrentDb()
Dim tbDef As TableDef
Set tbDef = mydb.CreateTableDef

Dim fld As Field

Set fld = tbDef.CreateField("UT_PNT_Wedstrijdnummer", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("UT_PNT_OrderID", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("UT_Naam", dbText, 50)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("UT_Ranking", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("UT_RankingCounter", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("UT_RankingDisplay", dbText, 10)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("UT_Startnummer", dbText, 8)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("UT_Geslacht", dbText, 1)
tbDef.Fields.Append fld


Set fld = tbDef.CreateField("UT_Vereniging", dbText, 50)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("UT_Categorie", dbText, 50)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("UT_CatOrder", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("UT_CatDescription", dbText, 50)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("UT_Eindpunten", dbDouble)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("UT_ABC", dbText, 1)
tbDef.Fields.Append fld


Dim nOnd As Integer
Dim ondCodes(0 To PNT_IND_MAX_N_CATOND) As String
Dim ondDes(0 To PNT_IND_MAX_N_CATOND) As String

If Not pntIndGetOnderdelen(pntInfo.wednr, pntInfo.orderID, nOnd, ondCodes, ondDes) Then
  Exit Function
End If

Dim i As Integer
For i = 0 To nOnd - 1
    Set fld = tbDef.CreateField("UT_Punten" & ondCodes(i), dbDouble)
    tbDef.Fields.Append fld

    Set fld = tbDef.CreateField("UT_Tijd" & ondCodes(i), dbDouble)
    tbDef.Fields.Append fld

    Set fld = tbDef.CreateField("UT_TDis" & ondCodes(i), dbDouble)
    tbDef.Fields.Append fld
    
    Set fld = tbDef.CreateField("UT_IsDis" & ondCodes(i), dbBoolean)
    tbDef.Fields.Append fld
    
    Set fld = tbDef.CreateField("UT_IsVV" & ondCodes(i), dbBoolean)
    tbDef.Fields.Append fld
    
    Set fld = tbDef.CreateField("UT_Afstand" & ondCodes(i), dbText, 20)
    tbDef.Fields.Append fld
    
    Set fld = tbDef.CreateField("UT_Slag" & ondCodes(i), dbText, 20)
    tbDef.Fields.Append fld
    

Next i


Set fld = tbDef.CreateField("UT_Tussenstand", dbDouble)
tbDef.Fields.Append fld

tbDef.name = tbName

mydb.TableDefs.Append tbDef

Set tbDef = Nothing


'Now create a third, statistics table.

Dim stTbName As String
stTbName = tbName & "_Stats"

DoCmd.SetWarnings False
DoCmd.DeleteObject acTable, stTbName
DoCmd.SetWarnings True

Set tbDef = mydb.CreateTableDef

Set fld = tbDef.CreateField("UT_PNT_Wedstrijdnummer", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("UT_PNT_OrderID", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("UT_PNT_CalcMode", dbInteger)
tbDef.Fields.Append fld


tbDef.name = stTbName
mydb.TableDefs.Append tbDef

Set tbDef = Nothing


pntCalcIndCreateTables = True

Exit Function
fout:
If (Err = 3011 Or Err = 7874) Then Resume Next
MsgBox Err & " pntCalcIndCreateTable" & vbCrLf & Error$, 16
Exit Function
End Function


Public Function pntIndGetOnderdelen(ByVal wednr As Long, ByVal pntOrderID As Long, ByRef nOnd As Integer, ByRef ondCodes() As String, ByRef ondDes() As String) As Boolean
On Error GoTo fout
pntIndGetOnderdelen = False

Dim ond As Recordset
Set ond = CurrentDb().OpenRecordset("Select * from dtgPuntentellingOnderdelen where pto_wedstrijdnummer = " & wednr & " and pto_orderID = " & pntOrderID & " order by pto_code")

nOnd = 0

ond.MoveFirst
Do Until ond.EOF
  Dim tpCode As String
  tpCode = Nz(ond("PTO_Code"))
  If (tpCode <> "") Then
    ondCodes(nOnd) = Nz(ond("PTO_Code"))
    ondDes(nOnd) = Nz(ond("PTO_Beschrijving"))
    nOnd = nOnd + 1
  End If
  ond.MoveNext
Loop

pntIndGetOnderdelen = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntIndGetOnderdelen" & vbCrLf & Error$, 16
Exit Function
End Function


Private Function pntGetCatStructure(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef nCats As Integer, ByRef catInfo() As CAT_INFO, ByRef pntCatInfo() As PNT_CAT_INFO, ByRef onderdelen() As PNT_CATOND_INFO) As Boolean
On Error GoTo fout
pntGetCatStructure = False

Dim pntCats As Recordset
Set pntCats = CurrentDb().OpenRecordset("select * from dtgPuntentellingCats where ptc_wedstrijdnummer = " & pntInf.wednr & " and ptc_orderID = " & pntInf.orderID & " order by ptc_categorie;")


Dim rsOnd As Recordset


nCats = 0

Dim nOnd As Integer

nOnd = 0

Do Until pntCats.EOF
  catInfo(nCats).cat = Nz(pntCats("PTC_Categorie"))
  catInfo(nCats).bescat = Nz(pntCats("PTC_BeschrijvingCategorie"))
  
  pntCatInfo(nCats).cat = catInfo(nCats).cat
  pntCatInfo(nCats).bescat = catInfo(nCats).bescat
  
  pntCatInfo(nCats).catOrder = Nz(pntCats("PTC_CatOrder"))
  
  'pntCatInfo(nCats).finaleCnt = Nz(pntCats("PTC_FinaleAantal"))
  'pntCatInfo(nCats).finaleProg = Nz(pntCats("PTC_FinaleProgrammanummer"))
  'pntCatInfo(nCats).finaleWed = Nz(pntCats("PTC_FinaleWedstrijdnummer"))
  'pntCatInfo(nCats).lenCnt = Nz(pntCats("PTC_Len_Aantal"))
  
  pntCatInfo(nCats).ondOffset = nOnd
  
  'Nu onderdelen inladen.
  Dim nOndCat As Integer
  nOndCat = 0
  Dim sql As String
  sql = "SELECT dtgPuntentellingOndCatDetails.*, dtgPuntentellingOnderdelen.* " & _
       "FROM dtgPuntentellingOnderdelen INNER JOIN dtgPuntentellingOndCatDetails ON " & _
       "(dtgPuntentellingOnderdelen.PTO_Code = dtgPuntentellingOndCatDetails.PTTM_OnderdeelCode) " & _
       "AND (dtgPuntentellingOnderdelen.PTO_OrderID = dtgPuntentellingOndCatDetails.PTTM_OrderID) " & _
       "AND (dtgPuntentellingOnderdelen.PTO_Wedstrijdnummer = dtgPuntentellingOndCatDetails.PTTM_Wedstrijdnummer) " & _
       "where pttm_wedstrijdnummer = " & pntInf.wednr & " and pttm_orderID = " & pntInf.orderID & _
       " and pttm_categorie = """ & pntCatInfo(nCats).cat & """ Order by pttm_onderdeelCode "
  Set rsOnd = CurrentDb().OpenRecordset(sql)
  
  rsOnd.MoveFirst
  Do Until rsOnd.EOF
    
    onderdelen(nOnd).blTeltMee = Nz(rsOnd("PTTM_TeltMee"))
    onderdelen(nOnd).Code = Nz(rsOnd("PTTM_OnderdeelCode"))
    
    
    'modification dd feb 2009: use work fields
    onderdelen(nOnd).blRequireValidTime = Nz(rsOnd("PTTM_WORK_RequireValidTime"))
    onderdelen(nOnd).vvPnts = Nz(rsOnd("PTTM_WORK_VervangendePunten"))
    onderdelen(nOnd).vvTijd = Nz(rsOnd("PTTM_WORK_VervangendeTijd"))

    'onderdelen(nOnd).blRequireValidTime = Nz(rsOnd("PTTM_RequireValidTime"))
    'onderdelen(nOnd).vvPnts = Nz(rsOnd("PTTM_VervangendePunten"))
    'onderdelen(nOnd).vvTijd = Nz(rsOnd("PTTM_VervangendeTijd"))
    
    onderdelen(nOnd).des = Nz(rsOnd("PTO_Beschrijving"))
    
    nOndCat = nOndCat + 1
    nOnd = nOnd + 1
    rsOnd.MoveNext
  Loop
  
  pntCatInfo(nCats).ondCnt = nOndCat
  nCats = nCats + 1
  
  pntCats.MoveNext
Loop



pntGetCatStructure = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntGetCatStructure" & vbCrLf & Error$, 16
Exit Function
End Function

Private Function pntFindZwmInitVal(ByRef pntTstZwms As Recordset, ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal blUseTst As Boolean, ByVal vName As String, ByVal zwStart As String, ByRef zwInitVal As Double, ByRef isFnd As Boolean) As Boolean
On Error GoTo fout
pntFindZwmInitVal = False

isFnd = False
zwInitVal = 0

If (Not blUseTst) Then
  isFnd = True
  zwInitVal = 0
Else
  pntTstZwms.Seek "=", pntInf.wednr, pntInf.orderID, vName, zwStart
  If Not pntTstZwms.NoMatch Then
    isFnd = True
    zwInitVal = pntTstZwms("PTT_Punten")
  End If
End If


pntFindZwmInitVal = True
Exit Function
fout:
MsgBox Err & " pntFindZwmInitVal" & vbCrLf & Error$, 16
Exit Function
End Function

Public Function pntFindVerRestriction(ByRef pntDlnVers As Recordset, ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal vName As String, ByVal blRestrictVers As Boolean, ByRef isVerAllowed As Boolean) As Boolean
On Error GoTo fout
pntFindVerRestriction = False

isVerAllowed = True

If blRestrictVers Then
  'Have to look up in the restriction table.
  pntDlnVers.Seek "=", pntInf.wednr, pntInf.orderID, vName
  If (pntDlnVers.NoMatch) Then
    isVerAllowed = False
  End If
End If


pntFindVerRestriction = True
Exit Function
fout:
MsgBox Err & " pntFindVerRestriction" & vbCrLf & Error$, 16
Exit Function
End Function

Public Function pntGetVVTOpts(ByVal wednr As Long, ByVal pntOrderID As Long, ByRef vvtOpts As PNT_VVT_CALC_OPTS, ByRef sPntType As String) As Boolean
On Error GoTo fout
pntGetVVTOpts = False

Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset("Select * from dtgPuntentellingDefs where ptg_wedstrijdnummer=" & wednr & " and ptg_orderID = " & pntOrderID & ";")

rs.MoveFirst
If rs.EOF Then
  sPntType = PNT_TYPE_VER_SEC
  If Not pntGenerateDefaultVVTCalcOpts(vvtOpts) Then
    Exit Function
  End If
Else
  sPntType = Nz(rs("PTG_Type"))
  If (sPntType = PNT_TYPE_VER_SEC) Then
    If Not pntReadVVTCalcOpts(rs, "PTG_VER_SEC_VVT_", vvtOpts) Then
      Exit Function
    End If
  ElseIf (sPntType = PNT_TYPE_IND) Then
    If Not pntReadVVTCalcOpts(rs, "PTG_IND_VVT_", vvtOpts) Then
      Exit Function
    End If
  End If
End If

pntGetVVTOpts = True
Exit Function
fout:
If (Err = 3021) Then Resume Next

MsgBox Err & " pntGetVVTOpts" & vbCrLf & Error$, 16
Exit Function
End Function


Public Function pntSetVVTOpts(ByVal wednr As Long, ByVal pntOrderID As Long, ByRef vvtOpts As PNT_VVT_CALC_OPTS) As Boolean
On Error GoTo fout
pntSetVVTOpts = False

Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset("Select * from dtgPuntentellingDefs where ptg_wedstrijdnummer=" & wednr & " and ptg_orderID = " & pntOrderID & ";")

rs.MoveFirst
If rs.EOF Then
  Err.Raise 1, , "Could not set vvt options, since puntentelling: ( " & wednr & " , " & pntOrderID & " ) does not exist."
Else
  Dim sPntType As String
  sPntType = Nz(rs("PTG_Type"))
  
  rs.Edit
    If (sPntType = PNT_TYPE_VER_SEC) Then
      If Not pntWriteVVTCalcOpts(rs, "PTG_VER_SEC_VVT_", vvtOpts) Then
        Exit Function
      End If
    ElseIf (sPntType = PNT_TYPE_IND) Then
      If Not pntWriteVVTCalcOpts(rs, "PTG_IND_VVT_", vvtOpts) Then
        Exit Function
      End If
    End If
  rs.Update
End If

pntSetVVTOpts = True
Exit Function
fout:
If (Err = 3021) Then Resume Next

MsgBox Err & " pntSetVVTOpts" & vbCrLf & Error$, 16
Exit Function
End Function






Public Function pntINDLookup(ByVal wednr As Long, ByVal pntOrderID As Long, ByRef isFound As Boolean, ByRef pntOptions As PNT_IND_OPTIONS) As Boolean
On Error GoTo fout
pntINDLookup = False

isFound = False

Dim rs As Recordset

Dim sql As String

  sql = "select * from dtgPuntentellingDefs where ptg_wedstrijdnummer = " & wednr & " and ptg_orderID = " & pntOrderID

Set rs = CurrentDb().OpenRecordset(sql)

rs.MoveFirst
If (Not rs.EOF) Then

    pntOptions.rnkOpts.blRespectABC = Nz(rs("PTG_IND_RespectABC"))
    pntOptions.rnkOpts.blRestrictABC = Nz(rs("PTG_IND_RestrictABC"))
    pntOptions.rnkOpts.sABCCodes = Nz(rs("PTG_IND_RestrictABCCodes"))
    
    pntOptions.blSortPerVer = Nz(rs("PTG_IND_SortPerVer"))
    pntOptions.tdToPointMode = Nz(rs("PTG_IND_TijdToPointMode"), PNT_TD_TO_PNT_MODE_SEC)
    pntOptions.blUseTst = Nz(rs("PTG_IND_UseTussenstand"))
    
    pntOptions.blRestrictVers = Nz(rs("PTG_IND_RestrictVers"))
    
    If Not pntReadVVTCalcOpts(rs, "PTG_IND_VVT_", pntOptions.vvtOpts) Then
      Exit Function
    End If
    
    
    'pntOptions.blIsFastestLen = Nz(rs("PTG_IND_IsFastestLen"))

  isFound = True
End If

  

appCleanRS rs

'Set rs = c



pntINDLookup = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntINDLookup" & vbCrLf & Error$, 16
Exit Function
'debug
On Error GoTo 0
Resume
End Function


Public Function pntVerPntLookup(ByVal wednr As Long, ByVal pntOrderID As Long, ByRef isFound As Boolean, ByRef pntOptions As PNT_VER_PNT_OPTIONS) As Boolean
On Error GoTo fout
pntVerPntLookup = False

isFound = False

Dim rs As Recordset

Dim sql As String

  sql = "select * from dtgPuntentellingDefs where ptg_wedstrijdnummer = " & wednr & " and ptg_orderID = " & pntOrderID

Set rs = CurrentDb().OpenRecordset(sql)

rs.MoveFirst
If (Not rs.EOF) Then

    pntOptions.disMode = Nz(rs("PTG_VER_PNT_DisMode"))
    pntOptions.disFixedPoints = Nz(rs("PTG_VER_PNT_DisFixedPoints"))
    pntOptions.blDisFixedPointRequireValidTime = Nz(rs("PTG_VER_PNT_DisFixedPointRequireValidTime"))
    pntOptions.blDoortellen = Nz(rs("PTG_VER_PNT_Doortellen"))
    pntOptions.blUseTst = Nz(rs("PTG_VER_PNT_UseTussenstand"))
    pntOptions.blUseStdTst = Nz(rs("PTG_VER_PNT_UseStandardTussenstand"))
    
    pntOptions.blUseStdProgSettings = Nz(rs("PTG_VER_PNT_UseStandardProgSettings"))
    pntOptions.blRestrictVers = Nz(rs("PTG_VER_PNT_RestrictVers"))
    
    pntOptions.blIncludeRVerTimes = Nz(rs("PTG_VER_PNT_IncludeRVerTimes"))
    
    pntOptions.blUseProgSubOrdering = Nz(rs("PTG_VER_PNT_UseProgMCats"))
    
    'correction: only allow includeRVerTimes if blDoortellen = true
    If Not pntOptions.blDoortellen Then
      pntOptions.blIncludeRVerTimes = False
    End If
    
    pntOptions.blGroupVers = Nz(rs("PTG_VER_PNT_UseVerGroups"))
    
  isFound = True
End If

  
appCleanRS rs


'Set rs = c



pntVerPntLookup = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntVerPntLookup" & vbCrLf & Error$, 16
Exit Function
'debug
On Error GoTo 0
Resume
End Function


Public Function pntVerMedLookup(ByVal wednr As Long, ByVal pntOrderID As Long, ByRef isFound As Boolean, ByRef pntOptions As PNT_VER_MED_OPTIONS) As Boolean
On Error GoTo fout
pntVerMedLookup = False

isFound = False

Dim rs As Recordset

Dim sql As String

  sql = "select * from dtgPuntentellingDefs where ptg_wedstrijdnummer = " & wednr & " and ptg_orderID = " & pntOrderID

Set rs = CurrentDb().OpenRecordset(sql)

rs.MoveFirst
If (Not rs.EOF) Then

    pntOptions.blUseTst = Nz(rs("PTG_VER_MED_UseTussenstand"))
    pntOptions.blUseStdProgSettings = Nz(rs("PTG_VER_MED_UseStandardProgSettings"))
    pntOptions.blRestrictVers = Nz(rs("PTG_VER_MED_RestrictVers"))
    pntOptions.blGroupVers = Nz(rs("PTG_VER_MED_UseVerGroups"))
    
  isFound = True
End If

  
appCleanRS rs


'Set rs = c



pntVerMedLookup = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntVerPntLookup" & vbCrLf & Error$, 16
Exit Function
'debug
On Error GoTo 0
Resume
End Function




Private Function pntVerSecGetDefault(ByVal wednr As Long, ByRef pntOptions As PNT_VER_SEC_OPTIONS) As Boolean
On Error GoTo fout
pntVerSecGetDefault = False


pntOptions.blRestrictVers = False
pntOptions.blUseStdProgSettings = True
pntOptions.blUseTst = False
pntOptions.blUseStdTst = False
pntOptions.disMode = PNT_DSQ_MODE_ADD_PEN
pntOptions.vvtOpts.blCalcVVTs = False

pntOptions.blSingleLft = False

pntOptions.blIntUseLftRestrictionTable = False

'This one needs to be looked up.
pntOptions.tdToPointMode = PNT_TD_TO_PNT_MODE_SEC

Dim blTerugRekenen As Boolean
Dim blSingleLft As Boolean
Dim blUseTst As Boolean

blTerugRekenen = False
blSingleLft = False
blUseTst = False



If Not pntGetStdOpts(wednr, blUseTst, blTerugRekenen, blSingleLft) Then
  Exit Function
End If

If blTerugRekenen Then
 pntOptions.tdToPointMode = PNT_TD_TO_PNT_MODE_SECFIFTY
End If

If (blUseTst) Then
  pntOptions.blUseTst = True
  pntOptions.blUseStdTst = True
End If

pntOptions.blSingleLft = False

If blSingleLft Then
  pntOptions.blSingleLft = True
End If


pntOptions.blGroupVers = False

pntVerSecGetDefault = True
Exit Function
fout:
MsgBox Err & " pntVerSecGetDefault" & vbCrLf & Error$, 16
Exit Function
End Function

Public Function pntVerSecLookup(ByVal wednr As Long, ByVal pntOrderID As Long, ByRef isFound As Boolean, ByRef pntOptions As PNT_VER_SEC_OPTIONS) As Boolean
On Error GoTo fout
pntVerSecLookup = False

isFound = False


If (pntOrderID = -1) Then


  If Not pntVerSecGetDefault(wednr, pntOptions) Then
    Exit Function
  End If
  isFound = True

Else
    
    Dim rs As Recordset
    
    Dim sql As String
    
      sql = "select * from dtgPuntentellingDefs where ptg_wedstrijdnummer = " & wednr & " and ptg_orderID = " & pntOrderID
    
    Set rs = CurrentDb().OpenRecordset(sql)
    
    rs.MoveFirst
    If (Not rs.EOF) Then
    
        If Not pntReadVVTCalcOpts(rs, "PTG_VER_SEC_VVT_", pntOptions.vvtOpts) Then
          Exit Function
        End If
    
        pntOptions.disMode = Nz(rs("PTG_VER_SEC_DisMode"))
        pntOptions.blUseTst = Nz(rs("PTG_VER_SEC_UseTussenstand"))
        pntOptions.blUseStdTst = Nz(rs("PTG_VER_SEC_UseStandardTussenstand"))
        
        pntOptions.blUseStdProgSettings = Nz(rs("PTG_VER_SEC_UseStandardProgSettings"))
        pntOptions.blRestrictVers = Nz(rs("PTG_VER_SEC_RestrictVers"))
        
        pntOptions.tdToPointMode = Nz(rs("PTG_VER_SEC_TijdToPointMode"))
        
        pntOptions.blSingleLft = Nz(rs("PTG_VER_SEC_SingleLft"))
        
        pntOptions.blIntUseLftRestrictionTable = False
        
        pntOptions.blGroupVers = Nz(rs("PTG_VER_SEC_UseVerGroups"))
        
      isFound = True
    End If
    
      
End If


'Set rs = c
appCleanRS rs


pntVerSecLookup = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntVerSecLookup" & vbCrLf & Error$, 16
Exit Function
'debug
On Error GoTo 0
Resume
End Function




Private Function pntGlobalGetDefaultInfo(ByVal wednr As Long, ByRef pntInfo As PNT_GLOBAL_BASIC_INFO) As Boolean
On Error GoTo fout
pntGlobalGetDefaultInfo = False

Dim wedInf As WED_BASIC_INFO
Dim isFnd As Boolean
If Not wedLookup(wednr, isFnd, wedInf) Then
  Exit Function
End If
If Not isFnd Then
  Err.Raise 1, , "Kon wedstrijd: " & wednr & " niet vinden."
End If

pntInfo.wednr = wednr
pntInfo.orderID = -1
pntInfo.des = wedInf.des
pntInfo.shortName = "Stand. Pnt."
pntInfo.type = PNT_TYPE_VER_SEC
pntInfo.blEntireMeet = False



pntGlobalGetDefaultInfo = True
Exit Function
fout:
MsgBox Err & " pntGlobalGetDefaultInfo" & vbCrLf & Error$, 16
Exit Function
End Function



Private Function pntGlobalReadInfo(ByRef rs As Recordset, ByRef pntInfo As PNT_GLOBAL_BASIC_INFO) As Boolean
On Error GoTo fout
pntGlobalReadInfo = False


pntInfo.wednr = Nz(rs("PTG_Wedstrijdnummer"))
pntInfo.orderID = Nz(rs("PTG_OrderID"))
pntInfo.des = Nz(rs("PTG_Beschrijving"))
pntInfo.shortName = Nz(rs("PTG_ShortName"))
pntInfo.type = Nz(rs("PTG_Type"))
pntInfo.blEntireMeet = Nz(rs("PTG_EntireMeet"))


pntGlobalReadInfo = True
Exit Function
fout:
MsgBox Err & " pntGlobalReadInfo" & vbCrLf & Error$, 16
Exit Function
End Function

Public Function pntGlobalLookupNext(ByVal wednr As Long, ByVal pntOrderID As Long, ByRef isFound As Boolean, ByRef pntInfo As PNT_GLOBAL_BASIC_INFO) As Boolean
pntGlobalLookupNext = pntGlobalLookup_Perform(wednr, pntOrderID, 1, isFound, pntInfo)
End Function

Public Function pntGlobalLookupPrevious(ByVal wednr As Long, ByVal pntOrderID As Long, ByRef isFound As Boolean, ByRef pntInfo As PNT_GLOBAL_BASIC_INFO) As Boolean
pntGlobalLookupPrevious = pntGlobalLookup_Perform(wednr, pntOrderID, -1, isFound, pntInfo)
End Function

Public Function pntGlobalLookup(ByVal wednr As Long, ByVal pntOrderID As Long, ByRef isFound As Boolean, ByRef pntInfo As PNT_GLOBAL_BASIC_INFO) As Boolean
pntGlobalLookup = pntGlobalLookup_Perform(wednr, pntOrderID, 0, isFound, pntInfo)
End Function

Private Function pntGlobalLookup_Perform(ByVal wednr As Long, ByVal pntOrderID As Long, ByVal direction As Integer, ByRef isFound As Boolean, ByRef pntInfo As PNT_GLOBAL_BASIC_INFO) As Boolean
On Error GoTo fout
pntGlobalLookup_Perform = False

isFound = False

Dim rs As Recordset

Dim sql As String



If (pntOrderID = -1 And direction = 0) Then

  If Not pntGlobalGetDefaultInfo(wednr, pntInfo) Then
    Exit Function
  End If

  isFound = True

Else

    If (direction = 0) Then
      sql = "select * from dtgPuntentellingDefs where ptg_wedstrijdnummer = " & wednr & " and ptg_orderID = " & pntOrderID
    Else
      sql = "select * from dtgPuntentellingDefs where ptg_wedstrijdnummer = " & wednr & " order by ptg_orderId"
    End If
    
    Set rs = CurrentDb().OpenRecordset(sql)
    
    If (direction = 0) Then
      rs.MoveFirst
      If (Not rs.EOF) Then
        If Not pntGlobalReadInfo(rs, pntInfo) Then
          Exit Function
        End If
        isFound = True
      End If
    Else
      rs.FindFirst "ptg_wedstrijdnummer=" & wednr & " and ptg_orderID = " & pntOrderID
      If Not rs.NoMatch Then
        If (direction < 0) Then
          rs.MovePrevious
        Else
          rs.MoveNext
        End If
        If (Not rs.BOF) And (Not rs.EOF) Then
          If Not pntGlobalReadInfo(rs, pntInfo) Then
            Exit Function
          End If
          isFound = True
        End If
      End If
    End If

End If 'if pntOrderID = -1 and direction = 0



'Set rs = c



pntGlobalLookup_Perform = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntGlobalLookup_Perform" & vbCrLf & Error$, 16
Exit Function
'debug
On Error GoTo 0
Resume
End Function


Public Function pntGlobalPromptUser(ByVal wednr As Long, ByVal wedMeetNr As Long, ByVal blAllowMeet As Boolean, ByVal blAllowInd As Boolean, ByVal blAllowVerSec As Boolean, ByVal blAllowVerPnt As Boolean, ByVal blAllowVerMed As Boolean, ByRef isOK As Boolean, ByRef lkpWedNr As Long, ByRef lkpPntOrderID As Long) As Boolean
On Error GoTo fout
pntGlobalPromptUser = False


Dim sql As String
sql = "Delete * from hpoPntOpzoek;"
DoCmd.SetWarnings False
DoCmd.RunSQL sql
DoCmd.SetWarnings True

Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset("hpoPntOpzoek")

rs.AddNew
  rs("PNTO_ARG_Wedstrijdnummer") = wednr
  rs("PNTO_ARG_MeetMainNr") = wedMeetNr
  rs("PNTO_ARG_AllowMeet") = blAllowMeet
  rs("PNTO_OK") = False
  rs("PNTO_ARG_AllowVerSec") = blAllowVerSec
  rs("PNTO_ARG_AllowVerPnt") = blAllowVerPnt
  rs("PNTO_ARG_AllowVerMed") = blAllowVerMed
  rs("PNTO_ARG_AllowInd") = blAllowInd
rs.Update

rs.Close

DoCmd.OpenForm "hpoPntOpzoek", , , , , acDialog

Set rs = CurrentDb().OpenRecordset("hpoPntOpzoek")

rs.MoveFirst
If rs.EOF Then
  Err.Raise 1, , "Intern probleem. Tabel hpoPntOpzoek is leeg."
End If

isOK = Nz(rs("PNTO_OK"))


lkpWedNr = Nz(rs("PNTO_Wedstrijdnummer"))
lkpPntOrderID = Nz(rs("PNTO_OrderID"))

rs.Close

pntGlobalPromptUser = True
Exit Function
fout:
If (Err = 3021) Then Resume Next ' no current record
MsgBox Err & " pntGlobalPromptUser" & vbCrLf & Error$, 16
DoCmd.SetWarnings True
Exit Function
End Function

Private Function pntNewTvDis(ByVal curProgTotAf As Long, ByRef vvtOpts As PNT_VVT_CALC_OPTS, ByRef newTvDis As Double) As Boolean
On Error GoTo fout
pntNewTvDis = False

Dim disPen As Double
Dim blDisPenPer100 As Boolean
Dim disMaxPen As Double
disPen = vvtOpts.vvtDisPenalty
blDisPenPer100 = vvtOpts.vvtDisPenPer100
disMaxPen = vvtOpts.vvtMaxDisPenalty

  If (Not vvtOpts.vvtAddDisPenalty) Then
    newTvDis = 0
  Else
    If (blDisPenPer100) Then
      newTvDis = disPen * curProgTotAf * 0.01
      If (newTvDis > disMaxPen) Then
        newTvDis = disMaxPen
      End If
    Else
      newTvDis = disPen
    End If
  End If




pntNewTvDis = True
Exit Function
fout:
MsgBox Err & " pntNewTvDis" & vbCrLf & Error$, 16
Exit Function
End Function


'Update the TVDis and VVT fields to reflect the options in pntVSOpts.vvtOpts
Private Function pntCalcVerSec_calc_vvts_set_work(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVSOpts As PNT_VER_SEC_OPTIONS) As Boolean
On Error GoTo fout
pntCalcVerSec_calc_vvts_set_work = False

'Need only consider the competitors.

'The tactic will be to first set VVT to 10 hours.
    Dim vvtLarge As Long
    vvtLarge = 100000#


Dim pntProgs As Recordset
Dim progs As Recordset

Set pntProgs = CurrentDb().OpenRecordset("Select * from dtgPuntentellingProgs where ptpr_Wedstrijdnummer=" & pntInf.wednr & " and ptpr_orderID=" & pntInf.orderID)

Set progs = CurrentDb().OpenRecordset(TNM_PR)
progs.Index = "PrimaryKey"




pntProgs.MoveFirst
Do Until pntProgs.EOF

  Dim tpWedNr As Long
  Dim tpProgNr As String
  
  tpWedNr = Nz(pntProgs("PTPR_ProgWedstrijdnummer"))
  tpProgNr = Nz(pntProgs("PTPR_ProgProgrammanummer"))
  
  progs.Seek "=", tpWedNr, tpProgNr
  
  If progs.NoMatch Then
    Err.Raise 1, , "Internal error. Could not find programmanr: ( " & tpWedNr & ", " & tpProgNr & ")"
  End If
  
    
  Dim newVVT As Double
  Dim newTvDis As Double
  
  
  Dim tpAf As String, tpEstAf As Boolean
  tpAf = Nz(progs(FNM_PR_AF))
  tpEstAf = tpAf Like "*x*"
  
  Dim tpTotAf As Double
  If (tpEstAf) Then
    tpTotAf = CLng(afstand_n_zwemmers(tpAf) * afstand_ind_part(tpAf))
  Else
    tpTotAf = CLng(val(tpAf))
  End If
  
  
  newVVT = vvtLarge
  newTvDis = 0
  
  If Not pntNewTvDis(tpTotAf, pntVSOpts.vvtOpts, newTvDis) Then
    Exit Function
  End If
  
  
  'Calculated the disqualification penalty
  
  pntProgs.Edit
    pntProgs("PTPR_WORK_TvDis") = newTvDis
    pntProgs("PTPR_WORK_VVT") = newVVT
  pntProgs.Update
  
  pntProgs.MoveNext
Loop
  








pntCalcVerSec_calc_vvts_set_work = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcVerSec_calc_vvts_set_work" & vbCrLf & Error$, 16
Exit Function

'debug
On Error GoTo 0
Resume

End Function


'This procedure updates the WORK_VVT field in the dtgPuntentellingProgs table to reflect the vvt calculated
'from the times of the swimmers that compete in the puntentelling.

Private Function pntCalcVerSec_calc_vvts_from_comps(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVSOpts As PNT_VER_SEC_OPTIONS, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalcVerSec_calc_vvts_from_comps = False





'We create a new set of options for performing the puntentelling.

'First backup the current work fields.
If Not pntBufferWorkFields(pntInf, "A") Then
  Exit Function
End If


Dim newPntVSOpts As PNT_VER_SEC_OPTIONS
newPntVSOpts = pntVSOpts

newPntVSOpts.blUseStdProgSettings = False
newPntVSOpts.disMode = PNT_DSQ_MODE_ADD_PEN
newPntVSOpts.tdToPointMode = PNT_TD_TO_PNT_MODE_SEC



'Now correctly update the work fields to set the tvDis according to vvtOpts and set all vvt to Infinity
If Not pntCalcVerSec_calc_vvts_set_work(wedInf, pntInf, pntVSOpts) Then
  Exit Function
End If


'Now calculate a table of results using these updated options

If Not pntCalcVerSec_driver_post_vvt(wedInf, pntInf, newPntVSOpts, pntCalcMode) Then
  Exit Function
End If



'Restore the work fields.
If Not pntRestoreWorkFields(pntInf, "A") Then
  Exit Function
End If

'Combine the results in the output __punten table to determine new VVT.

Dim pnt As Recordset
Set pnt = CurrentDb().OpenRecordset("select * from [__punten] order by pt_wedstrijdnummer, pt_programmanummer")

Dim pntProgs As Recordset
Set pntProgs = CurrentDb().OpenRecordset("dtgPuntentellingProgs")
pntProgs.Index = "PrimaryKey"


Dim curWed As Long
Dim curProg As String

Dim curProgTotAf As Long
Dim curProgNComp As Integer

Dim tpWed As Long
Dim tpProg As String
Dim tpAf As String
Dim tpNComp As Integer


curWed = -1
curProg = ""


Dim eofflag As Boolean

pnt.MoveFirst

eofflag = pnt.EOF


Dim MaxPunten As Double

Do Until eofflag
  If (pnt.EOF) Then
    eofflag = True
    tpWed = -1
    tpProg = ""
    tpAf = ""
    tpNComp = 0
  Else
    tpWed = Nz(pnt("PT_Wedstrijdnummer"))
    tpProg = Nz(pnt("PT_Programmanummer"))
    tpAf = Nz(pnt("PT_Afstand"))
    tpNComp = Nz(pnt("PT_N_Meetellende_zwemmers"))
  End If
  
  
  If (tpWed <> curWed Or tpProg <> curProg) Then
    If (curWed <> -1) And curProgNComp > 0 Then
      'update the vervangende tijd.
      
      pntProgs.Seek "=", pntInf.wednr, pntInf.orderID, curWed, curProg
      
      If pntProgs.NoMatch Then
        Err.Raise 1, , "Internal error."
      End If
      
      
      Dim newVVT As Double
        
      If Not pntNewVVT(MaxPunten, curProgTotAf, pntVSOpts.vvtOpts, newVVT) Then
        Exit Function
      End If
        
        
        pntProgs.Edit
          pntProgs("PTPR_WORK_VVT") = newVVT
        pntProgs.Update
  
    End If 'if curWed <> -1
    
    curWed = tpWed
    curProg = tpProg
    
    If tpAf Like "*x*" Then
      curProgTotAf = CLng(afstand_n_zwemmers(tpAf) * afstand_ind_part(tpAf))
    Else
      curProgTotAf = CLng(val(tpAf))
    End If
    
    curProgNComp = tpNComp
    
    
    
    
    MaxPunten = -1
  End If
  
  
  
  
  If (Not eofflag) Then
    'Dim nComp As Long
    'nComp = Nz(pnt("PT_N_Meetellende_zwemmers"))
    If (tpNComp > 0) Then
    
      If (tpNComp > MAX_N_MEETEL) Then
        tpNComp = MAX_N_MEETEL
      End If
    
      Dim i As Integer
      For i = tpNComp To 1 Step -1
        If Not (Nz(pnt("PT_IS_VVT_" & i))) Then
          Dim tpPnt As Double
          tpPnt = Nz(pnt("PT_Punten_" & i))
          If (tpPnt > 0.5) Then
            If (tpPnt > MaxPunten) Then
              MaxPunten = tpPnt
              Exit For 'this was the maximum, due to ordering of i.
            End If
          End If
        End If
      Next i
    End If 'if tpNComp > 0
  
  
  
    pnt.MoveNext
  End If 'if not eofflag
Loop


appCleanRS pnt
appCleanRS pntProgs



pntCalcVerSec_calc_vvts_from_comps = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcVerSec_calc_vvts_from_comps" & vbCrLf & Error$, 16
Exit Function

'debug
On Error GoTo 0
Resume
End Function



Private Function pntNewVVT(ByVal MaxPunten As Double, ByVal curProgTotAf As Long, ByRef vvtOpts As PNT_VVT_CALC_OPTS, ByRef newVVT As Double) As Boolean
On Error GoTo fout
pntNewVVT = False


Dim newVVTPunten As Double
newVVTPunten = 0
      
If (MaxPunten > 0.5) Then

  newVVTPunten = MaxPunten

  'calculate new vvt on basis of old one + the penalty
    If (vvtOpts.vvtPenPer100) Then
      Dim pntPenalty As Double
      pntPenalty = curProgTotAf * 0.01 * vvtOpts.vvtPenalty
      If (pntPenalty > vvtOpts.vvtMaxPenalty) Then
        pntPenalty = vvtOpts.vvtMaxPenalty
      End If
      newVVTPunten = newVVTPunten + pntPenalty
    Else
      newVVTPunten = newVVTPunten + vvtOpts.vvtPenalty
    End If
End If
      

newVVT = swtFromSeconds(newVVTPunten)

pntNewVVT = True
Exit Function
fout:
MsgBox Err & " pntNewVVT" & vbCrLf & Error$, 16
Exit Function
End Function

Private Function pntCalcVerSec_calc_vvts_all_swimmers_perform(ByRef pntProgs As Recordset, ByRef progs As Recordset, ByVal isEstaf As Boolean, ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVSOpts As PNT_VER_SEC_OPTIONS) As Boolean
On Error GoTo fout
pntCalcVerSec_calc_vvts_all_swimmers_perform = False

Dim td As Recordset

Dim tySql As String


If (isEstaf) Then
  tySql = tyGetResultsEstSQL(False, pntInf.blEntireMeet, "", wedInf.wednr, wedInf.meetMainNr)
Else
  tySql = tyGetResultsPersSQL(False, pntInf.blEntireMeet, "", wedInf.wednr, wedInf.meetMainNr)
End If
tySql = tySql & " order by [" & FNM_TY_WED & "], [" & FNM_TY_PROG & "];"


Set td = CurrentDb().OpenRecordset(tySql)


Dim curWed As Long
Dim curProg As String

Dim curProgTotAf As Long
Dim curProgTvDis As Double

Dim curProgIsEstaf As Boolean

Dim tpWed As Long
Dim tpProg As String
Dim tpAf As String
    


curWed = -1
curProg = ""


Dim eofflag As Boolean

td.MoveFirst

eofflag = td.EOF


Dim MaxPunten As Double

Do Until eofflag
  If (td.EOF) Then
    eofflag = True
    tpWed = -1
    tpProg = ""
    tpAf = ""
  Else
    tpWed = Nz(td(FNM_TY_WED))
    tpProg = Nz(td(FNM_TY_PROG))
  End If
  
  
  If (tpWed <> curWed Or tpProg <> curProg) Then
    If (curWed <> -1) Then
      'update the vervangende tijd.
      
      pntProgs.Seek "=", pntInf.wednr, pntInf.orderID, curWed, curProg
      
      If pntProgs.NoMatch Then
        Err.Raise 1, , "Internal error."
      End If
      
      
      Dim newVVT As Double
        
      If Not pntNewVVT(MaxPunten, curProgTotAf, pntVSOpts.vvtOpts, newVVT) Then
        Exit Function
      End If
        
        
      pntProgs.Edit
        pntProgs("PTPR_WORK_VVT") = newVVT
      pntProgs.Update
        
        
    End If 'if curWed <> -1
    
    curWed = tpWed
    curProg = tpProg
    
    curProgTotAf = 0
    curProgTvDis = 0
    
    tpAf = ""
    If (curWed <> -1) Then
      progs.Seek "=", curWed, curProg
      If progs.NoMatch Then
        Err.Raise 1, , "Internal error."
      End If
      
      tpAf = Nz(progs(FNM_PR_AF))
    End If
    
    curProgIsEstaf = tpAf Like "*x*"
    
    
    If curProgIsEstaf Then
      curProgTotAf = CLng(afstand_n_zwemmers(tpAf) * afstand_ind_part(tpAf))
    Else
      curProgTotAf = CLng(val(tpAf))
    End If
    
    If Not pntNewTvDis(curProgTotAf, pntVSOpts.vvtOpts, curProgTvDis) Then
      Exit Function
    End If
    
    MaxPunten = -1
  End If
  
  
  
  
  If (Not eofflag) Then
    'process the current time.
    Dim tpTd As Double
    Dim tpDis As String
    
    If (curProgIsEstaf) Then
      tpTd = Nz(td(FNM_TY_EST_EINDTIJD))
      tpDis = Nz(td(FNM_TY_EST_DIS))
    Else
      tpTd = Nz(td(FNM_TY_PERS_EINDTIJD))
      tpDis = Nz(td(FNM_TY_PERS_DIS))
    End If
    
    If (swtIsValid(tpTd)) Then
      Dim tpPnt As Double
      tpPnt = swtToSeconds(tpTd)
      
      If (tpDis <> "") Then
        tpPnt = tpPnt + curProgTvDis
      End If
      
      If (tpPnt > MaxPunten) Then
        MaxPunten = tpPnt
      End If
    
    End If
      
    
  
  
    td.MoveNext
  End If 'if not eofflag
Loop




pntCalcVerSec_calc_vvts_all_swimmers_perform = True
Exit Function

fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcVerSec_calc_vvts_all_swimmers_perform" & vbCrLf & Error$, 16
Exit Function
End Function

Private Function pntCalcVerSec_calc_vvts_all_swimmers(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVSOpts As PNT_VER_SEC_OPTIONS, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalcVerSec_calc_vvts_all_swimmers = False


'Need to determine the vvt based on all valid times.

Dim pntProgs As Recordset
Set pntProgs = CurrentDb().OpenRecordset("dtgPuntentellingProgs")
pntProgs.Index = "PrimaryKey"


Dim progs As Recordset
Set progs = CurrentDb().OpenRecordset(TNM_PR)
progs.Index = "PrimaryKey"


'First run: personal times
If Not pntCalcVerSec_calc_vvts_all_swimmers_perform(pntProgs, progs, False, wedInf, pntInf, pntVSOpts) Then
  Exit Function
End If

'Second run: estafette times
If Not pntCalcVerSec_calc_vvts_all_swimmers_perform(pntProgs, progs, True, wedInf, pntInf, pntVSOpts) Then
  Exit Function
End If



pntCalcVerSec_calc_vvts_all_swimmers = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcVerSec_calc_vvts_all_swimmers" & vbCrLf & Error$, 16
Exit Function
End Function

Private Function pntCalcVerSec_driver_post_vvt(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVSOpts As PNT_VER_SEC_OPTIONS, pntCalcMode) As Boolean
On Error GoTo fout
pntCalcVerSec_driver_post_vvt = False

If pntVSOpts.blSingleLft Then

  'Have to update the number of participants that are calculated.
  
  'Create a new set of options.
  
  'Backup the work fields
  
  If Not pntBufferWorkFields(pntInf, "B") Then
    Exit Function
  End If
  
  Dim newPntVSOpts As PNT_VER_SEC_OPTIONS
  
  newPntVSOpts = pntVSOpts
  newPntVSOpts.blUseStdProgSettings = False
  
  'Now set all WORK_NComp fields to MAX_N_MEETEL
  DoCmd.SetWarnings False
  
  Dim sql As String
  
  sql = "UPDATE dtgPuntentellingProgs SET dtgPuntentellingProgs.PTPR_WORK_NComp = " & MAX_N_MEETEL & " " & _
        "WHERE (((dtgPuntentellingProgs.PTPR_Wedstrijdnummer)=" & pntInf.wednr & ") AND ((dtgPuntentellingProgs.PTPR_OrderID)=" & pntInf.orderID & "));"
  DoCmd.RunSQL sql
  
  
  DoCmd.SetWarnings True
  
  
  'Now do the calculations with MAX_N_MEETEL deelnemers per vereniging.
  
  If Not pntCalcVerSec_perform(wedInf, pntInf, newPntVSOpts, pntCalcMode) Then
    Exit Function
  End If
  
  'Now restore the work fields from the buffer
  If Not pntRestoreWorkFields(pntInf, "B") Then
    Exit Function
  End If
  
  'newPntVSOpts is now discarded. Revert back to pntVSOpts.
  
  
  'Now need to filter the results.
  
  If Not pntCalcVerSec_driver_lft_restriction(wedInf, pntInf, pntVSOpts) Then
    Exit Function
  End If
  
  
  'Now recalc with the restrictions in place.
  
  newPntVSOpts = pntVSOpts
  newPntVSOpts.blIntUseLftRestrictionTable = True
  
  If Not pntCalcVerSec_perform(wedInf, pntInf, newPntVSOpts, pntCalcMode) Then
    Exit Function
  End If
  
  
Else

  'Do not have to worry about age restrictions. Can simply calculate.

  If Not pntCalcVerSec_perform(wedInf, pntInf, pntVSOpts, pntCalcMode) Then
    Exit Function
  End If
  
End If
  


pntCalcVerSec_driver_post_vvt = True
Exit Function
fout:
DoCmd.SetWarnings True
MsgBox Err & " pntCalcVerSec_driver_post_vvt" & vbCrLf & Error$, 16
Exit Function
'debug
On Error GoTo 0
Resume
End Function

Private Function pntCalcVerSec_driver(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVSOpts As PNT_VER_SEC_OPTIONS, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalcVerSec_driver = False

Dim newPntVSOpts As PNT_VER_SEC_OPTIONS





newPntVSOpts = pntVSOpts

If pntVSOpts.vvtOpts.blCalcVVTs Then
  'Need to calculate VVTs.

  If (pntInf.orderID = -1) Then
    Err.Raise 1, , "Internal error."
  End If


  'Call procedures that set the WORK_VVT fields to their correct values
  
  If (Not pntVSOpts.vvtOpts.vvtRestrictCmp) Then
    If Not pntCalcVerSec_calc_vvts_all_swimmers(wedInf, pntInf, newPntVSOpts, pntCalcMode) Then
      Exit Function
    End If
  Else
    If Not pntCalcVerSec_calc_vvts_from_comps(wedInf, pntInf, newPntVSOpts, pntCalcMode) Then
      Exit Function
    End If
  End If

  'Notify the calculation to actually use the WORK_VVT fields.
  newPntVSOpts.blUseStdProgSettings = False

End If

'Vervangende tijden have been determined.
'Start the actual calculation

If Not pntCalcVerSec_driver_post_vvt(wedInf, pntInf, newPntVSOpts, pntCalcMode) Then
  Exit Function
End If

pntCalcVerSec_driver = True
Exit Function
fout:
MsgBox Err & " pntCalcVerSec_driver" & vbCrLf & Error$, 16
Exit Function
End Function


Private Function pntCalcVerSec_lft_restriction_handle_all_progs(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVSOpts As PNT_VER_SEC_OPTIONS, ByRef prWedNrs() As Long, ByRef prProgNrs() As String, ByRef prVVPnt() As Double, ByRef prNComp() As Integer, ByRef prMinAge() As Integer, ByRef prMaxAge() As Integer, ByRef prGes() As String, ByRef nPRs As Integer) As Boolean
On Error GoTo fout
pntCalcVerSec_lft_restriction_handle_all_progs = False


Dim pr As Recordset
Dim sql As String

sql = "SELECT DISTINCT [__punten].PT_PNT_Wedstrijdnummer, [__punten].PT_PNT_OrderID, [__punten].PT_Wedstrijdnummer, " & _
"[__punten].PT_Programmanummer, [__punten].PT_categorie, [__punten].PT_Afstand  FROM __punten where (not (nz([pt_is_initvals]))) order by pt_wedstrijdnummer, pt_programmanummer;"

Dim pntProgs As Recordset
Set pntProgs = CurrentDb().OpenRecordset("dtgPuntentellingProgs")
pntProgs.Index = "PrimaryKey"

Dim prgs As Recordset
Set prgs = CurrentDb().OpenRecordset(TNM_PR)
prgs.Index = "PrimaryKey"

Set pr = CurrentDb().OpenRecordset(sql)

pr.MoveFirst
Do Until pr.EOF

  Dim tpWed As Long
  Dim tpProg As String
  Dim tpAf As String
  Dim tpCat As String
  Dim tpVVT As Double
  Dim tpNComp As Integer
  
  tpWed = Nz(pr("PT_Wedstrijdnummer"))
  tpProg = Nz(pr("PT_Programmanummer"))
  
  Dim pntProgInf As PNT_PROG_INFO
  
  Dim isFnd As Boolean
  
  If Not pntFindProgPntInfo(pntProgs, prgs, wedInf, pntInf, pntVSOpts.blUseStdProgSettings, tpWed, tpProg, pntProgInf, isFnd) Then
    Exit Function
  End If
  
  If Not isFnd Then
    Err.Raise 1, , "Could not find prog: ( " & tpWed & " , " & tpProg & ")"
  End If
  
  tpAf = pntProgInf.Afstand
  tpCat = pntProgInf.cat
  
  
  
  tpVVT = pntProgInf.vvt
  tpNComp = pntProgInf.nComp
  
  If Not (tpAf Like "*x*") And (tpNComp > 0) And (tpVVT > 1) Then
    'This programmanummer is a valid individual prognr.
    'Therefore need to process.
    
    If (nPRs >= PNT_LFT_MAX_PROGS) Then
      Err.Raise 1, , "Too many programmanummers for the PNT_LFT option."
    End If
    
    If (tpNComp > 2) Then
      Err.Raise 1, , "Te veel meetellende deelnemers (" & tpNComp & ") in prognr " & tpProg
    End If
    
    Dim insPos As Integer
    insPos = insProg(tpWed, tpProg, nPRs, prWedNrs, prProgNrs)
    
    shiftRightDouble insPos, 1, nPRs - 1, prVVPnt
    shiftRightInt insPos, 1, nPRs - 1, prNComp
    shiftRightInt insPos, 1, nPRs - 1, prMinAge
    shiftRightInt insPos, 1, nPRs - 1, prMaxAge
    shiftRightString insPos, 1, nPRs - 1, prGes
    
    prVVPnt(insPos) = swtToSeconds(tpVVT)
    prNComp(insPos) = tpNComp
    
    'Modification dd 17 nov 2008: include leeftijd restrictions when calculating age range
    Dim tpMinAge As Integer, tpMaxAge As Integer, tpGes As String
    If Not catGetAllowedAgeRange_bare(tpCat, tpMinAge, tpMaxAge, wedInf.ageDate, wedInf.lftBep, wedInf.lftBep, True) Then
      Exit Function
    End If
    
    tpGes = m_of_v(tpCat)
    
    prMinAge(insPos) = tpMinAge
    prMaxAge(insPos) = tpMaxAge
    prGes(insPos) = tpGes
    
    
  
  End If

  pr.MoveNext
Loop

appCleanRS pr

'Finished analyzing the different programmanummers.



pntCalcVerSec_lft_restriction_handle_all_progs = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcVerSec_lft_restriction_handle_all_progs" & vbCrLf & Error$, 16
Exit Function
End Function

'Helper function
Private Function pntIsProgOK(ByVal prIdx, ByRef prNComp() As Integer, pntNZwms() As Integer, pntNConflicts() As Integer) As Boolean
Dim i As Integer
pntIsProgOK = False
For i = 0 To prNComp(prIdx) - 1
  If (i >= pntNZwms(prIdx)) Then
    Exit For
  End If
    
  If (pntNConflicts(prIdx, i) > 0) Then
    'There is a conflict; so exit functoin
    Exit Function
  End If
Next i
pntIsProgOK = True
End Function

'Helper function
Private Sub pntDeleteConflict(ByVal prIdx As Integer, ByVal pntPos As Integer, ByVal cIdx As Integer, ByRef pntNConflicts() As Integer, ByRef pntConflictTgtPrIdx() As Integer, ByRef pntConflictTgtPntPos() As Integer)
If (cIdx < pntNConflicts(prIdx, pntPos) - 1) Then
  'Need to move last conflict into this position which is becoming free.
  pntConflictTgtPrIdx(prIdx, pntPos, cIdx) = pntConflictTgtPrIdx(prIdx, pntPos, pntNConflicts(prIdx, pntPos) - 1)
  pntConflictTgtPntPos(prIdx, pntPos, cIdx) = pntConflictTgtPntPos(prIdx, pntPos, pntNConflicts(prIdx, pntPos) - 1)
End If

pntNConflicts(prIdx, pntPos) = pntNConflicts(prIdx, pntPos) - 1
End Sub

'helper function
Private Sub pntInitBanned(ByVal blkIdx As Integer, ByRef blkNProgs() As Integer, ByRef blkPrIdx() As Integer, ByRef pntNZwms() As Integer, ByRef pntBanned() As Integer)

Dim bp As Integer, p As Integer, i As Integer
For bp = 0 To blkNProgs(blkIdx) - 1
  Dim prIdx As Integer
  prIdx = blkPrIdx(blkIdx, bp)
  For p = 0 To pntNZwms(prIdx) - 1
    pntBanned(prIdx, p) = -1 'Not Banned
  Next p
Next bp

End Sub


Private Sub pntInitResult(ByVal blkIdx As Integer, ByRef blkNProgs() As Integer, ByRef blkPrIdx() As Integer, ByRef prNComp() As Integer, ByRef pntNZwms() As Integer, ByRef res() As Integer)

Dim bp As Integer, p As Integer, i As Integer
For bp = 0 To blkNProgs(blkIdx) - 1
  Dim prIdx As Integer
  prIdx = blkPrIdx(blkIdx, bp)
  For p = 0 To prNComp(prIdx) - 1
    res(prIdx, p) = pntNZwms(prIdx)
  Next p
Next bp

End Sub

Private Sub pntCopyResult(ByVal blkIdx As Integer, ByRef blkNProgs() As Integer, ByRef blkPrIdx() As Integer, ByRef prNComp() As Integer, ByRef resSrc() As Integer, ByRef resTgt() As Integer)

Dim bp As Integer, p As Integer, i As Integer
For bp = 0 To blkNProgs(blkIdx) - 1
  Dim prIdx As Integer
  prIdx = blkPrIdx(blkIdx, bp)
  For p = 0 To prNComp(prIdx) - 1
    resTgt(prIdx, p) = resSrc(prIdx, p)
  Next p
Next bp

End Sub

Private Function pntValueResult(ByVal blkIdx As Integer, ByRef blkNProgs() As Integer, ByRef blkPrIdx() As Integer, ByRef prNComp() As Integer, ByRef prVVP() As Double, ByRef pntNZwms() As Integer, ByRef pntZwPnt() As Double, ByRef res() As Integer) As Double
Dim tpPnt As Double
tpPnt = 0

Dim bp As Integer, p As Integer, i As Integer
For bp = 0 To blkNProgs(blkIdx) - 1
  Dim prIdx As Integer
  prIdx = blkPrIdx(blkIdx, bp)
  For p = 0 To prNComp(prIdx) - 1
    If res(prIdx, p) = pntNZwms(prIdx) Then
      tpPnt = tpPnt + prVVP(prIdx)
    Else
      tpPnt = tpPnt + pntZwPnt(prIdx, res(prIdx, p))
    End If
  Next p
Next bp

pntValueResult = tpPnt


End Function




'helper
Private Sub pntOptimizeSane(ByVal phase As Integer, ByRef phaseStartNFree() As Integer, ByRef phaseStartFreePrIdx() As Integer, _
   ByRef phaseStartFirstFreePntPos() As Integer, ByRef phaseStartLastSanePntPos() As Integer, _
  ByRef pntNZwms() As Integer, ByRef pntNConflicts() As Integer, pntConflictTgtPrIdx() As Integer, pntConflictTgtPntPos() As Integer, ByRef pntBanned() As Integer, _
  ByRef prPhaseMinFreeIdx() As Integer, prPhaseMaxFreeIdx() As Integer)
  
  'See if we can improve the lastSanePntPos
  

  
  Dim blDone As Boolean
  blDone = False
  
  Do Until blDone
    Dim blImproved As Boolean
    blImproved = False
    
    Dim i As Integer
    For i = 0 To phaseStartNFree(phase) - 1
      Dim j As Integer
      
      Dim curPrIdx As Integer
      curPrIdx = phaseStartFreePrIdx(phase, i)
      
      'Determine first and last index to check.
      Dim firstIdx As Integer
      Dim lastIdx As Integer
      
      lastIdx = phaseStartLastSanePntPos(phase, i) - 1
      
           
      If (prPhaseMinFreeIdx(curPrIdx, phase) < i) Then
        'Note that we need to find the next sane index.
        If (i = 0) Then
          Err.Raise "Internal error: i = 0"
        End If
        firstIdx = phaseStartLastSanePntPos(phase, (i - 1)) + 1
        If firstIdx > pntNZwms(curPrIdx) Then
          firstIdx = pntNZwms(curPrIdx)
        End If
      Else
        firstIdx = phaseStartFirstFreePntPos(phase, i)
      End If
      
      For j = firstIdx To lastIdx
        
        If (j >= pntNZwms(curPrIdx)) Then
          Err.Raise 1, , "Internal error: j >= pntnZwms"
        End If
        
        'Ensure that this position is not banned.
        If pntBanned(curPrIdx, j) = -1 Then
        
          Dim nCnf As Integer
          nCnf = pntNConflicts(curPrIdx, j)
          Dim isOK As Boolean
          isOK = True
          Dim c As Integer
          For c = 0 To nCnf - 1
            Dim tgtPrIdx As Integer
            Dim tgtPntPos As Integer
          
            tgtPrIdx = pntConflictTgtPrIdx(curPrIdx, j, c)
            tgtPntPos = pntConflictTgtPntPos(curPrIdx, j, c)
          
            If prPhaseMaxFreeIdx(tgtPrIdx, phase) >= 0 Then
              'The target is still free.
              'Need to check if tgtPntPos < lastSanePos(tgtPrIdx)
              'If so, then we have a problem.
            
              Dim tgtLastSanePos As Integer
              tgtLastSanePos = phaseStartLastSanePntPos(phase, prPhaseMaxFreeIdx(tgtPrIdx, phase))
              
              
              If (tgtPntPos = tgtLastSanePos) Then
                Err.Raise 1, , "Internal error: tgtPntPos = tgtLastSanePos"
              End If
              If (tgtPntPos < tgtLastSanePos) Then
                isOK = False
                Exit For 'forc
              End If
            End If 'if the target prog is still free
          Next c
        
          If (isOK) Then
            'We have found a new sane position.
            phaseStartLastSanePntPos(phase, i) = j
            blImproved = True
            Exit For 'for j
          End If 'if isOK
        End If 'if not pntBanned
        
      Next j
      
    Next i
    
    blDone = Not blImproved
  Loop

End Sub



Private Function pntCalcVerSec_lft_restriction_handle_block(ByVal blkIdx As Integer, ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVSOpts As PNT_VER_SEC_OPTIONS, ByRef prWedNrs() As Long, ByRef prProgNrs() As String, ByRef prVVPnt() As Double, ByRef prNComp() As Integer, ByRef prMinAge() As Integer, ByRef prMaxAge() As Integer, ByRef prGes() As String, ByVal nPRs As Integer, _
ByRef zwmStartNummers() As String, ByRef zwmNStarts() As Integer, ByRef zwmPrIdx() As Integer, ByRef zwmPntPos() As Integer, ByVal nZwms As Integer, _
ByRef pntZwIdx() As Integer, ByRef pntZwPnt() As Double, pntNZwms() As Integer, ByVal vName As String, _
ByRef prBlockIdx() As Integer, pntNConflicts() As Integer, pntConflictTgtPrIdx() As Integer, pntConflictTgtPntPos() As Integer, _
ByRef blkNProgs() As Integer, ByRef blkPrIdx() As Integer, ByRef minValidPntPos() As Integer) As Boolean

On Error GoTo fout

pntCalcVerSec_lft_restriction_handle_block = False

Dim pntBanned(0 To PNT_LFT_MAX_PROGS, 0 To MAX_N_MEETEL) As Integer





Dim wrkValidPntPos(0 To PNT_LFT_MAX_PROGS, 0 To 1) As Integer


Dim curPrIdx As Integer, curCmpIdx As Integer

'Initialize banned

'First get a minimum estimate.
Dim minValidPnt As Double

pntInitResult blkIdx, blkNProgs, blkPrIdx, prNComp, pntNZwms, minValidPntPos
minValidPnt = pntValueResult(blkIdx, blkNProgs, blkPrIdx, prNComp, prVVPnt, pntNZwms, pntZwPnt, minValidPntPos)


Dim sBP As Integer, bp As Integer
For sBP = 0 To blkNProgs(blkIdx) - 1
  pntInitBanned blkIdx, blkNProgs, blkPrIdx, pntNZwms, pntBanned
  
  pntInitResult blkIdx, blkNProgs, blkPrIdx, prNComp, pntNZwms, wrkValidPntPos
  
  For bp = 0 To blkNProgs(blkIdx) - 1

    
    curPrIdx = blkPrIdx(blkIdx, (sBP + bp) Mod blkNProgs(blkIdx))
    
    'Determine fastest unbanned swimmers
    Dim swmPlaced As Integer
    swmPlaced = 0
    
    Dim curPntPos As Integer
    curPntPos = 0
    While swmPlaced < prNComp(curPrIdx)
      If curPntPos >= pntNZwms(curPrIdx) Then
        wrkValidPntPos(curPrIdx, swmPlaced) = pntNZwms(curPrIdx)
        swmPlaced = swmPlaced + 1
      Else
        If (pntBanned(curPrIdx, curPntPos) < 0) Then
          'allow placement
          wrkValidPntPos(curPrIdx, swmPlaced) = curPntPos
          swmPlaced = swmPlaced + 1
          
          'block all conflicts resulting from this placement.
          
          Dim k As Integer
          For k = 0 To pntNConflicts(curPrIdx, curPntPos) - 1
            Dim tgtPrIdx As Integer
            Dim tgtPntPos As Integer
            tgtPrIdx = pntConflictTgtPrIdx(curPrIdx, curPntPos, k)
            tgtPntPos = pntConflictTgtPntPos(curPrIdx, curPntPos, k)
            
            If prBlockIdx(tgtPrIdx) <> blkIdx Then
              Err.Raise 1, , "Internal error: blocks are not well-formed."
            End If
            
            'Ban the target.
            pntBanned(tgtPrIdx, tgtPntPos) = 0
            
          Next k
        End If
        curPntPos = curPntPos + 1
      End If
    
    Wend
  Next bp
  
  Dim tpValue As Double
  
  tpValue = pntValueResult(blkIdx, blkNProgs, blkPrIdx, prNComp, prVVPnt, pntNZwms, pntZwPnt, wrkValidPntPos)
  If (tpValue < minValidPnt) Then
    minValidPnt = tpValue
    pntCopyResult blkIdx, blkNProgs, blkPrIdx, prNComp, wrkValidPntPos, minValidPntPos
  End If
Next sBP

'========
'We have obtained an initial estimate.
'=======

'Now obtain an absolute minimum, by selecting the fastest swimmer, even if this is not allowed.

Dim wrkMinPnt(0 To PNT_LFT_MAX_PROGS, 0 To 1) As Double
Dim wrkMinPntPos(0 To PNT_LFT_MAX_PROGS, 0 To 1) As Double

Dim i As Integer

pntInitResult blkIdx, blkNProgs, blkPrIdx, prNComp, pntNZwms, wrkValidPntPos

Dim minAbsolute As Double
For bp = 0 To blkNProgs(blkIdx) - 1
  curPrIdx = blkPrIdx(blkIdx, bp)
  For i = 0 To prNComp(curPrIdx) - 1
    If (i < pntNZwms(curPrIdx)) Then
      wrkValidPntPos(curPrIdx, i) = i
      wrkMinPnt(curPrIdx, i) = pntZwPnt(curPrIdx, i)
      wrkMinPntPos(curPrIdx, i) = i
    Else
      wrkValidPntPos(curPrIdx, i) = pntNZwms(curPrIdx)
      wrkMinPnt(curPrIdx, i) = prVVPnt(curPrIdx)
      wrkMinPntPos(curPrIdx, i) = pntNZwms(curPrIdx)
    End If
  Next i
Next bp

minAbsolute = pntValueResult(blkIdx, blkNProgs, blkPrIdx, prNComp, prVVPnt, pntNZwms, pntZwPnt, wrkValidPntPos)

'==========================
'Absolute minimum has now been determined
'==========================



'===========================
'Start the backtrack phase
'===========================


Dim phaseFreeIdx(0 To 2 * PNT_LFT_MAX_PROGS) As Integer
Dim phasePrIdx(0 To 2 * PNT_LFT_MAX_PROGS) As Integer
Dim phaseCmpIdx(0 To 2 * PNT_LFT_MAX_PROGS) As Integer
'Dim phaseFirstNeutralPntPos(0 To 2 * PNT_LFT_MAX_PROGS) As Integer
Dim phaseCurPntPos(0 To 2 * PNT_LFT_MAX_PROGS) As Integer
Dim phaseActivated(0 To 2 * PNT_LFT_MAX_PROGS) As Boolean
Dim phaseDelta(0 To 2 * PNT_LFT_MAX_PROGS) As Double

Dim phaseNBans(0 To 2 * PNT_LFT_MAX_PROGS) As Integer
Dim phaseBanTgtPrIdx(0 To 2 * PNT_LFT_MAX_PROGS, PNT_LFT_MAX_ST_PER_ZW) As Integer
Dim phaseBanTgtPntPos(0 To 2 * PNT_LFT_MAX_PROGS, PNT_LFT_MAX_ST_PER_ZW) As Integer

Dim phaseStartNFree(0 To 2 * PNT_LFT_MAX_PROGS) As Integer
Dim phaseStartFreePrIdx(0 To 2 * PNT_LFT_MAX_PROGS, 0 To 2 * PNT_LFT_MAX_PROGS) As Integer
Dim phaseStartFreeCmpIdx(0 To 2 * PNT_LFT_MAX_PROGS, 0 To 2 * PNT_LFT_MAX_PROGS) As Integer
'Dim phaseStartFirstCmpFreeIdx(0 To 2 * PNT_LFT_MAX_PROGS, 0 To 2 * PNT_LFT_MAX_PROGS) As Integer

Dim phaseStartFirstFreePntPos(0 To 2 * PNT_LFT_MAX_PROGS, 0 To 2 * PNT_LFT_MAX_PROGS) As Integer
Dim phaseStartFirstFreeDelta(0 To 2 * PNT_LFT_MAX_PROGS, 0 To 2 * PNT_LFT_MAX_PROGS) As Double
Dim phaseStartFreeIdxMaxDelta(0 To 2 * PNT_LFT_MAX_PROGS) As Integer
Dim phaseStartLastSanePntPos(0 To 2 * PNT_LFT_MAX_PROGS, 0 To 2 * PNT_LFT_MAX_PROGS) As Integer


'Dim wrkPhaseIdx(0 To PNT_LFT_MAX_PROGS, 0 To 1) As Integer

Dim prPhaseMinFreeIdx(0 To PNT_LFT_MAX_PROGS, 0 To 2 * PNT_LFT_MAX_PROGS) As Integer
Dim prPhaseMaxFreeIdx(0 To PNT_LFT_MAX_PROGS, 0 To 2 * PNT_LFT_MAX_PROGS) As Integer


Dim curPhase As Integer
Dim curPhaseFreeIdx As Integer
Dim curPhaseDelta As Double

Dim nPhasesTot As Integer


pntInitBanned blkIdx, blkNProgs, blkPrIdx, pntNZwms, pntBanned


'Initialize phases and phaseStart data
nPhasesTot = 0
For bp = 0 To blkNProgs(blkIdx) - 1
  curPrIdx = blkPrIdx(blkIdx, bp)
  
  If prNComp(curPrIdx) = 0 Then
    Err.Raise 1, , "Internal error: prNComp = 0"
  End If
  
  prPhaseMinFreeIdx(curPrIdx, 0) = nPhasesTot
  prPhaseMaxFreeIdx(curPrIdx, 0) = nPhasesTot + prNComp(curPrIdx) - 1
  
  For i = 0 To prNComp(curPrIdx) - 1
    'wrkPhaseIdx(curPrIdx, i) = -1
    phaseStartFreePrIdx(0, nPhasesTot) = curPrIdx
    phaseStartFreeCmpIdx(0, nPhasesTot) = i
    phaseStartFirstFreePntPos(0, nPhasesTot) = wrkMinPntPos(curPrIdx, i)
    
    '   If (i > 0) Then
      'phaseStartFirstCmpFreeIdx(0, nPhasesTot) = nPhasesTot - i
    'End If
    
    'Since this is actually the minimum, the Delta with the minimum is zero.
    phaseStartFirstFreeDelta(0, nPhasesTot) = 0
    
    phaseStartLastSanePntPos(0, nPhasesTot) = pntNZwms(curPrIdx)
    
    
    
    
    nPhasesTot = nPhasesTot + 1
  Next i
Next bp
phaseStartNFree(0) = nPhasesTot
phaseStartFreeIdxMaxDelta(0) = 0

phaseActivated(0) = False

pntOptimizeSane 0, phaseStartNFree, phaseStartFreePrIdx, phaseStartFirstFreePntPos, phaseStartLastSanePntPos, pntNZwms, pntNConflicts, pntConflictTgtPrIdx, _
  pntConflictTgtPntPos, pntBanned, prPhaseMinFreeIdx, prPhaseMaxFreeIdx


'Initialize result.
pntInitResult blkIdx, blkNProgs, blkPrIdx, prNComp, pntNZwms, wrkValidPntPos

curPhase = 0
curPhaseFreeIdx = phaseStartFreeIdxMaxDelta(0)
curPhaseDelta = 0

While (curPhase >= 0)
  If (curPhase >= nPhasesTot) Then
    'We have completed a configuration.
    'Check it.
  
    For i = 0 To nPhasesTot - 1
      wrkValidPntPos(phasePrIdx(i), phaseCmpIdx(i)) = phaseCurPntPos(i)
    Next i
    
    tpValue = pntValueResult(blkIdx, blkNProgs, blkPrIdx, prNComp, prVVPnt, pntNZwms, pntZwPnt, wrkValidPntPos)
    If (tpValue < minValidPnt) Then
      minValidPnt = tpValue
      pntCopyResult blkIdx, blkNProgs, blkPrIdx, prNComp, wrkValidPntPos, minValidPntPos
    End If
    
    curPhase = curPhase - 1
    If (curPhase > 0) Then
      curPhaseFreeIdx = phaseFreeIdx(curPhase)
      curPhaseDelta = phaseDelta(curPhase)
    End If
  
  
  Else 'if curPhase < nPhasesTot

    Dim isPhaseCompleted As Boolean
    isPhaseCompleted = False
    
    
    
    Dim nxtPntPos As Integer
    Dim nxtPosDelta As Double
    
    If (phaseActivated(curPhase)) Then
      nxtPntPos = phaseCurPntPos(curPhase) + 1
    Else
      'Need to start up this phase.
       phaseFreeIdx(curPhase) = curPhaseFreeIdx
       phasePrIdx(curPhase) = phaseStartFreePrIdx(curPhase, curPhaseFreeIdx)
       phaseCmpIdx(curPhase) = phaseStartFreeCmpIdx(curPhase, curPhaseFreeIdx)
       
       nxtPntPos = phaseStartFirstFreePntPos(curPhase, curPhaseFreeIdx)
              
       phaseActivated(curPhase) = True
       
       phaseNBans(curPhase) = 0
       
       phaseDelta(curPhase) = curPhaseDelta
       
       isPhaseCompleted = False
    End If 'if phaseActivated
    
    
    'Need to release all banns that were put in place.
    For i = 0 To phaseNBans(curPhase) - 1
      Dim banTgtPrIdx As Integer
      Dim banTgtPntPos As Integer
      banTgtPrIdx = phaseBanTgtPrIdx(curPhase, i)
      banTgtPntPos = phaseBanTgtPntPos(curPhase, i)
      
      pntBanned(banTgtPrIdx, banTgtPntPos) = -1
    Next i
    phaseNBans(curPhase) = 0
    
    
    'Now find the nxtPntPos to use.
    isPhaseCompleted = True
      
    
      
      
      
    Dim done As Boolean
    done = nxtPntPos > phaseStartLastSanePntPos(curPhase, curPhaseFreeIdx)
      
      
    'Need to find a valid next position.
    curPrIdx = phasePrIdx(curPhase)
    curCmpIdx = phaseCmpIdx(curPhase)
    
    While Not done
      'check to see if nxtPntPos is valid.
      If (nxtPntPos = pntNZwms(curPrIdx)) Then
        'there are no blocks here -> this is a valid position.
        done = True
        'Check to see if the points do not cause an overflow
        isPhaseCompleted = False
      Else
        'Check to see if the intended position is blocked
        If pntBanned(curPrIdx, nxtPntPos) = -1 Then
          'No blocks -> this is a valid position.
          
          done = True
          isPhaseCompleted = False
          
        End If
      End If
         
      If Not done Then
        nxtPntPos = nxtPntPos + 1
        If (nxtPntPos > phaseStartLastSanePntPos(curPhase, curPhaseFreeIdx)) Then
          done = True
        End If
      End If
        
    Wend
    
    If (Not isPhaseCompleted) Then
      If (nxtPntPos = pntNZwms(curPrIdx)) Then
        nxtPosDelta = prVVPnt(curPrIdx) - wrkMinPnt(curPrIdx, curCmpIdx)
      Else
        nxtPosDelta = pntZwPnt(curPrIdx, nxtPntPos) - wrkMinPnt(curPrIdx, curCmpIdx)
      End If
    End If
    
    
    'Check to see if the points do not cause an overflow
    If (Not isPhaseCompleted) Then
      If (minAbsolute + curPhaseDelta + nxtPosDelta > minValidPnt) Then
        isPhaseCompleted = True
      End If
    End If
    
    
    
    
    If (isPhaseCompleted) Then
      'Need to fall back a step.
      phaseActivated(curPhase) = False
      
      curPhase = curPhase - 1
      If (curPhase > 0) Then
        curPhaseFreeIdx = phaseFreeIdx(curPhase)
        curPhaseDelta = phaseDelta(curPhase)
      End If
    Else
      'OK; we know the nxtPntPos.
      
      'Need to apply the bans that result from this placement and move on to the next phase.
      phaseCurPntPos(curPhase) = nxtPntPos
      
      Dim c As Integer
      
      For c = 0 To pntNConflicts(curPrIdx, nxtPntPos) - 1
        
        tgtPrIdx = pntConflictTgtPrIdx(curPrIdx, nxtPntPos, c)
        tgtPntPos = pntConflictTgtPntPos(curPrIdx, nxtPntPos, c)
        
        If pntBanned(tgtPrIdx, tgtPntPos) = -1 Then
          If (prPhaseMaxFreeIdx(tgtPrIdx, curPhase) <> -1) Then
            'The target is still free.
            pntBanned(tgtPrIdx, tgtPntPos) = curPhase
            phaseBanTgtPrIdx(curPhase, phaseNBans(curPhase)) = tgtPrIdx
            phaseBanTgtPntPos(curPhase, phaseNBans(curPhase)) = tgtPntPos
            phaseNBans(curPhase) = phaseNBans(curPhase) + 1
          End If
        End If
      Next c
      
      
      
       For bp = 0 To blkNProgs(blkIdx) - 1
         prPhaseMaxFreeIdx(blkPrIdx(blkIdx, bp), curPhase + 1) = -1
         prPhaseMinFreeIdx(blkPrIdx(blkIdx, bp), curPhase + 1) = -1
       Next bp
     
     
       phaseStartNFree(curPhase + 1) = 0
       phaseStartFreeIdxMaxDelta(curPhase + 1) = -1
       
       For i = 0 To phaseStartNFree(curPhase) - 1
         
         'Check if this is the one which we need to skip
         If (i <> curPhaseFreeIdx) Then
           Dim newFreePrIdx As Integer
           Dim newFreeCmpIdx As Integer
           newFreePrIdx = phaseStartFreePrIdx(curPhase, i)
           newFreeCmpIdx = phaseStartFreeCmpIdx(curPhase, i)
           
           If (prPhaseMinFreeIdx(newFreePrIdx, curPhase + 1) = -1) Then
             prPhaseMinFreeIdx(newFreePrIdx, curPhase + 1) = phaseStartNFree(curPhase + 1)
           End If
           prPhaseMaxFreeIdx(newFreePrIdx, curPhase + 1) = phaseStartNFree(curPhase + 1)
           
           
           phaseStartFreePrIdx(curPhase + 1, phaseStartNFree(curPhase + 1)) = newFreePrIdx
           phaseStartFreeCmpIdx(curPhase + 1, phaseStartNFree(curPhase + 1)) = newFreeCmpIdx
           phaseStartLastSanePntPos(curPhase + 1, phaseStartNFree(curPhase + 1)) = phaseStartLastSanePntPos(curPhase, i)
           
           
           
           Dim ffPos As Integer
           'determine ffPos
           ffPos = phaseStartFirstFreePntPos(curPhase, i)
           If (newFreePrIdx = curPrIdx) And (newFreeCmpIdx = curCmpIdx + 1) Then
             'Need to update firstFreePntPos
             'update aug 2008
             'If (phaseStartFirstFreePntPos(curPhase + 1, phaseStartNFree(curPhase + 1)) <= nxtPntPos) Then
             If (ffPos <= nxtPntPos) Then
               ffPos = nxtPntPos + 1
               If (nxtPntPos = pntNZwms(curPrIdx)) Then
                 'update
                 ffPos = nxtPntPos
               End If
             End If
           End If
           
           done = (ffPos >= pntNZwms(newFreePrIdx))
           While Not done
             If pntBanned(newFreePrIdx, ffPos) = -1 Then
               done = True
             Else
               ffPos = ffPos + 1
               done = (ffPos >= pntNZwms(newFreePrIdx))
             End If
           Wend
                              
           phaseStartFirstFreePntPos(curPhase + 1, phaseStartNFree(curPhase + 1)) = ffPos
           
           Dim ffDelta As Double
           If (ffPos = pntNZwms(newFreePrIdx)) Then
             ffDelta = prVVPnt(newFreePrIdx) - wrkMinPnt(newFreePrIdx, newFreeCmpIdx)
           Else
             ffDelta = pntZwPnt(newFreePrIdx, ffPos) - wrkMinPnt(newFreePrIdx, newFreeCmpIdx)
           End If
           
           phaseStartFirstFreeDelta(curPhase + 1, phaseStartNFree(curPhase + 1)) = ffDelta
           
           'Check to see if this is a minimum.
           If phaseStartFreeIdxMaxDelta(curPhase + 1) = -1 Then
             phaseStartFreeIdxMaxDelta(curPhase + 1) = phaseStartNFree(curPhase + 1)
           Else
             If (ffDelta > phaseStartFirstFreeDelta(curPhase + 1, phaseStartFreeIdxMaxDelta(curPhase + 1))) Then
               'Only allow setting of phaseStartFreeIdxMaxDelta if it is the first free competitor.
               'Second competitors are thus only allowed if the first has already been fixed.
               If prPhaseMinFreeIdx(newFreePrIdx, curPhase + 1) = phaseStartNFree(curPhase + 1) Then
                 phaseStartFreeIdxMaxDelta(curPhase + 1) = phaseStartNFree(curPhase + 1)
               End If
            End If
           End If
           
           phaseStartNFree(curPhase + 1) = phaseStartNFree(curPhase + 1) + 1
         End If
       Next i
       
       'Now optimize the lastSanePntPos
       pntOptimizeSane curPhase + 1, phaseStartNFree, phaseStartFreePrIdx, phaseStartFirstFreePntPos, phaseStartLastSanePntPos, pntNZwms, pntNConflicts, pntConflictTgtPrIdx, _
         pntConflictTgtPntPos, pntBanned, prPhaseMinFreeIdx, prPhaseMaxFreeIdx


      'Now move to next phase
      curPhase = curPhase + 1
      curPhaseDelta = curPhaseDelta + nxtPosDelta
      curPhaseFreeIdx = phaseStartFreeIdxMaxDelta(curPhase)

      
    End If 'if isPhaseComplete
    
    
    
  End If 'if phase < nTotalPhases
  

Wend







pntCalcVerSec_lft_restriction_handle_block = True
Exit Function
fout:
MsgBox Err & " pntCalcVerSec_lft_restriction_handle_block" & vbCrLf & Error$, 16
Exit Function
'debug
On Error GoTo 0
Resume

End Function



Private Function pntCalcVerSec_lft_restriction_handle_ver(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVSOpts As PNT_VER_SEC_OPTIONS, ByRef prWedNrs() As Long, ByRef prProgNrs() As String, ByRef prVVPnt() As Double, ByRef prNComp() As Integer, ByRef prMinAge() As Integer, ByRef prMaxAge() As Integer, ByRef prGes() As String, ByVal nPRs As Integer, _
ByRef zwmStartNummers() As String, ByRef zwmNStarts() As Integer, ByRef zwmPrIdx() As Integer, ByRef zwmPntPos() As Integer, ByVal nZwms As Integer, _
ByRef pntZwIdx() As Integer, ByRef pntZwPnt() As Double, pntNZwms() As Integer, ByVal vName As String, ByRef minValidPntPos() As Integer) As Boolean

On Error GoTo fout
pntCalcVerSec_lft_restriction_handle_ver = False




'This procedure will use the filled datastructures for a single vereniging to apply the
'age restriction rules.



'First fill minValidPntPos with default values
Dim i As Integer, j As Integer
For i = 0 To nPRs - 1
  For j = 0 To prNComp(i) - 1
    If (j >= pntNZwms(i)) Then
      minValidPntPos(i, j) = pntNZwms(i)
    Else
      minValidPntPos(i, j) = j
    End If
  Next j
Next i



Dim q(0 To PNT_LFT_MAX_PROGS) As Long
Dim qHead As Integer
Dim qTail As Integer
Dim qCapacity As Integer
qCapacity = PNT_LFT_MAX_PROGS

Dim prBlockIdx(0 To PNT_LFT_MAX_PROGS) As Integer

'Dim prNConflicts(0 To PNT_LFT_MAX_PROGS) As Integer
'Dim prConflictSrcPntPos(0 To PNT_LFT_MAX_PROGS, 0 To MAX_N_MEETEL * PNT_LFT_MAX_ST_PER_ZW)
'Dim prConflictTgtPrIdx(0 To PNT_LFT_MAX_PROGS, 0 To MAX_N_MEETEL * PNT_LFT_MAX_ST_PER_ZW)
'Dim prConflictTgtPntPos(0 To PNT_LFT_MAX_PROGS, 0 To MAX_N_MEETEL * PNT_LFT_MAX_ST_PER_ZW)

Dim pntNConflicts(0 To PNT_LFT_MAX_PROGS, 0 To MAX_N_MEETEL) As Integer
'Dim pntFirstConflictIdx(0 To PNT_LFT_MAX_PROGS, 0 To MAX_N_MEETEL)
Dim pntConflictTgtPrIdx(0 To PNT_LFT_MAX_PROGS, 0 To MAX_N_MEETEL, 0 To PNT_LFT_MAX_ST_PER_ZW) As Integer
Dim pntConflictTgtPntPos(0 To PNT_LFT_MAX_PROGS, 0 To MAX_N_MEETEL, 0 To PNT_LFT_MAX_ST_PER_ZW) As Integer


Dim nBlocks As Integer
Dim blkNProgs(0 To PNT_LFT_MAX_PROGS) As Integer
Dim blkPrIdx(0 To PNT_LFT_MAX_PROGS, 0 To PNT_LFT_MAX_PROGS) As Integer

'Initialisations
Dim k As Integer
For i = 0 To nPRs - 1
  prBlockIdx(i) = -1
  'prNConflicts(i) = 0
  For j = 0 To pntNZwms(i) - 1
    pntNConflicts(i, j) = 0
  Next j
Next i


'First build conflict data.
For i = 0 To nPRs - 1
  'Loop througth all the pnt positions in this prog.
  For j = 0 To pntNZwms(i) - 1
    Dim swIdx As Integer
    swIdx = pntZwIdx(i, j)
    'Loop through all the other times this swimmer has swum.
    For k = 0 To zwmNStarts(swIdx) - 1
      Dim tgtPrIdx As Integer
      Dim tgtPntPos As Integer
      tgtPrIdx = zwmPrIdx(swIdx, k)
      tgtPntPos = zwmPntPos(swIdx, k)
      
      'Check to see if this is a different progIdx
      If (tgtPrIdx <> i) Then
        'Check to see if there is a conflict.
        If (prMinAge(i) <> prMinAge(tgtPrIdx)) Or (prMaxAge(i) <> prMaxAge(tgtPrIdx)) Or (prGes(i) <> prGes(tgtPrIdx)) Then
          'We have a conflict. Add to the datastructures.
          
          
          
          pntConflictTgtPrIdx(i, j, pntNConflicts(i, j)) = tgtPrIdx
          pntConflictTgtPntPos(i, j, pntNConflicts(i, j)) = tgtPntPos
          
          pntNConflicts(i, j) = pntNConflicts(i, j) + 1
          
        End If
      End If
    Next k
  Next j
Next i


'Now determine all progs that do NOT have a conflict in the first NComp positions.
'These progs do not need to be included in the optimization procedure.
'Furthermore, delete the conflicts associated with this prog.

'First init the queue
queueInit q, qHead, qTail, qCapacity

For i = 0 To nPRs - 1
    If pntIsProgOK(i, prNComp, pntNZwms, pntNConflicts) Then
      prBlockIdx(i) = -2
      'Add onto queue for processing
      queueEnqueue i, q, qHead, qTail, qCapacity
    End If
Next i

'Loop until the queue is empty.
'Take out a prog that is OK, go through its conflict list and delete all associated conflicts,
'detecting other progs that may become OK and putting them onto the queue.
While Not queueEmpty(q, qHead, qTail, qCapacity)
  Dim tpPrIdx As Integer
  tpPrIdx = queueDequeue(q, qHead, qTail, qCapacity)
  
  For j = 0 To pntNZwms(tpPrIdx) - 1
    For k = 0 To pntNConflicts(tpPrIdx, j) - 1
      Dim tpTgtPrIdx As Integer
      Dim tpTgtPntPos As Integer
      
      tpTgtPrIdx = pntConflictTgtPrIdx(tpPrIdx, j, k)
      tpTgtPntPos = pntConflictTgtPntPos(tpPrIdx, j, k)
      
      If (prBlockIdx(tpTgtPrIdx) = -1) Then
        'Seek out the reversee conflict and delete it.
        Dim blFound As Boolean
        blFound = False
        Dim l As Integer
        For l = 0 To pntNConflicts(tpTgtPrIdx, tpTgtPntPos) - 1
          If pntConflictTgtPrIdx(tpTgtPrIdx, tpTgtPntPos, l) = tpPrIdx Then
            'found it
            blFound = True
          
            'Now remove it
            pntDeleteConflict tpTgtPrIdx, tpTgtPntPos, l, pntNConflicts, pntConflictTgtPrIdx, pntConflictTgtPntPos
          
            'check if prog is ok, now that this conflict has been removed.
            If pntIsProgOK(tpTgtPrIdx, prNComp, pntNZwms, pntNConflicts) Then
              'Mark that the block has been enqueued.
              prBlockIdx(tpTgtPrIdx) = -2
              queueEnqueue tpTgtPrIdx, q, qHead, qTail, qCapacity
            End If
          End If
        Next l
     
      
        If Not blFound Then
          Err.Raise 1, , "Internal error. Could not find matching reverse conflict"
        End If
      End If
      
      
    Next k
  Next j
Wend






'Perform dfs and group into dependent blocks.
queueInit q, qHead, qTail, qCapacity


Dim curBlockIdx As Integer
Dim firstFreePrIdx As Integer
curBlockIdx = -1
firstFreePrIdx = -1

'Determine firstFreePrIdx, which is the first index for which prBlockIdx = -1
Dim done As Boolean
done = False

While Not done
  firstFreePrIdx = firstFreePrIdx + 1
  If (firstFreePrIdx >= nPRs) Then
    done = True
  Else
    If (prBlockIdx(firstFreePrIdx) = -1) Then
      done = True
    End If
  End If
Wend

While (firstFreePrIdx < nPRs)
  curBlockIdx = curBlockIdx + 1
  
  prBlockIdx(firstFreePrIdx) = curBlockIdx
  queueEnqueue firstFreePrIdx, q, qHead, qTail, qCapacity
  
  Do Until queueEmpty(q, qHead, qTail, qCapacity)
    
    Dim curPrIdx As Integer
    curPrIdx = queueDequeue(q, qHead, qTail, qCapacity)
     
    'Now determine all free programmanummers that this programmanummer has a conflict with
    'set their blockIdx and add them to the queue.
    For j = 0 To pntNZwms(curPrIdx) - 1
      For k = 0 To pntNConflicts(curPrIdx, j) - 1
        tpTgtPrIdx = pntConflictTgtPrIdx(curPrIdx, j, k)
        
        If (prBlockIdx(tpTgtPrIdx) = -2) Then
          Err.Raise 1, , "Internal error. Problem determining blocks"
        End If
      
        If (prBlockIdx(tpTgtPrIdx) = -1) Then
          'Mark that the target prog belongs to the current block
          'and add it to the dfs queue.
          prBlockIdx(tpTgtPrIdx) = curBlockIdx
          queueEnqueue tpTgtPrIdx, q, qHead, qTail, qCapacity
          
        Else
          If (prBlockIdx(tpTgtPrIdx) <> curBlockIdx) Then
            Err.Raise 1, , "Internal error. Problem determining blocks: dfs error."
          End If
        End If
      Next k
    Next j
  Loop

  'Update firstFreePrIdx
  done = False
  Do Until done
   firstFreePrIdx = firstFreePrIdx + 1
   If (firstFreePrIdx >= nPRs) Then
     done = True
   Else
     If (prBlockIdx(firstFreePrIdx) = -1) Then
       done = True
    End If
   End If
  Loop
Wend

'Divide the remaining progs into the blocks.
nBlocks = curBlockIdx + 1
For i = 0 To nBlocks - 1
  blkNProgs(i) = 0
Next i
For i = 0 To nPRs - 1

  If (prBlockIdx(i) = -1) Then
    Err.Raise 1, , "Internal error. Problem determining blocks: prBlockIdx(i) = -1"
  End If

  If (prBlockIdx(i) >= 0) Then
    blkPrIdx(prBlockIdx(i), blkNProgs(prBlockIdx(i))) = i
    blkNProgs(prBlockIdx(i)) = blkNProgs(prBlockIdx(i)) + 1
  End If
Next i

'===========
'End of initialisations
'===========




'Now perform the minimization procedure over each block separately

For i = 0 To nBlocks - 1
  If Not pntCalcVerSec_lft_restriction_handle_block(i, wedInf, pntInf, pntVSOpts, prWedNrs, prProgNrs, prVVPnt, prNComp, prMinAge, prMaxAge, prGes, nPRs, _
    zwmStartNummers, zwmNStarts, zwmPrIdx, zwmPntPos, nZwms, pntZwIdx, pntZwPnt, pntNZwms, vName, prBlockIdx, pntNConflicts, pntConflictTgtPrIdx, pntConflictTgtPntPos, blkNProgs, blkPrIdx, minValidPntPos) Then
      Exit Function
  End If
Next i




pntCalcVerSec_lft_restriction_handle_ver = True
Exit Function

fout:
MsgBox Err & " pntCalcVerSec_lft_restriction_handle_ver" & vbCrLf & Error$, 16
Exit Function
End Function



Public Function pntCalcVerSec_CreateLftTable(ByVal tbName As String) As Boolean
On Error GoTo fout
pntCalcVerSec_CreateLftTable = False

DoCmd.SetWarnings False
DoCmd.DeleteObject acTable, tbName
DoCmd.SetWarnings True

Dim mydb As Database
Set mydb = CurrentDb()
Dim tbDef As TableDef
Set tbDef = mydb.CreateTableDef

Dim fld As Field



Set fld = tbDef.CreateField("PTL_Wedstrijdnummer", dbLong)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PTL_Programmanummer", dbText, 20)
tbDef.Fields.Append fld

Set fld = tbDef.CreateField("PTL_Vereniging", dbText, 255)
tbDef.Fields.Append fld


Set fld = tbDef.CreateField("PTL_Startnummer", dbText, 12)
tbDef.Fields.Append fld


Dim idx As Index
Set idx = tbDef.CreateIndex("PrimaryKey")

Set fld = idx.CreateField("PTL_Wedstrijdnummer", dbLong)
idx.Fields.Append fld

Set fld = idx.CreateField("PTL_Programmanummer", dbText, 20)
idx.Fields.Append fld

Set fld = idx.CreateField("PTL_Vereniging", dbText, 255)
idx.Fields.Append fld


Set fld = idx.CreateField("PTL_Startnummer", dbText, 12)
idx.Fields.Append fld

idx.Primary = True

tbDef.Indexes.Append idx



tbDef.name = tbName

mydb.TableDefs.Append tbDef

Set tbDef = Nothing



pntCalcVerSec_CreateLftTable = True
Exit Function

fout:
If (Err = 3011 Or Err = 7874) Then Resume Next
MsgBox Err & " pntCalcVerSec_CreateLftTable" & vbCrLf & Error$, 16
Exit Function
End Function


Private Function pntCalcVerSec_lft_restriction_handle_all_vers(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVSOpts As PNT_VER_SEC_OPTIONS, ByRef prWedNrs() As Long, ByRef prProgNrs() As String, ByRef prVVPnt() As Double, ByRef prNComp() As Integer, ByRef prMinAge() As Integer, ByRef prMaxAge() As Integer, ByRef prGes() As String, ByVal nPRs As Integer) As Boolean
On Error GoTo fout
pntCalcVerSec_lft_restriction_handle_all_vers = False

'This procedure will loop over all verenigingen in the __punten table and for each vereniging it will set up
'data structures considering the individual programmanummers that are subject to the age restrictions
'These datastructures will be passed to the procedure that handles each vereniging separately.


Dim zwmStartNummers(0 To PNT_LFT_MAX_ZWM) As String
Dim zwmNStarts(0 To PNT_LFT_MAX_ZWM) As Integer
Dim zwmPrIdx(0 To PNT_LFT_MAX_ZWM, 0 To PNT_LFT_MAX_ST_PER_ZW) As Integer
Dim zwmPntPos(0 To PNT_LFT_MAX_ZWM, 0 To PNT_LFT_MAX_ST_PER_ZW) As Integer
Dim nZwms As Integer

nZwms = 0

Dim pntZwIdx(0 To PNT_LFT_MAX_PROGS, 0 To MAX_N_MEETEL) As Integer
'Dim pntZwStart(0 To PNT_LFT_MAX_PROGS, 0 To MAX_N_MEETEL) As String
Dim pntZwPnt(0 To PNT_LFT_MAX_PROGS, 0 To MAX_N_MEETEL) As Double
Dim pntNZwms(0 To PNT_LFT_MAX_PROGS) As Integer




If Not pntCalcVerSec_CreateLftTable("__punten__lft") Then
 Exit Function
End If

Dim rsOut As Recordset
Set rsOut = CurrentDb().OpenRecordset("__punten__lft")


'Now loop over the results, ordered by vereniging.
'Each time a new vereniging is encountered, analyze the finished vereniging.

Dim pnt As Recordset
Set pnt = CurrentDb().OpenRecordset("select * from [__punten] order by pt_vereniging, pt_wedstrijdnummer, pt_programmanummer;")

Dim curVer As String
Dim tpVer As String
curVer = ""


pnt.MoveFirst

Dim eofflag As Boolean
eofflag = pnt.EOF

Dim i As Integer

Do Until eofflag
  eofflag = pnt.EOF
  
  If (eofflag) Then
    tpVer = ""
  Else
    tpVer = Nz(pnt("PT_Vereniging"))
  End If
  
  If (tpVer <> curVer) Then
    If (curVer <> "") Then
      'Wrap up old vereniging
    
      Dim minValidPntPos(0 To PNT_LFT_MAX_PROGS, 0 To 1) As Integer
            
      
      If Not pntCalcVerSec_lft_restriction_handle_ver(wedInf, pntInf, pntVSOpts, prWedNrs, prProgNrs, prVVPnt, prNComp, prMinAge, prMaxAge, prGes, _
        nPRs, zwmStartNummers, zwmNStarts, zwmPrIdx, zwmPntPos, nZwms, pntZwIdx, pntZwPnt, pntNZwms, curVer, minValidPntPos) Then
          
        Exit Function
      End If
      
      For i = 0 To nPRs - 1
        Dim j As Integer
        For j = 0 To prNComp(i) - 1
          If (minValidPntPos(i, j) < pntNZwms(i)) Then
            rsOut.AddNew
              rsOut("PTL_Wedstrijdnummer") = prWedNrs(i)
              rsOut("PTL_Programmanummer") = prProgNrs(i)
              rsOut("PTL_Vereniging") = curVer
              rsOut("PTL_Startnummer") = zwmStartNummers(pntZwIdx(i, minValidPntPos(i, j)))
            rsOut.Update
          End If
        Next j
      Next i
      
    
    
    End If
  
    curVer = tpVer
    

    
    'Reinitialize for a new vereniging
    nZwms = 0
    For i = 0 To nPRs - 1
      pntNZwms(i) = 0
    Next i
    
  End If 'if tpVer <> curVer
  
  
  'Now insert the data into our structures.
  If Not eofflag Then
    
    Dim tpWedNr As Long
    Dim tpProg As String
    Dim prIdx As Integer
    
    Dim tpStart As String
    Dim tpPnt As Double
    
    tpWedNr = Nz(pnt("PT_Wedstrijdnummer"))
    tpProg = Nz(pnt("PT_Programmanummer"))
    
    prIdx = bSearchProg(tpWedNr, tpProg, prWedNrs, prProgNrs, nPRs)
    If (prIdx < 0) Then
      'We can skip this programmanummer.
    Else
    
      'We have found the prog in the list.
      'We therefore need to process it.
      
          
      For i = 0 To MAX_N_MEETEL - 1
        Dim tpIsVVT As Boolean
        tpIsVVT = Nz(pnt("PT_IS_VVT_" & (i + 1)))
      
        If (Not tpIsVVT) Then
          tpStart = Nz(pnt("PT_Startnummer_" & (i + 1)))
          If tpStart <> "" Then
            tpPnt = Nz(pnt("PT_Punten_" & (i + 1)))
            
            'Now look for the swimmer in the list.
            Dim swIdx As Integer
            swIdx = bSearchString(tpStart, nZwms, zwmStartNummers)
            
         
            
            If (swIdx < 0) Then
              'Insert the swimmer into the list.
              
              If (nZwms >= PNT_LFT_MAX_ZWM) Then
                Err.Raise 1, , "Vereniging: " & tpVer & " has too many swimmer."
              End If
              
              swIdx = insString(tpStart, nZwms, zwmStartNummers)
              If (swIdx < 0) Then
                Err.Raise 1, , "Internal error."
              End If
              
              shiftRightInt swIdx, 1, nZwms - 1, zwmNStarts
              
              Dim k As Integer
              For j = (nZwms - 1) To swIdx + 1 Step -1
                'Remember that zwmNStarts has already been shifted.
                For k = 0 To zwmNStarts(j) - 1
                  zwmPrIdx(j, k) = zwmPrIdx(j - 1, k)
                  zwmPntPos(j, k) = zwmPntPos(j - 1, k)
                  'Update pntZwIdx accordingly.
                  pntZwIdx(zwmPrIdx(j, k), zwmPntPos(j, k)) = j
                Next k
              Next j
              
              zwmNStarts(swIdx) = 0
              
            End If
            
            If zwmNStarts(swIdx) >= PNT_LFT_MAX_ST_PER_ZW Then
              Err.Raise 1, , "Te veel persoonlijke starts voor: " & tpStart & " ( " & curVer & " ) "
            End If
            
            zwmPrIdx(swIdx, zwmNStarts(swIdx)) = prIdx
            zwmPntPos(swIdx, zwmNStarts(swIdx)) = pntNZwms(prIdx)
            zwmNStarts(swIdx) = zwmNStarts(swIdx) + 1
            
            'please note that pntZwIdx will be updated when the swimmer idx changes due to inclusion of a new swimmer.
            pntZwIdx(prIdx, pntNZwms(prIdx)) = swIdx
            'pntZwStart(prIdx, pntNZwms(prIdx)) = tpStart
            pntZwPnt(prIdx, pntNZwms(prIdx)) = tpPnt
            
            pntNZwms(prIdx) = pntNZwms(prIdx) + 1
            
            
          End If 'if tpStart <> ""
        End If
      
      Next i
    End If
  
  
  End If 'if not eofflag

  If Not eofflag Then
    pnt.MoveNext
  End If
Loop

appCleanRS pnt

appCleanRS rsOut


pntCalcVerSec_lft_restriction_handle_all_vers = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcVerSec_lft_restriction_handle_all_vers" & vbCrLf & Error$, 16
Exit Function

'debug
On Error GoTo 0
Resume

End Function

Private Function pntCalcVerSec_driver_lft_restriction(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVSOpts As PNT_VER_SEC_OPTIONS) As Boolean
On Error GoTo fout
pntCalcVerSec_driver_lft_restriction = False


Dim prWedNr(0 To PNT_LFT_MAX_PROGS) As Long
Dim prProgNr(0 To PNT_LFT_MAX_PROGS) As String
Dim prVVPnt(0 To PNT_LFT_MAX_PROGS) As Double
Dim prNComp(0 To PNT_LFT_MAX_PROGS) As Integer
Dim prMinAge(0 To PNT_LFT_MAX_PROGS) As Integer
Dim prMaxAge(0 To PNT_LFT_MAX_PROGS) As Integer
Dim prGes(0 To PNT_LFT_MAX_PROGS) As String
Dim nPRs As Integer

'Now load all the data.

'First load the programmanummers
If Not pntCalcVerSec_lft_restriction_handle_all_progs(wedInf, pntInf, pntVSOpts, prWedNr, prProgNr, prVVPnt, prNComp, prMinAge, prMaxAge, prGes, nPRs) Then
  Exit Function
End If

'Now delegate the programmanummer info to the procedure that processes the indivual results.
If Not pntCalcVerSec_lft_restriction_handle_all_vers(wedInf, pntInf, pntVSOpts, prWedNr, prProgNr, prVVPnt, prNComp, prMinAge, prMaxAge, prGes, nPRs) Then
  Exit Function
End If


pntCalcVerSec_driver_lft_restriction = True
Exit Function
fout:
If (Err = 3021) Then Resume Next
MsgBox Err & " pntCalcVerSec_driver_lft_restriction" & vbCrLf & Error$, 16
Exit Function
End Function





Public Function pntCalcVerMed(ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalcVerMed = False




Dim wedInf As WED_BASIC_INFO

If Not pntCalcPrepareGlobal(pntInf, wedInf) Then
  Exit Function
End If





Dim pntVerMedOpts As PNT_VER_MED_OPTIONS
Dim isFnd As Boolean

If Not pntVerMedLookup(pntInf.wednr, pntInf.orderID, isFnd, pntVerMedOpts) Then
  Exit Function
End If

If Not isFnd Then
  Err.Raise 1, , "Kon puntentelling: " & pntInf.wednr & " , " & pntInf.orderID & " )  niet vinden"
End If




'Need to calculate estafettes.
If Not analyzeEstafs(Not pntInf.blEntireMeet, wedInf.wednr, wedInf.meetMainNr, "~AN_Estafs") Then
  Exit Function
End If

If Not uitslagTransferSettings(wedInf.wednr, pntInf.blEntireMeet) Then
  Exit Function
End If

'Need to calculate rankings.
If Not uitslagRanglijsten(wedInf.wednr, pntInf.blEntireMeet, pntCalcMode) Then
  Exit Function
End If

'Need to calculate puntentellingen.
If Not uitslagPunten(wedInf.wednr, pntInf.blEntireMeet, pntCalcMode) Then
  Exit Function
End If




If Not pntInitWorkFields(pntInf, wedInf, pntVerMedOpts.blUseStdProgSettings, False) Then
  Exit Function
End If


If Not pntCalcVerMed_perform(wedInf, pntInf, pntVerMedOpts, pntCalcMode) Then
  Exit Function
End If

pntCalcVerMed = True
Exit Function
fout:
MsgBox Err & " pntCalcVerMed" & vbCrLf & Error$, 16
Exit Function
End Function




Private Function pntCalcVerMed_perform(ByRef wedInf As WED_BASIC_INFO, ByRef pntInf As PNT_GLOBAL_BASIC_INFO, ByRef pntVerMedOpts As PNT_VER_MED_OPTIONS, ByVal pntCalcMode As Integer) As Boolean
On Error GoTo fout
pntCalcVerMed_perform = False

'The strategy will be to construct a verPnt competition, in which gold medals get 1 million points,
'silver medals get 1000 points and bronze medals get 1 point.



'Initialize prog settings for the verPnt telling
Dim rs As Recordset
Set rs = CurrentDb().OpenRecordset("select * from dtgPuntentellingProgs where ptpr_wedstrijdnummer + " & pntInf.wednr & " and ptpr_orderid = " & pntInf.orderID)

rs.MoveFirst
Do Until rs.EOF
  Dim tpInclude As Boolean
  tpInclude = Nz(rs("PTPR_WORK_MED_IncludeProg"), False)
  
  rs.Edit
    If (tpInclude) Then
      rs("PTPR_WORK_NComp") = MAX_N_MEETEL
    Else
      rs("PTPR_WORK_NComp") = 0
    End If
  rs.Update
  
  rs.MoveNext
Loop

appCleanRS rs



Dim sql As String

DoCmd.SetWarnings False

'Initialize point settings for the verPnt telling
sql = "delete * from dtgPuntentellingPlaatsPunt where ptp_wedstrijdnummer = " & pntInf.wednr & " and ptp_orderID = " & pntInf.orderID
DoCmd.RunSQL sql

Set rs = CurrentDb().OpenRecordset("dtgPuntentellingPlaatsPunt")

'gold medal
rs.AddNew
  rs("PTP_Wedstrijdnummer") = pntInf.wednr
  rs("PTP_OrderID") = pntInf.orderID
  rs("PTP_Plaats") = 1
  rs("PTP_Punten") = 1000000
  rs("PTP_PuntenEstaf") = 1000000
rs.Update

'silver medal
rs.AddNew
  rs("PTP_Wedstrijdnummer") = pntInf.wednr
  rs("PTP_OrderID") = pntInf.orderID
  rs("PTP_Plaats") = 2
  rs("PTP_Punten") = 1000
  rs("PTP_PuntenEstaf") = 1000
rs.Update

'bronze medal
rs.AddNew
  rs("PTP_Wedstrijdnummer") = pntInf.wednr
  rs("PTP_OrderID") = pntInf.orderID
  rs("PTP_Plaats") = 3
  rs("PTP_Punten") = 1
  rs("PTP_PuntenEstaf") = 1
rs.Update

appCleanRS rs

'initialize initial values for vers
sql = "update dtgPuntentellingTussenstandVer set ptt_punten = 1000000*nz([ptt_n_gold], 0) + 1000*nz([ptt_n_silver], 0) + nz([ptt_n_bronze],0) " & _
  "where ptt_wedstrijdnummer = " & pntInf.wednr & " and ptt_orderID = " & pntInf.orderID
DoCmd.RunSQL sql


'Initialize initial value for vergroups
sql = "update dtgPuntentellingVerGroups set ptvg_initValue = 1000000*nz([ptvg_init_n_gold], 0) + 1000*nz([ptvg_init_n_silver], 0) + nz([ptvg_init_n_bronze],0) " & _
  "where ptvg_wedstrijdnummer = " & pntInf.wednr & " and ptvg_orderID = " & pntInf.orderID
DoCmd.RunSQL sql

DoCmd.SetWarnings True



Dim pntInfNew As PNT_GLOBAL_BASIC_INFO
pntInfNew = pntInf
pntInfNew.type = PNT_TYPE_VER_PNT

Dim pntVPOptsNew As PNT_VER_PNT_OPTIONS

pntVPOptsNew.blDisFixedPointRequireValidTime = False

'Need to include all times
pntVPOptsNew.blDoortellen = True

pntVPOptsNew.blGroupVers = pntVerMedOpts.blGroupVers

'Need to include all times
pntVPOptsNew.blIncludeRVerTimes = True

pntVPOptsNew.blRestrictVers = pntVerMedOpts.blRestrictVers
pntVPOptsNew.blUseProgSubOrdering = True

'Should be irrelevant:
pntVPOptsNew.blUseStdProgSettings = False

pntVPOptsNew.blUseStdTst = False
pntVPOptsNew.blUseTst = pntVerMedOpts.blUseTst

'block disqualified swimmers
pntVPOptsNew.disFixedPoints = 0
pntVPOptsNew.disMode = PNT_DSQ_MODE_BLOCK



If Not pntCalcVerPnt_Perform(wedInf, pntInfNew, pntVPOptsNew, pntCalcMode) Then
  Exit Function
End If





pntCalcVerMed_perform = True
Exit Function


fout:
If (Err = 3021) Then Resume Next

DoCmd.SetWarnings True

MsgBox Err & " pntCalcVerMed_perform" & vbCrLf & Error$, 16
Exit Function

End Function